#!/usr/bin/env python3
"""
Test para validar las actualizaciones de fechas y emails
Fechas: DD/MM/YYYY (d√≠a 2 d√≠gitos, mes 2 d√≠gitos, a√±o 4 d√≠gitos)
Email: Conversi√≥n autom√°tica a min√∫sculas (incluyendo @)
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from app.services.validators_service import ValidadorFecha, ValidadorEmail

def test_fechas_validas():
    """Test de fechas v√°lidas"""
    print("üß™ TESTING FECHAS V√ÅLIDAS (DD/MM/YYYY)")
    print("=" * 50)
    
    casos_validos = [
        ("01/01/2024", "Primer d√≠a del a√±o"),
        ("15/03/2024", "Fecha media"),
        ("31/12/2024", "√öltimo d√≠a del a√±o"),
        ("29/02/2024", "29 de febrero (a√±o bisiesto)"),
        ("01/01/2000", "A√±o 2000"),
        ("31/01/2024", "√öltimo d√≠a de enero"),
        ("30/04/2024", "√öltimo d√≠a de abril"),
    ]
    
    for fecha, descripcion in casos_validos:
        resultado = ValidadorFecha.validar_fecha_entrega(fecha)
        estado = "‚úÖ V√ÅLIDA" if resultado["valido"] else "‚ùå INV√ÅLIDA"
        print(f"{estado} {fecha:12} ({descripcion})")
        if resultado["valido"]:
            print(f"    Formateada: {resultado['valor_formateado']}")
        else:
            print(f"    Error: {resultado['error']}")

def test_fechas_invalidas():
    """Test de fechas inv√°lidas"""
    print("\nüö´ TESTING FECHAS INV√ÅLIDAS")
    print("=" * 50)
    
    casos_invalidos = [
        ("1/1/2024", "D√≠a y mes sin cero inicial"),
        ("01/1/2024", "Mes sin cero inicial"),
        ("1/01/2024", "D√≠a sin cero inicial"),
        ("01/01/24", "A√±o de 2 d√≠gitos"),
        ("01-01-2024", "Separador gui√≥n"),
        ("2024-01-01", "Formato YYYY-MM-DD"),
        ("32/01/2024", "D√≠a inv√°lido"),
        ("01/13/2024", "Mes inv√°lido"),
        ("29/02/2023", "29 de febrero en a√±o no bisiesto"),
        ("31/04/2024", "31 de abril"),
        ("", "Vac√≠a"),
        ("abc/01/2024", "Contiene letras"),
        ("01/01/1899", "A√±o muy antiguo"),
        ("01/01/2101", "A√±o muy futuro"),
    ]
    
    for fecha, descripcion in casos_invalidos:
        resultado = ValidadorFecha.validar_fecha_entrega(fecha)
        estado = "‚úÖ V√ÅLIDA" if resultado["valido"] else "‚ùå INV√ÅLIDA"
        print(f"{estado} {fecha:15} ({descripcion})")
        if resultado["valido"]:
            print(f"    ‚ö†Ô∏è  Deber√≠a ser inv√°lida pero fue aceptada!")
        else:
            print(f"    Error: {resultado['error']}")

def test_emails_validos():
    """Test de emails v√°lidos"""
    print("\nüìß TESTING EMAILS V√ÅLIDOS")
    print("=" * 50)
    
    casos_validos = [
        ("usuario@ejemplo.com", "Email b√°sico"),
        ("USUARIO@EJEMPLO.COM", "Email en may√∫sculas"),
        (" Usuario@Ejemplo.com ", "Email con espacios"),
        ("usuario.nombre@dominio.com", "Email con punto"),
        ("usuario+tag@ejemplo.com", "Email con +"),
        ("usuario123@ejemplo.com", "Email con n√∫meros"),
        ("usuario_apellido@ejemplo.com", "Email con gui√≥n bajo"),
    ]
    
    for email, descripcion in casos_validos:
        resultado = ValidadorEmail.validar_email(email)
        estado = "‚úÖ V√ÅLIDO" if resultado["valido"] else "‚ùå INV√ÅLIDO"
        print(f"{estado} {email:25} ({descripcion})")
        if resultado["valido"]:
            print(f"    Normalizado: {resultado['valor_formateado']}")
            if resultado.get("cambios_aplicados"):
                print(f"    Cambios: {', '.join(resultado['cambios_aplicados'])}")
        else:
            print(f"    Error: {resultado['error']}")

def test_emails_invalidos():
    """Test de emails inv√°lidos"""
    print("\nüö´ TESTING EMAILS INV√ÅLIDOS")
    print("=" * 50)
    
    casos_invalidos = [
        ("", "Vac√≠o"),
        ("usuario", "Sin @ ni dominio"),
        ("@ejemplo.com", "Sin usuario"),
        ("usuario@", "Sin dominio"),
        ("usuario@ejemplo", "Sin extensi√≥n"),
        ("usuario@.com", "Dominio vac√≠o"),
        ("@.com", "Usuario y dominio vac√≠os"),
        ("usuario@ejemplo..com", "Doble punto"),
        ("usuario@ejemplo.com.", "Punto al final"),
        ("usuario@tempmail.org", "Dominio bloqueado"),
        ("usuario@10minutemail.com", "Dominio bloqueado"),
    ]
    
    for email, descripcion in casos_invalidos:
        resultado = ValidadorEmail.validar_email(email)
        estado = "‚úÖ V√ÅLIDO" if resultado["valido"] else "‚ùå INV√ÅLIDO"
        print(f"{estado} {email:25} ({descripcion})")
        if resultado["valido"]:
            print(f"    ‚ö†Ô∏è  Deber√≠a ser inv√°lido pero fue aceptado!")
        else:
            print(f"    Error: {resultado['error']}")

def test_normalizacion_email():
    """Test de normalizaci√≥n de emails"""
    print("\nüîÑ TESTING NORMALIZACI√ìN DE EMAILS")
    print("=" * 50)
    
    casos_normalizacion = [
        ("USUARIO@EJEMPLO.COM", "Todo en may√∫sculas"),
        (" Usuario@Ejemplo.com ", "Con espacios"),
        ("Usuario@Ejemplo.Com", "Mezcla may√∫sculas/min√∫sculas"),
        ("  USUARIO@EJEMPLO.COM  ", "Espacios y may√∫sculas"),
    ]
    
    for email, descripcion in casos_normalizacion:
        resultado = ValidadorEmail.validar_email(email)
        if resultado["valido"]:
            print(f"‚úÖ {email:25} ‚Üí {resultado['valor_formateado']} ({descripcion})")
            if resultado.get("cambios_aplicados"):
                print(f"    Cambios: {', '.join(resultado['cambios_aplicados'])}")
            normalizacion = resultado.get("normalizacion", {})
            if normalizacion.get("convertido_minusculas"):
                print(f"    ‚úì Convertido a min√∫sculas")
            if normalizacion.get("espacios_removidos"):
                print(f"    ‚úì Espacios removidos")
        else:
            print(f"‚ùå {email:25} ({descripcion}) - Error: {resultado['error']}")

def test_requisitos_fecha():
    """Test de requisitos espec√≠ficos de fecha"""
    print("\nüìã TESTING REQUISITOS ESPEC√çFICOS DE FECHA")
    print("=" * 50)
    
    requisitos = [
        ("01/01/2024", "D√≠a 2 d√≠gitos", "‚úì"),
        ("1/01/2024", "D√≠a 2 d√≠gitos", "‚úó"),
        ("01/01/2024", "Mes 2 d√≠gitos", "‚úì"),
        ("01/1/2024", "Mes 2 d√≠gitos", "‚úó"),
        ("01/01/2024", "A√±o 4 d√≠gitos", "‚úì"),
        ("01/01/24", "A√±o 4 d√≠gitos", "‚úó"),
        ("01/01/2024", "Separador /", "‚úì"),
        ("01-01-2024", "Separador /", "‚úó"),
    ]
    
    for fecha, requisito, esperado in requisitos:
        resultado = ValidadorFecha.validar_fecha_entrega(fecha)
        estado = "‚úÖ" if resultado["valido"] else "‚ùå"
        resultado_esperado = "‚úÖ" if esperado == "‚úì" else "‚ùå"
        print(f"{estado} {fecha:12} - {requisito}: {estado} (esperado: {resultado_esperado})")

if __name__ == "__main__":
    print("üß™ TEST DE VALIDACI√ìN DE FECHAS Y EMAILS")
    print("Fechas: DD/MM/YYYY (d√≠a 2 d√≠gitos, mes 2 d√≠gitos, a√±o 4 d√≠gitos)")
    print("Email: Conversi√≥n autom√°tica a min√∫sculas (incluyendo @)")
    print("=" * 80)
    
    test_fechas_validas()
    test_fechas_invalidas()
    test_emails_validos()
    test_emails_invalidos()
    test_normalizacion_email()
    test_requisitos_fecha()
    
    print("\n" + "=" * 80)
    print("üèÅ TEST COMPLETADO")
