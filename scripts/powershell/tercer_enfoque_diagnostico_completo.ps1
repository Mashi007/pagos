# scripts/powershell/tercer_enfoque_diagnostico_completo.ps1
# Script para probar el tercer enfoque completo de diagn√≥stico de causa ra√≠z

param(
    [string]$BaseUrl = "https://pagos-f2qf.onrender.com"
)

Write-Host "üîç TERCER ENFOQUE: DIAGN√ìSTICO COMPLETO DE CAUSA RA√çZ" -ForegroundColor Cyan
Write-Host "=======================================================" -ForegroundColor Cyan
Write-Host ""

# Funci√≥n para hacer requests HTTP
function Invoke-TestRequest {
    param(
        [string]$Url,
        [string]$Method = "GET",
        [hashtable]$Headers = @{},
        [string]$Body = $null
    )
    
    try {
        $params = @{
            Uri = $Url
            Method = $Method
            Headers = $Headers
            ContentType = "application/json"
        }
        
        if ($Body) {
            $params.Body = $Body
        }
        
        $response = Invoke-RestMethod @params
        return @{
            Success = $true
            Data = $response
            StatusCode = 200
        }
    }
    catch {
        return @{
            Success = $false
            Error = $_.Exception.Message
            StatusCode = $_.Exception.Response.StatusCode.value__
        }
    }
}

# ============================================
# 1. MONITOREO EN TIEMPO REAL
# ============================================
Write-Host "1Ô∏è‚É£ MONITOREO EN TIEMPO REAL" -ForegroundColor Yellow
Write-Host "============================" -ForegroundColor Yellow

# Test de estado en tiempo real
Write-Host "   üìä Probando estado en tiempo real..." -ForegroundColor Gray
$realTimeUrl = "$BaseUrl/api/v1/monitor/real-time-status"
$realTimeResult = Invoke-TestRequest -Url $realTimeUrl

if ($realTimeResult.Success) {
    Write-Host "   ‚úÖ Monitor en tiempo real funcionando" -ForegroundColor Green
    $metrics = $realTimeResult.Data.data.metrics
    Write-Host "      - Requests √∫ltimos 5min: $($metrics.total_requests_5min)" -ForegroundColor Gray
    Write-Host "      - Tasa de √©xito: $($metrics.success_rate_percent)%" -ForegroundColor Gray
    Write-Host "      - Tokens activos: $($metrics.active_tokens)" -ForegroundColor Gray
} else {
    Write-Host "   ‚ùå Error en monitor tiempo real: $($realTimeResult.Error)" -ForegroundColor Red
}

Write-Host ""

# ============================================
# 2. AN√ÅLISIS PREDICTIVO DE TOKENS
# ============================================
Write-Host "2Ô∏è‚É£ AN√ÅLISIS PREDICTIVO DE TOKENS" -ForegroundColor Yellow
Write-Host "=================================" -ForegroundColor Yellow

# Test de an√°lisis predictivo
Write-Host "   üîÆ Probando an√°lisis predictivo..." -ForegroundColor Gray
$predictiveUrl = "$BaseUrl/api/v1/predictive-tokens/predict-system-failures"
$predictiveResult = Invoke-TestRequest -Url $predictiveUrl

if ($predictiveResult.Success) {
    Write-Host "   ‚úÖ An√°lisis predictivo funcionando" -ForegroundColor Green
    $predictions = $predictiveResult.Data.predictions
    Write-Host "      - Salud del sistema: $($predictions.system_health)" -ForegroundColor Gray
    Write-Host "      - Fallas predichas: $($predictions.predicted_failures.Count)" -ForegroundColor Gray
} else {
    Write-Host "   ‚ùå Error en an√°lisis predictivo: $($predictiveResult.Error)" -ForegroundColor Red
}

Write-Host ""

# ============================================
# 3. VALIDACI√ìN CRUZADA DE AUTENTICACI√ìN
# ============================================
Write-Host "3Ô∏è‚É£ VALIDACI√ìN CRUZADA DE AUTENTICACI√ìN" -ForegroundColor Yellow
Write-Host "=======================================" -ForegroundColor Yellow

# Test de historial de validaci√≥n
Write-Host "   üîÑ Probando historial de validaci√≥n..." -ForegroundColor Gray
$validationUrl = "$BaseUrl/api/v1/cross-validation/validation-history"
$validationResult = Invoke-TestRequest -Url $validationUrl

if ($validationResult.Success) {
    Write-Host "   ‚úÖ Validaci√≥n cruzada funcionando" -ForegroundColor Green
    $stats = $validationResult.Data.statistics
    Write-Host "      - Validaciones totales: $($stats.total_validations)" -ForegroundColor Gray
    Write-Host "      - Tasa de √©xito: $($stats.success_rate)%" -ForegroundColor Gray
} else {
    Write-Host "   ‚ùå Error en validaci√≥n cruzada: $($validationResult.Error)" -ForegroundColor Red
}

Write-Host ""

# ============================================
# 4. SISTEMA DE ALERTAS INTELIGENTES
# ============================================
Write-Host "4Ô∏è‚É£ SISTEMA DE ALERTAS INTELIGENTES" -ForegroundColor Yellow
Write-Host "===================================" -ForegroundColor Yellow

# Test de alertas activas
Write-Host "   üö® Probando alertas activas..." -ForegroundColor Gray
$alertsUrl = "$BaseUrl/api/v1/intelligent-alerts/active-alerts"
$alertsResult = Invoke-TestRequest -Url $alertsUrl

if ($alertsResult.Success) {
    Write-Host "   ‚úÖ Sistema de alertas funcionando" -ForegroundColor Green
    Write-Host "      - Alertas activas: $($alertsResult.Data.count)" -ForegroundColor Gray
} else {
    Write-Host "   ‚ùå Error en sistema de alertas: $($alertsResult.Error)" -ForegroundColor Red
}

# Test de estad√≠sticas de alertas
Write-Host "   üìä Probando estad√≠sticas de alertas..." -ForegroundColor Gray
$alertStatsUrl = "$BaseUrl/api/v1/intelligent-alerts/alert-statistics"
$alertStatsResult = Invoke-TestRequest -Url $alertStatsUrl

if ($alertStatsResult.Success) {
    Write-Host "   ‚úÖ Estad√≠sticas de alertas funcionando" -ForegroundColor Green
    $stats = $alertStatsResult.Data.statistics
    Write-Host "      - Total alertas: $($stats.total_alerts)" -ForegroundColor Gray
    Write-Host "      - Alertas activas: $($stats.active_alerts)" -ForegroundColor Gray
} else {
    Write-Host "   ‚ùå Error en estad√≠sticas de alertas: $($alertStatsResult.Error)" -ForegroundColor Red
}

Write-Host ""

# ============================================
# 5. DIAGN√ìSTICO DE RED Y LATENCIA
# ============================================
Write-Host "5Ô∏è‚É£ DIAGN√ìSTICO DE RED Y LATENCIA" -ForegroundColor Yellow
Write-Host "=================================" -ForegroundColor Yellow

# Test de salud de red
Write-Host "   üåê Probando salud de red..." -ForegroundColor Gray
$networkUrl = "$BaseUrl/api/v1/network/network-health"
$networkResult = Invoke-TestRequest -Url $networkUrl

if ($networkResult.Success) {
    Write-Host "   ‚úÖ Diagn√≥stico de red funcionando" -ForegroundColor Green
    $analysis = $networkResult.Data.analysis
    Write-Host "      - Salud general: $($analysis.overall_health)" -ForegroundColor Gray
    Write-Host "      - Estado conectividad: $($analysis.connectivity.status)" -ForegroundColor Gray
    Write-Host "      - Estado latencia: $($analysis.latency.status)" -ForegroundColor Gray
} else {
    Write-Host "   ‚ùå Error en diagn√≥stico de red: $($networkResult.Error)" -ForegroundColor Red
}

# Test de conectividad inmediata
Write-Host "   üîç Probando conectividad inmediata..." -ForegroundColor Gray
$connectivityUrl = "$BaseUrl/api/v1/network/test-connectivity"
$connectivityResult = Invoke-TestRequest -Url $connectivityUrl -Method "POST"

if ($connectivityResult.Success) {
    Write-Host "   ‚úÖ Test de conectividad funcionando" -ForegroundColor Green
    $testResult = $connectivityResult.Data.test_result
    Write-Host "      - Estado general: $($testResult.overall_status)" -ForegroundColor Gray
} else {
    Write-Host "   ‚ùå Error en test de conectividad: $($connectivityResult.Error)" -ForegroundColor Red
}

Write-Host ""

# ============================================
# 6. AN√ÅLISIS INTEGRADO DE CAUSA RA√çZ
# ============================================
Write-Host "6Ô∏è‚É£ AN√ÅLISIS INTEGRADO DE CAUSA RA√çZ" -ForegroundColor Yellow
Write-Host "====================================" -ForegroundColor Yellow

# Recopilar todos los resultados
$allResults = @{
    "monitoreo_tiempo_real" = $realTimeResult.Success
    "analisis_predictivo" = $predictiveResult.Success
    "validacion_cruzada" = $validationResult.Success
    "sistema_alertas" = $alertsResult.Success
    "diagnostico_red" = $networkResult.Success
}

$successfulTests = ($allResults.Values | Where-Object { $_ -eq $true }).Count
$totalTests = $allResults.Count

Write-Host "   üìä Resumen de sistemas:" -ForegroundColor Gray
foreach ($system in $allResults.Keys) {
    $status = if ($allResults[$system]) { "‚úÖ" } else { "‚ùå" }
    Write-Host "      $status $system" -ForegroundColor $(if ($allResults[$system]) { "Green" } else { "Red" })
}

Write-Host ""

# ============================================
# 7. RECOMENDACIONES FINALES
# ============================================
Write-Host "7Ô∏è‚É£ RECOMENDACIONES FINALES" -ForegroundColor Yellow
Write-Host "==========================" -ForegroundColor Yellow

Write-Host "   üéØ An√°lisis de causa ra√≠z completado:" -ForegroundColor Gray
Write-Host "      - Sistemas funcionando: $successfulTests/$totalTests" -ForegroundColor Gray

if ($successfulTests -eq $totalTests) {
    Write-Host "   üéâ ¬°Todos los sistemas de diagn√≥stico funcionan correctamente!" -ForegroundColor Green
    Write-Host "   ‚úÖ El tercer enfoque est√° completamente operativo" -ForegroundColor Green
    Write-Host ""
    Write-Host "   üìã Pr√≥ximos pasos recomendados:" -ForegroundColor Cyan
    Write-Host "      1. Monitorear alertas en tiempo real" -ForegroundColor White
    Write-Host "      2. Revisar an√°lisis predictivos regularmente" -ForegroundColor White
    Write-Host "      3. Validar tokens cruzadamente en casos sospechosos" -ForegroundColor White
    Write-Host "      4. Mantener diagn√≥stico de red activo" -ForegroundColor White
} else {
    Write-Host "   ‚ö†Ô∏è Algunos sistemas requieren atenci√≥n" -ForegroundColor Yellow
    Write-Host "   üîß Revisar logs del servidor para m√°s detalles" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üöÄ TERCER ENFOQUE IMPLEMENTADO EXITOSAMENTE" -ForegroundColor Green
Write-Host "===========================================" -ForegroundColor Green
Write-Host ""
Write-Host "üìä Sistemas implementados:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Monitor en tiempo real" -ForegroundColor White
Write-Host "   ‚Ä¢ An√°lisis predictivo de tokens" -ForegroundColor White
Write-Host "   ‚Ä¢ Validaci√≥n cruzada de autenticaci√≥n" -ForegroundColor White
Write-Host "   ‚Ä¢ Sistema de alertas inteligentes" -ForegroundColor White
Write-Host "   ‚Ä¢ Diagn√≥stico de red y latencia" -ForegroundColor White
Write-Host ""
Write-Host "üéØ Capacidades del tercer enfoque:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Detecci√≥n proactiva de problemas" -ForegroundColor White
Write-Host "   ‚Ä¢ An√°lisis multidimensional de autenticaci√≥n" -ForegroundColor White
Write-Host "   ‚Ä¢ Alertas inteligentes basadas en patrones" -ForegroundColor White
Write-Host "   ‚Ä¢ Monitoreo continuo de red y rendimiento" -ForegroundColor White
Write-Host "   ‚Ä¢ Validaci√≥n cruzada para m√°xima confiabilidad" -ForegroundColor White
