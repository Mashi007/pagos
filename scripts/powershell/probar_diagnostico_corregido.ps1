# scripts/powershell/probar_diagnostico_corregido.ps1
# Script para probar endpoints de diagn√≥stico despu√©s de las correcciones

param(
    [string]$BaseUrl = "https://pagos-f2qf.onrender.com"
)

Write-Host "üîç PROBANDO ENDPOINTS DE DIAGN√ìSTICO CORREGIDOS" -ForegroundColor Cyan
Write-Host "===============================================" -ForegroundColor Cyan
Write-Host ""

# Funci√≥n para hacer requests HTTP
function Invoke-TestRequest {
    param(
        [string]$Url,
        [string]$Method = "GET",
        [hashtable]$Headers = @{},
        [string]$Body = $null
    )
    
    try {
        $params = @{
            Uri = $Url
            Method = $Method
            Headers = $Headers
            ContentType = "application/json"
        }
        
        if ($Body) {
            $params.Body = $Body
        }
        
        $response = Invoke-RestMethod @params
        return @{
            Success = $true
            Data = $response
            StatusCode = 200
        }
    }
    catch {
        return @{
            Success = $false
            Error = $_.Exception.Message
            StatusCode = $_.Exception.Response.StatusCode.value__
        }
    }
}

# 1. Probar endpoint de diagn√≥stico de autenticaci√≥n
Write-Host "1Ô∏è‚É£ Probando diagn√≥stico de autenticaci√≥n..." -ForegroundColor Yellow
$authDebugUrl = "$BaseUrl/api/v1/auth-debug/auth-debug"
$authDebugResult = Invoke-TestRequest -Url $authDebugUrl

if ($authDebugResult.Success) {
    Write-Host "‚úÖ Diagn√≥stico de autenticaci√≥n funcionando" -ForegroundColor Green
    Write-Host "   - JWT Config: $($authDebugResult.Data.analysis.jwt_config)" -ForegroundColor Gray
    Write-Host "   - Users Status: $($authDebugResult.Data.analysis.users.status)" -ForegroundColor Gray
} else {
    Write-Host "‚ùå Error en diagn√≥stico de autenticaci√≥n: $($authDebugResult.Error)" -ForegroundColor Red
}

Write-Host ""

# 2. Probar endpoint de test de autenticaci√≥n
Write-Host "2Ô∏è‚É£ Probando test de autenticaci√≥n..." -ForegroundColor Yellow
$authTestUrl = "$BaseUrl/api/v1/auth-debug/auth-test"
$authTestResult = Invoke-TestRequest -Url $authTestUrl -Method "POST"

if ($authTestResult.Success) {
    Write-Host "‚úÖ Test de autenticaci√≥n funcionando" -ForegroundColor Green
    Write-Host "   - Overall Status: $($authTestResult.Data.overall_status)" -ForegroundColor Gray
    Write-Host "   - Login Test: $($authTestResult.Data.tests.login.status)" -ForegroundColor Gray
    Write-Host "   - Validation Test: $($authTestResult.Data.tests.validation.status)" -ForegroundColor Gray
} else {
    Write-Host "‚ùå Error en test de autenticaci√≥n: $($authTestResult.Error)" -ForegroundColor Red
}

Write-Host ""

# 3. Probar endpoint de verificaci√≥n de tokens
Write-Host "3Ô∏è‚É£ Probando verificaci√≥n de tokens..." -ForegroundColor Yellow
$tokenVerifyUrl = "$BaseUrl/api/v1/token/verify-token"
$tokenVerifyResult = Invoke-TestRequest -Url $tokenVerifyUrl -Method "POST" -Body '{"token": "test"}'

if ($tokenVerifyResult.Success) {
    Write-Host "‚úÖ Verificaci√≥n de tokens funcionando" -ForegroundColor Green
    Write-Host "   - Status: $($tokenVerifyResult.Data.status)" -ForegroundColor Gray
} else {
    Write-Host "‚ùå Error en verificaci√≥n de tokens: $($tokenVerifyResult.Error)" -ForegroundColor Red
}

Write-Host ""

# 4. Probar endpoint de health check
Write-Host "4Ô∏è‚É£ Probando health check..." -ForegroundColor Yellow
$healthUrl = "$BaseUrl/api/v1/monitor/health-check"
$healthResult = Invoke-TestRequest -Url $healthUrl

if ($healthResult.Success) {
    Write-Host "‚úÖ Health check funcionando" -ForegroundColor Green
    Write-Host "   - Status: $($healthResult.Data.status)" -ForegroundColor Gray
    Write-Host "   - Database: $($healthResult.Data.database.status)" -ForegroundColor Gray
} else {
    Write-Host "‚ùå Error en health check: $($healthResult.Error)" -ForegroundColor Red
}

Write-Host ""

# 5. Probar endpoint de dashboard de diagn√≥stico
Write-Host "5Ô∏è‚É£ Probando dashboard de diagn√≥stico..." -ForegroundColor Yellow
$dashboardUrl = "$BaseUrl/api/v1/monitor/dashboard"
$dashboardResult = Invoke-TestRequest -Url $dashboardUrl

if ($dashboardResult.Success) {
    Write-Host "‚úÖ Dashboard de diagn√≥stico funcionando" -ForegroundColor Green
    Write-Host "   - Status: $($dashboardResult.Data.status)" -ForegroundColor Gray
    Write-Host "   - Timestamp: $($dashboardResult.Data.timestamp)" -ForegroundColor Gray
} else {
    Write-Host "‚ùå Error en dashboard de diagn√≥stico: $($dashboardResult.Error)" -ForegroundColor Red
}

Write-Host ""

# Resumen final
Write-Host "üìä RESUMEN DE PRUEBAS" -ForegroundColor Cyan
Write-Host "===================" -ForegroundColor Cyan

$totalTests = 5
$successfulTests = 0

if ($authDebugResult.Success) { $successfulTests++ }
if ($authTestResult.Success) { $successfulTests++ }
if ($tokenVerifyResult.Success) { $successfulTests++ }
if ($healthResult.Success) { $successfulTests++ }
if ($dashboardResult.Success) { $successfulTests++ }

Write-Host "Tests exitosos: $successfulTests/$totalTests" -ForegroundColor $(if ($successfulTests -eq $totalTests) { "Green" } else { "Yellow" })

if ($successfulTests -eq $totalTests) {
    Write-Host "üéâ ¬°Todos los endpoints de diagn√≥stico funcionan correctamente!" -ForegroundColor Green
    Write-Host "‚úÖ Las correcciones aplicadas han resuelto los problemas" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è Algunos endpoints a√∫n tienen problemas" -ForegroundColor Yellow
    Write-Host "üîç Revisar logs del servidor para m√°s detalles" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üöÄ Pr√≥ximos pasos:" -ForegroundColor Cyan
Write-Host "1. Probar login en el frontend" -ForegroundColor White
Write-Host "2. Verificar que el auto-refresh funcione" -ForegroundColor White
Write-Host "3. Monitorear logs para confirmar que no hay m√°s errores 401" -ForegroundColor White
