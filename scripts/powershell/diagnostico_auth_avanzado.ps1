# üîç Script de Diagn√≥stico Avanzado de Autenticaci√≥n
# Sistema completo para encontrar causa ra√≠z de problemas 401

param(
    [string]$BackendUrl = "https://pagos-f2qf.onrender.com",
    [switch]$Verbose = $false
)

Write-Host "üîç DIAGN√ìSTICO AVANZADO DE AUTENTICACI√ìN" -ForegroundColor Cyan
Write-Host "=========================================" -ForegroundColor Cyan
Write-Host "Backend URL: $BackendUrl" -ForegroundColor Yellow
Write-Host ""

# Funci√≥n para hacer requests con manejo de errores
function Invoke-SafeRequest {
    param(
        [string]$Uri,
        [string]$Method = "GET",
        [hashtable]$Headers = @{},
        [string]$Body = $null
    )
    
    try {
        $params = @{
            Uri = $Uri
            Method = $Method
            Headers = $Headers
            TimeoutSec = 30
        }
        
        if ($Body) {
            $params.Body = $Body
            $params.ContentType = "application/json"
        }
        
        $response = Invoke-RestMethod @params
        return @{
            Success = $true
            Data = $response
            StatusCode = 200
        }
    }
    catch {
        return @{
            Success = $false
            Error = $_.Exception.Message
            StatusCode = $_.Exception.Response.StatusCode.value__
        }
    }
}

# 1. DIAGN√ìSTICO GENERAL DEL SISTEMA
Write-Host "1Ô∏è‚É£ DIAGN√ìSTICO GENERAL DEL SISTEMA" -ForegroundColor Green
Write-Host "-----------------------------------" -ForegroundColor Green

$diagnostico = Invoke-SafeRequest -Uri "$BackendUrl/api/v1/auth-debug/auth-debug"
if ($diagnostico.Success) {
    Write-Host "‚úÖ Diagn√≥stico general completado" -ForegroundColor Green
    $diagnostico.Data | ConvertTo-Json -Depth 3 | Write-Host
} else {
    Write-Host "‚ùå Error en diagn√≥stico general: $($diagnostico.Error)" -ForegroundColor Red
}
Write-Host ""

# 2. HEALTH CHECK DETALLADO
Write-Host "2Ô∏è‚É£ HEALTH CHECK DETALLADO" -ForegroundColor Green
Write-Host "-------------------------" -ForegroundColor Green

$healthCheck = Invoke-SafeRequest -Uri "$BackendUrl/api/v1/monitor/health-check"
if ($healthCheck.Success) {
    Write-Host "‚úÖ Health check completado" -ForegroundColor Green
    $healthCheck.Data | ConvertTo-Json -Depth 3 | Write-Host
} else {
    Write-Host "‚ùå Error en health check: $($healthCheck.Error)" -ForegroundColor Red
}
Write-Host ""

# 3. GENERAR TOKEN DE PRUEBA
Write-Host "3Ô∏è‚É£ GENERAR TOKEN DE PRUEBA" -ForegroundColor Green
Write-Host "---------------------------" -ForegroundColor Green

$tokenTest = Invoke-SafeRequest -Uri "$BackendUrl/api/v1/token/generate-test-token" -Method "POST"
if ($tokenTest.Success) {
    Write-Host "‚úÖ Token de prueba generado" -ForegroundColor Green
    $testToken = $tokenTest.Data.test_token
    Write-Host "Token: $($testToken.Substring(0, 50))..." -ForegroundColor Yellow
    
    # 4. VERIFICAR TOKEN GENERADO
    Write-Host ""
    Write-Host "4Ô∏è‚É£ VERIFICAR TOKEN GENERADO" -ForegroundColor Green
    Write-Host "----------------------------" -ForegroundColor Green
    
    $headers = @{
        "Authorization" = "Bearer $testToken"
    }
    
    $tokenVerify = Invoke-SafeRequest -Uri "$BackendUrl/api/v1/token/verify-token" -Method "POST" -Headers $headers
    if ($tokenVerify.Success) {
        Write-Host "‚úÖ Verificaci√≥n de token completada" -ForegroundColor Green
        $tokenVerify.Data | ConvertTo-Json -Depth 3 | Write-Host
    } else {
        Write-Host "‚ùå Error verificando token: $($tokenVerify.Error)" -ForegroundColor Red
    }
    
    # 5. PROBAR ENDPOINT PROTEGIDO CON TOKEN
    Write-Host ""
    Write-Host "5Ô∏è‚É£ PROBAR ENDPOINT PROTEGIDO" -ForegroundColor Green
    Write-Host "-----------------------------" -ForegroundColor Green
    
    $protectedTest = Invoke-SafeRequest -Uri "$BackendUrl/api/v1/auth/me" -Headers $headers
    if ($protectedTest.Success) {
        Write-Host "‚úÖ Endpoint protegido funcionando" -ForegroundColor Green
        $protectedTest.Data | ConvertTo-Json -Depth 2 | Write-Host
    } else {
        Write-Host "‚ùå Error en endpoint protegido: $($protectedTest.Error)" -ForegroundColor Red
        Write-Host "Status Code: $($protectedTest.StatusCode)" -ForegroundColor Red
    }
    
} else {
    Write-Host "‚ùå Error generando token de prueba: $($tokenTest.Error)" -ForegroundColor Red
}
Write-Host ""

# 6. DASHBOARD DE DIAGN√ìSTICO
Write-Host "6Ô∏è‚É£ DASHBOARD DE DIAGN√ìSTICO" -ForegroundColor Green
Write-Host "----------------------------" -ForegroundColor Green

$dashboard = Invoke-SafeRequest -Uri "$BackendUrl/api/v1/monitor/dashboard"
if ($dashboard.Success) {
    Write-Host "‚úÖ Dashboard de diagn√≥stico obtenido" -ForegroundColor Green
    $dashboard.Data | ConvertTo-Json -Depth 3 | Write-Host
} else {
    Write-Host "‚ùå Error obteniendo dashboard: $($dashboard.Error)" -ForegroundColor Red
}
Write-Host ""

# 7. LOGS DE AUDITOR√çA
Write-Host "7Ô∏è‚É£ LOGS DE AUDITOR√çA" -ForegroundColor Green
Write-Host "--------------------" -ForegroundColor Green

$logs = Invoke-SafeRequest -Uri "$BackendUrl/api/v1/monitor/logs?minutes=60&limit=20"
if ($logs.Success) {
    Write-Host "‚úÖ Logs de auditor√≠a obtenidos" -ForegroundColor Green
    $logs.Data | ConvertTo-Json -Depth 3 | Write-Host
} else {
    Write-Host "‚ùå Error obteniendo logs: $($logs.Error)" -ForegroundColor Red
}
Write-Host ""

# 8. TEST DE AUTENTICACI√ìN COMPLETO
Write-Host "8Ô∏è‚É£ TEST DE AUTENTICACI√ìN COMPLETO" -ForegroundColor Green
Write-Host "----------------------------------" -ForegroundColor Green

$authTest = Invoke-SafeRequest -Uri "$BackendUrl/api/v1/auth-debug/auth-test" -Method "POST"
if ($authTest.Success) {
    Write-Host "‚úÖ Test de autenticaci√≥n completado" -ForegroundColor Green
    $authTest.Data | ConvertTo-Json -Depth 3 | Write-Host
} else {
    Write-Host "‚ùå Error en test de autenticaci√≥n: $($authTest.Error)" -ForegroundColor Red
}
Write-Host ""

# RESUMEN FINAL
Write-Host "üìä RESUMEN DEL DIAGN√ìSTICO" -ForegroundColor Cyan
Write-Host "=========================" -ForegroundColor Cyan

$tests = @(
    @{Name="Diagn√≥stico General"; Result=$diagnostico.Success},
    @{Name="Health Check"; Result=$healthCheck.Success},
    @{Name="Token de Prueba"; Result=$tokenTest.Success},
    @{Name="Verificaci√≥n Token"; Result=$tokenVerify.Success},
    @{Name="Endpoint Protegido"; Result=$protectedTest.Success},
    @{Name="Dashboard"; Result=$dashboard.Success},
    @{Name="Logs Auditor√≠a"; Result=$logs.Success},
    @{Name="Test Autenticaci√≥n"; Result=$authTest.Success}
)

$passedTests = ($tests | Where-Object { $_.Result }).Count
$totalTests = $tests.Count

Write-Host "Tests Exitosos: $passedTests/$totalTests" -ForegroundColor $(if ($passedTests -eq $totalTests) { "Green" } else { "Yellow" })

foreach ($test in $tests) {
    $status = if ($test.Result) { "‚úÖ" } else { "‚ùå" }
    Write-Host "$status $($test.Name)" -ForegroundColor $(if ($test.Result) { "Green" } else { "Red" })
}

Write-Host ""
Write-Host "üéØ PR√ìXIMOS PASOS:" -ForegroundColor Cyan
Write-Host "1. Revisar los resultados de cada test" -ForegroundColor White
Write-Host "2. Si hay errores, revisar los logs detallados" -ForegroundColor White
Write-Host "3. Usar el dashboard para monitoreo continuo" -ForegroundColor White
Write-Host "4. Aplicar fixes autom√°ticos si est√°n disponibles" -ForegroundColor White

Write-Host ""
Write-Host "üîó ENDPOINTS DISPONIBLES:" -ForegroundColor Cyan
Write-Host "- Diagn√≥stico: $BackendUrl/api/v1/auth-debug/auth-debug" -ForegroundColor White
Write-Host "- Health Check: $BackendUrl/api/v1/monitor/health-check" -ForegroundColor White
Write-Host "- Dashboard: $BackendUrl/api/v1/monitor/dashboard" -ForegroundColor White
Write-Host "- Logs: $BackendUrl/api/v1/monitor/logs" -ForegroundColor White
Write-Host "- Verificar Token: $BackendUrl/api/v1/token/verify-token" -ForegroundColor White
