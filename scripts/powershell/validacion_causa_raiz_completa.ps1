# scripts/powershell/validacion_causa_raiz_completa.ps1
# Script para validar causa ra√≠z usando los 5 enfoques distintos

param(
    [string]$BaseUrl = "https://pagos-f2qf.onrender.com",
    [string]$TestToken = $null
)

Write-Host "üîç VALIDACI√ìN COMPLETA DE CAUSA RA√çZ - 5 ENFOQUES DISTINTOS" -ForegroundColor Cyan
Write-Host "=============================================================" -ForegroundColor Cyan
Write-Host ""

# Funci√≥n para hacer requests HTTP
function Invoke-TestRequest {
    param(
        [string]$Url,
        [string]$Method = "GET",
        [hashtable]$Headers = @{},
        [string]$Body = $null
    )
    
    try {
        $params = @{
            Uri = $Url
            Method = $Method
            Headers = $Headers
            ContentType = "application/json"
        }
        
        if ($Body) {
            $params.Body = $Body
        }
        
        $response = Invoke-RestMethod @params
        return @{
            Success = $true
            Data = $response
            StatusCode = 200
        }
    }
    catch {
        return @{
            Success = $false
            Error = $_.Exception.Message
            StatusCode = $_.Exception.Response.StatusCode.value__
        }
    }
}

# ============================================
# 1. ENFOQUE FORENSE: AN√ÅLISIS DE LOGS Y TRAZAS
# ============================================
Write-Host "1Ô∏è‚É£ ENFOQUE FORENSE: AN√ÅLISIS DE LOGS Y TRAZAS" -ForegroundColor Yellow
Write-Host "=============================================" -ForegroundColor Yellow

# Test de resumen forense
Write-Host "   üîç Probando an√°lisis forense..." -ForegroundColor Gray
$forensicUrl = "$BaseUrl/api/v1/forensic/forensic-summary"
$forensicResult = Invoke-TestRequest -Url $forensicUrl

if ($forensicResult.Success) {
    Write-Host "   ‚úÖ Sistema forense funcionando" -ForegroundColor Green
    $summary = $forensicResult.Data.summary
    Write-Host "      - Eventos √∫ltimas 24h: $($summary.summary.total_events_24h)" -ForegroundColor Gray
    Write-Host "      - Fallos √∫ltimas 24h: $($summary.summary.total_failures_24h)" -ForegroundColor Gray
    Write-Host "      - Sesiones activas: $($summary.summary.active_trace_sessions)" -ForegroundColor Gray
} else {
    Write-Host "   ‚ùå Error en an√°lisis forense: $($forensicResult.Error)" -ForegroundColor Red
}

Write-Host ""

# ============================================
# 2. ENFOQUE EXPERIMENTAL: TESTS CONTROLADOS
# ============================================
Write-Host "2Ô∏è‚É£ ENFOQUE EXPERIMENTAL: TESTS CONTROLADOS" -ForegroundColor Yellow
Write-Host "===========================================" -ForegroundColor Yellow

# Test de resumen experimental
Write-Host "   üß™ Probando sistema experimental..." -ForegroundColor Gray
$experimentalUrl = "$BaseUrl/api/v1/experimental/experimental-summary"
$experimentalResult = Invoke-TestRequest -Url $experimentalUrl

if ($experimentalResult.Success) {
    Write-Host "   ‚úÖ Sistema experimental funcionando" -ForegroundColor Green
    $summary = $experimentalResult.Data.summary
    Write-Host "      - Escenarios totales: $($summary.summary.total_scenarios)" -ForegroundColor Gray
    Write-Host "      - Escenarios completados: $($summary.summary.completed_scenarios)" -ForegroundColor Gray
    Write-Host "      - Tests totales: $($summary.summary.total_tests)" -ForegroundColor Gray
    Write-Host "      - Tasa de √©xito: $($summary.summary.overall_success_rate)%" -ForegroundColor Gray
} else {
    Write-Host "   ‚ùå Error en sistema experimental: $($experimentalResult.Error)" -ForegroundColor Red
}

Write-Host ""

# ============================================
# 3. ENFOQUE COMPARATIVO: AN√ÅLISIS DIFERENCIAL
# ============================================
Write-Host "3Ô∏è‚É£ ENFOQUE COMPARATIVO: AN√ÅLISIS DIFERENCIAL" -ForegroundColor Yellow
Write-Host "=============================================" -ForegroundColor Yellow

# Test de resumen comparativo
Write-Host "   üìä Probando an√°lisis comparativo..." -ForegroundColor Gray
$comparativeUrl = "$BaseUrl/api/v1/comparative/comparative-summary"
$comparativeResult = Invoke-TestRequest -Url $comparativeUrl

if ($comparativeResult.Success) {
    Write-Host "   ‚úÖ Sistema comparativo funcionando" -ForegroundColor Green
    $summary = $comparativeResult.Data.summary
    Write-Host "      - Casos exitosos: $($summary.summary.successful_cases_count)" -ForegroundColor Gray
    Write-Host "      - Casos fallidos: $($summary.summary.failed_cases_count)" -ForegroundColor Gray
    Write-Host "      - An√°lisis realizados: $($summary.summary.total_analyses_performed)" -ForegroundColor Gray
} else {
    Write-Host "   ‚ùå Error en an√°lisis comparativo: $($comparativeResult.Error)" -ForegroundColor Red
}

Write-Host ""

# ============================================
# 4. ENFOQUE TEMPORAL: AN√ÅLISIS DE TIMING
# ============================================
Write-Host "4Ô∏è‚É£ ENFOQUE TEMPORAL: AN√ÅLISIS DE TIMING" -ForegroundColor Yellow
Write-Host "=======================================" -ForegroundColor Yellow

# Test de resumen temporal
Write-Host "   ‚è∞ Probando an√°lisis temporal..." -ForegroundColor Gray
$temporalUrl = "$BaseUrl/api/v1/temporal/temporal-summary"
$temporalResult = Invoke-TestRequest -Url $temporalUrl

if ($temporalResult.Success) {
    Write-Host "   ‚úÖ Sistema temporal funcionando" -ForegroundColor Green
    $summary = $temporalResult.Data.summary
    Write-Host "      - Eventos √∫ltimas 24h: $($summary.summary.total_events_24h)" -ForegroundColor Gray
    Write-Host "      - Duraci√≥n promedio: $($summary.summary.avg_event_duration_ms)ms" -ForegroundColor Gray
    Write-Host "      - Estado sincronizaci√≥n: $($summary.summary.clock_sync_status)" -ForegroundColor Gray
    Write-Host "      - Problemas de sync: $($summary.summary.sync_issues_count)" -ForegroundColor Gray
} else {
    Write-Host "   ‚ùå Error en an√°lisis temporal: $($temporalResult.Error)" -ForegroundColor Red
}

# Test de sincronizaci√≥n de reloj
Write-Host "   üïê Probando sincronizaci√≥n de reloj..." -ForegroundColor Gray
$clockSyncUrl = "$BaseUrl/api/v1/temporal/clock-synchronization"
$clockSyncResult = Invoke-TestRequest -Url $clockSyncUrl

if ($clockSyncResult.Success) {
    Write-Host "   ‚úÖ Sincronizaci√≥n de reloj funcionando" -ForegroundColor Green
    $analysis = $clockSyncResult.Data.analysis
    Write-Host "      - Estado: $($analysis.clock_sync_status)" -ForegroundColor Gray
    Write-Host "      - Diferencias promedio: $($analysis.avg_time_diff)s" -ForegroundColor Gray
} else {
    Write-Host "   ‚ùå Error en sincronizaci√≥n de reloj: $($clockSyncResult.Error)" -ForegroundColor Red
}

Write-Host ""

# ============================================
# 5. ENFOQUE ARQUITECTURAL: AN√ÅLISIS DE COMPONENTES
# ============================================
Write-Host "5Ô∏è‚É£ ENFOQUE ARQUITECTURAL: AN√ÅLISIS DE COMPONENTES" -ForegroundColor Yellow
Write-Host "=================================================" -ForegroundColor Yellow

# Test de resumen arquitectural
Write-Host "   üèóÔ∏è Probando an√°lisis arquitectural..." -ForegroundColor Gray
$architecturalUrl = "$BaseUrl/api/v1/architectural/architectural-summary"
$architecturalResult = Invoke-TestRequest -Url $architecturalUrl

if ($architecturalResult.Success) {
    Write-Host "   ‚úÖ Sistema arquitectural funcionando" -ForegroundColor Green
    $summary = $architecturalResult.Data.summary
    Write-Host "      - Componentes totales: $($summary.summary.total_components)" -ForegroundColor Gray
    Write-Host "      - Componentes saludables: $($summary.summary.healthy_components)" -ForegroundColor Gray
    Write-Host "      - Componentes degradados: $($summary.summary.degraded_components)" -ForegroundColor Gray
    Write-Host "      - Componentes pobres: $($summary.summary.poor_components)" -ForegroundColor Gray
    Write-Host "      - Salud general: $($summary.summary.overall_health_percentage)%" -ForegroundColor Gray
} else {
    Write-Host "   ‚ùå Error en an√°lisis arquitectural: $($architecturalResult.Error)" -ForegroundColor Red
}

# Test de salud de componentes espec√≠ficos
Write-Host "   üîç Probando salud de componentes espec√≠ficos..." -ForegroundColor Gray
$components = @("jwt_handler", "database_layer", "authentication_middleware", "user_model", "api_endpoints")

foreach ($component in $components) {
    $componentUrl = "$BaseUrl/api/v1/architectural/component-health/$component"
    $componentResult = Invoke-TestRequest -Url $componentUrl
    
    if ($componentResult.Success) {
        $health = $componentResult.Data.component_health
        $status = $health.status
        $score = [math]::Round($health.overall_health_score * 100, 1)
        
        $color = switch ($status) {
            "excellent" { "Green" }
            "good" { "Green" }
            "degraded" { "Yellow" }
            "poor" { "Red" }
            default { "Gray" }
        }
        
        Write-Host "      ‚úÖ $component`: $status ($score%)" -ForegroundColor $color
    } else {
        Write-Host "      ‚ùå $component`: Error - $($componentResult.Error)" -ForegroundColor Red
    }
}

Write-Host ""

# ============================================
# AN√ÅLISIS INTEGRADO DE CAUSA RA√çZ
# ============================================
Write-Host "üîç AN√ÅLISIS INTEGRADO DE CAUSA RA√çZ" -ForegroundColor Yellow
Write-Host "====================================" -ForegroundColor Yellow

# Recopilar todos los resultados
$allResults = @{
    "forensic_analysis" = $forensicResult.Success
    "experimental_tests" = $experimentalResult.Success
    "comparative_analysis" = $comparativeResult.Success
    "temporal_analysis" = $temporalResult.Success
    "architectural_analysis" = $architecturalResult.Success
}

$successfulApproaches = ($allResults.Values | Where-Object { $_ -eq $true }).Count
$totalApproaches = $allResults.Count

Write-Host "   üìä Resumen de enfoques:" -ForegroundColor Gray
foreach ($approach in $allResults.Keys) {
    $status = if ($allResults[$approach]) { "‚úÖ" } else { "‚ùå" }
    Write-Host "      $status $approach" -ForegroundColor $(if ($allResults[$approach]) { "Green" } else { "Red" })
}

Write-Host ""

# ============================================
# EVIDENCIA DE CAUSA RA√çZ
# ============================================
Write-Host "üéØ EVIDENCIA DE CAUSA RA√çZ" -ForegroundColor Yellow
Write-Host "==========================" -ForegroundColor Yellow

Write-Host "   üîç An√°lisis de evidencia:" -ForegroundColor Gray

# Evidencia forense
if ($forensicResult.Success) {
    $forensicData = $forensicResult.Data.summary
    if ($forensicData.summary.total_failures_24h -gt 0) {
        Write-Host "      üî¥ EVIDENCIA FORENSE: $($forensicData.summary.total_failures_24h) fallos en 24h" -ForegroundColor Red
        Write-Host "         Patrones de fallo m√°s comunes:" -ForegroundColor Gray
        foreach ($pattern in $forensicData.summary.failure_pattern_distribution.PSObject.Properties) {
            Write-Host "         - $($pattern.Name): $($pattern.Value)" -ForegroundColor Gray
        }
    } else {
        Write-Host "      ‚úÖ EVIDENCIA FORENSE: No hay fallos recientes" -ForegroundColor Green
    }
}

# Evidencia temporal
if ($temporalResult.Success) {
    $temporalData = $temporalResult.Data.summary
    if ($temporalData.summary.sync_issues_count -gt 0) {
        Write-Host "      üî¥ EVIDENCIA TEMPORAL: $($temporalData.summary.sync_issues_count) problemas de sincronizaci√≥n" -ForegroundColor Red
    } else {
        Write-Host "      ‚úÖ EVIDENCIA TEMPORAL: Sincronizaci√≥n correcta" -ForegroundColor Green
    }
}

# Evidencia arquitectural
if ($architecturalResult.Success) {
    $architecturalData = $architecturalResult.Data.summary
    if ($architecturalData.summary.poor_components -gt 0) {
        Write-Host "      üî¥ EVIDENCIA ARQUITECTURAL: $($architecturalData.summary.poor_components) componentes en estado pobre" -ForegroundColor Red
    } elseif ($architecturalData.summary.degraded_components -gt 0) {
        Write-Host "      üü° EVIDENCIA ARQUITECTURAL: $($architecturalData.summary.degraded_components) componentes degradados" -ForegroundColor Yellow
    } else {
        Write-Host "      ‚úÖ EVIDENCIA ARQUITECTURAL: Todos los componentes saludables" -ForegroundColor Green
    }
}

Write-Host ""

# ============================================
# RECOMENDACIONES FINALES
# ============================================
Write-Host "üìã RECOMENDACIONES FINALES" -ForegroundColor Yellow
Write-Host "==========================" -ForegroundColor Yellow

Write-Host "   üéØ Estado de validaci√≥n de causa ra√≠z:" -ForegroundColor Gray
Write-Host "      - Enfoques funcionando: $successfulApproaches/$totalApproaches" -ForegroundColor Gray

if ($successfulApproaches -eq $totalApproaches) {
    Write-Host "   üéâ ¬°TODOS LOS ENFOQUES FUNCIONAN CORRECTAMENTE!" -ForegroundColor Green
    Write-Host "   ‚úÖ Sistema de validaci√≥n de causa ra√≠z completamente operativo" -ForegroundColor Green
    Write-Host ""
    Write-Host "   üìã Pr√≥ximos pasos recomendados:" -ForegroundColor Cyan
    Write-Host "      1. Ejecutar an√°lisis forense en casos reales de fallo" -ForegroundColor White
    Write-Host "      2. Crear escenarios experimentales para reproducir problemas" -ForegroundColor White
    Write-Host "      3. Comparar casos exitosos vs fallidos sistem√°ticamente" -ForegroundColor White
    Write-Host "      4. Monitorear timing y sincronizaci√≥n continuamente" -ForegroundColor White
    Write-Host "      5. Verificar salud de componentes arquitecturales" -ForegroundColor White
    Write-Host ""
    Write-Host "   üîç Para identificar causa ra√≠z espec√≠fica:" -ForegroundColor Cyan
    Write-Host "      ‚Ä¢ Usar an√°lisis forense cuando ocurra un fallo 401" -ForegroundColor White
    Write-Host "      ‚Ä¢ Crear tests experimentales con tokens espec√≠ficos" -ForegroundColor White
    Write-Host "      ‚Ä¢ Comparar logs de casos exitosos vs fallidos" -ForegroundColor White
    Write-Host "      ‚Ä¢ Verificar sincronizaci√≥n de reloj en el momento del fallo" -ForegroundColor White
    Write-Host "      ‚Ä¢ Analizar salud de componentes JWT y autenticaci√≥n" -ForegroundColor White
} else {
    Write-Host "   ‚ö†Ô∏è Algunos enfoques requieren atenci√≥n" -ForegroundColor Yellow
    Write-Host "   üîß Revisar logs del servidor para m√°s detalles" -ForegroundColor Yellow
    Write-Host "   üìä Solo $successfulApproaches de $totalApproaches enfoques est√°n operativos" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üöÄ VALIDACI√ìN DE CAUSA RA√çZ COMPLETADA" -ForegroundColor Green
Write-Host "======================================" -ForegroundColor Green
Write-Host ""
Write-Host "üìä Sistemas de validaci√≥n implementados:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ An√°lisis forense de logs y trazas" -ForegroundColor White
Write-Host "   ‚Ä¢ Tests experimentales controlados" -ForegroundColor White
Write-Host "   ‚Ä¢ An√°lisis comparativo diferencial" -ForegroundColor White
Write-Host "   ‚Ä¢ An√°lisis temporal de timing" -ForegroundColor White
Write-Host "   ‚Ä¢ An√°lisis arquitectural de componentes" -ForegroundColor White
Write-Host ""
Write-Host "üéØ Capacidades de validaci√≥n:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Reconstrucci√≥n completa de secuencias de fallo" -ForegroundColor White
Write-Host "   ‚Ä¢ Reproducci√≥n controlada de problemas" -ForegroundColor White
Write-Host "   ‚Ä¢ Comparaci√≥n sistem√°tica de casos exitosos vs fallidos" -ForegroundColor White
Write-Host "   ‚Ä¢ Detecci√≥n de problemas de sincronizaci√≥n temporal" -ForegroundColor White
Write-Host "   ‚Ä¢ Identificaci√≥n de componentes espec√≠ficos que fallan" -ForegroundColor White
Write-Host ""
Write-Host "‚ö†Ô∏è IMPORTANTE: No implementar soluciones hasta tener evidencia clara de causa ra√≠z" -ForegroundColor Red
Write-Host "üîç Usar estos sistemas para recopilar evidencia antes de aplicar fixes" -ForegroundColor Red
