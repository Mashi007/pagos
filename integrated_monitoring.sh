#!/bin/bash
# integrated_monitoring.sh - Sistema integrado de monitoreo con colores y trazabilidad
# Cumple con normativas de gesti√≥n de problemas y facilita identificaci√≥n r√°pida

# Configuraci√≥n de colores ANSI est√°ndar
RED='\033[0;31m'      # Cr√≠tico
ORANGE='\033[0;33m'   # Alto
YELLOW='\033[1;33m'   # Medio
GREEN='\033[0;32m'    # Bajo
BLUE='\033[0;34m'     # Info
PURPLE='\033[0;35m'   # Advertencia
CYAN='\033[0;36m'     # √âxito
WHITE='\033[1;37m'    # Encabezados
NC='\033[0m'          # Sin color

# Configuraci√≥n del sistema
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
SESSION_ID=$(uuidgen | cut -d'-' -f1)
INTEGRATED_LOG="integrated_monitoring_$(date '+%Y%m%d_%H%M%S').log"

# Funci√≥n para cargar m√≥dulos de monitoreo
load_monitoring_modules() {
    echo -e "${BLUE}üì¶ Cargando m√≥dulos de monitoreo...${NC}"
    
    # Cargar m√≥dulos si existen
    if [ -f "color_monitor.sh" ]; then
        source color_monitor.sh
        echo -e "${GREEN}‚úÖ M√≥dulo de colores cargado${NC}"
    fi
    
    if [ -f "traceability_system.sh" ]; then
        source traceability_system.sh
        echo -e "${GREEN}‚úÖ M√≥dulo de trazabilidad cargado${NC}"
    fi
    
    if [ -f "visual_dashboard.sh" ]; then
        source visual_dashboard.sh
        echo -e "${GREEN}‚úÖ M√≥dulo de dashboard cargado${NC}"
    fi
    
    if [ -f "color_alerts.sh" ]; then
        source color_alerts.sh
        echo -e "${GREEN}‚úÖ M√≥dulo de alertas cargado${NC}"
    fi
    
    echo ""
}

# Funci√≥n para ejecutar verificaci√≥n de seguridad
run_security_check() {
    echo -e "${WHITE}üîç EJECUTANDO VERIFICACI√ìN DE SEGURIDAD${NC}"
    echo -e "${WHITE}=========================================${NC}"
    echo ""
    
    if [ -f "security_check.sh" ]; then
        # Ejecutar verificaci√≥n de seguridad
        bash security_check.sh > security_output.tmp 2>&1
        local exit_code=$?
        
        # Extraer contadores de problemas
        local critical=$(grep -o "Problemas Cr√≠ticos: [0-9]*" security_output.tmp | grep -o "[0-9]*" || echo "0")
        local high=$(grep -o "Problemas Altos: [0-9]*" security_output.tmp | grep -o "[0-9]*" || echo "0")
        local medium=$(grep -o "Problemas Medios: [0-9]*" security_output.tmp | grep -o "[0-9]*" || echo "0")
        local low=$(grep -o "Problemas Bajos: [0-9]*" security_output.tmp | grep -o "[0-9]*" || echo "0")
        
        echo -e "${CYAN}üìä Resultados de verificaci√≥n de seguridad:${NC}"
        echo -e "${RED}üö® Cr√≠ticos: $critical${NC}"
        echo -e "${ORANGE}üî¥ Altos: $high${NC}"
        echo -e "${YELLOW}üü° Medios: $medium${NC}"
        echo -e "${GREEN}üü¢ Bajos: $low${NC}"
        echo ""
        
        # Retornar contadores
        echo "$critical $high $medium $low"
    else
        echo -e "${RED}‚ùå Script de verificaci√≥n de seguridad no encontrado${NC}"
        echo "0 0 0 0"
    fi
}

# Funci√≥n para ejecutar verificaci√≥n de arquitectura
run_architecture_check() {
    echo -e "${WHITE}üèóÔ∏è EJECUTANDO VERIFICACI√ìN DE ARQUITECTURA${NC}"
    echo -e "${WHITE}===========================================${NC}"
    echo ""
    
    if [ -f "architecture_check.sh" ]; then
        # Ejecutar verificaci√≥n de arquitectura
        bash architecture_check.sh > architecture_output.tmp 2>&1
        local exit_code=$?
        
        # Extraer contadores de problemas
        local architecture=$(grep -o "Problemas de Arquitectura: [0-9]*" architecture_output.tmp | grep -o "[0-9]*" || echo "0")
        local design=$(grep -o "Problemas de Dise√±o: [0-9]*" architecture_output.tmp | grep -o "[0-9]*" || echo "0")
        local maintainability=$(grep -o "Problemas de Mantenibilidad: [0-9]*" architecture_output.tmp | grep -o "[0-9]*" || echo "0")
        local performance=$(grep -o "Problemas de Performance: [0-9]*" architecture_output.tmp | grep -o "[0-9]*" || echo "0")
        
        echo -e "${CYAN}üìä Resultados de verificaci√≥n de arquitectura:${NC}"
        echo -e "${RED}üèóÔ∏è Arquitectura: $architecture${NC}"
        echo -e "${ORANGE}üé® Dise√±o: $design${NC}"
        echo -e "${YELLOW}üîß Mantenibilidad: $maintainability${NC}"
        echo -e "${GREEN}‚ö° Performance: $performance${NC}"
        echo ""
        
        # Retornar contadores
        echo "$architecture $design $maintainability $performance"
    else
        echo -e "${RED}‚ùå Script de verificaci√≥n de arquitectura no encontrado${NC}"
        echo "0 0 0 0"
    fi
}

# Funci√≥n para generar reporte integrado
generate_integrated_report() {
    local security_critical=$1
    local security_high=$2
    local security_medium=$3
    local security_low=$4
    local arch_issues=$5
    local design_issues=$6
    local maintainability_issues=$7
    local performance_issues=$8
    
    local total_critical=$security_critical
    local total_high=$security_high
    local total_medium=$security_medium
    local total_low=$security_low
    
    echo -e "${WHITE}üìä REPORTE INTEGRADO DE MONITOREO${NC}"
    echo -e "${WHITE}=================================${NC}"
    echo ""
    
    # Resumen ejecutivo
    echo -e "${BLUE}üìã RESUMEN EJECUTIVO${NC}"
    echo -e "${BLUE}===================${NC}"
    echo -e "${BLUE}üìÖ Fecha: $TIMESTAMP${NC}"
    echo -e "${BLUE}üÜî Session ID: $SESSION_ID${NC}"
    echo -e "${BLUE}üìÅ Log: $INTEGRATED_LOG${NC}"
    echo ""
    
    # M√©tricas de seguridad
    echo -e "${CYAN}üîí M√âTRICAS DE SEGURIDAD${NC}"
    echo -e "${CYAN}=======================${NC}"
    echo -e "${RED}üö® Cr√≠ticos: $security_critical${NC}"
    echo -e "${ORANGE}üî¥ Altos: $security_high${NC}"
    echo -e "${YELLOW}üü° Medios: $security_medium${NC}"
    echo -e "${GREEN}üü¢ Bajos: $security_low${NC}"
    echo ""
    
    # M√©tricas de arquitectura
    echo -e "${CYAN}üèóÔ∏è M√âTRICAS DE ARQUITECTURA${NC}"
    echo -e "${CYAN}===========================${NC}"
    echo -e "${RED}üèóÔ∏è Arquitectura: $arch_issues${NC}"
    echo -e "${ORANGE}üé® Dise√±o: $design_issues${NC}"
    echo -e "${YELLOW}üîß Mantenibilidad: $maintainability_issues${NC}"
    echo -e "${GREEN}‚ö° Performance: $performance_issues${NC}"
    echo ""
    
    # Estado general del sistema
    echo -e "${CYAN}üéØ ESTADO GENERAL DEL SISTEMA${NC}"
    echo -e "${CYAN}=============================${NC}"
    
    if [ $total_critical -gt 0 ]; then
        echo -e "${RED}üö® ESTADO: CR√çTICO${NC}"
        echo -e "${RED}   El sistema NO es apto para producci√≥n${NC}"
        echo -e "${RED}   Acci√≥n requerida: INTERVENCI√ìN INMEDIATA${NC}"
    elif [ $total_high -gt 0 ]; then
        echo -e "${ORANGE}üî¥ ESTADO: ALTO RIESGO${NC}"
        echo -e "${ORANGE}   El sistema requiere atenci√≥n inmediata${NC}"
        echo -e "${ORANGE}   Acci√≥n requerida: INTERVENCI√ìN EN 24H${NC}"
    elif [ $total_medium -gt 0 ]; then
        echo -e "${YELLOW}üü° ESTADO: RIESGO MEDIO${NC}"
        echo -e "${YELLOW}   El sistema es funcional pero requiere mejoras${NC}"
        echo -e "${YELLOW}   Acci√≥n requerida: PLANIFICAR CORRECCI√ìN${NC}"
    elif [ $total_low -gt 0 ]; then
        echo -e "${GREEN}üü¢ ESTADO: RIESGO BAJO${NC}"
        echo -e "${GREEN}   El sistema es seguro para producci√≥n${NC}"
        echo -e "${GREEN}   Acci√≥n requerida: MEJORAS OPCIONALES${NC}"
    else
        echo -e "${GREEN}‚úÖ ESTADO: √ìPTIMO${NC}"
        echo -e "${GREEN}   El sistema cumple todas las normativas${NC}"
        echo -e "${GREEN}   No se requiere acci√≥n${NC}"
    fi
    echo ""
    
    # Generar alertas por colores
    if command -v generate_color_alerts >/dev/null 2>&1; then
        generate_color_alerts "$total_critical" "$total_high" "$total_medium" "$total_low"
    fi
    
    # Generar dashboard visual
    if command -v generate_visual_dashboard >/dev/null 2>&1; then
        generate_visual_dashboard "$total_critical" "$total_high" "$total_medium" "$total_low"
    fi
    
    # Generar reporte de trazabilidad
    if command -v generate_traceability_report >/dev/null 2>&1; then
        generate_traceability_report
    fi
}

# Funci√≥n principal de monitoreo integrado
main_integrated_monitoring() {
    echo -e "${WHITE}üéØ SISTEMA INTEGRADO DE MONITOREO${NC}"
    echo -e "${WHITE}===================================${NC}"
    echo -e "${WHITE}Con colores, trazabilidad y normativas de gesti√≥n${NC}"
    echo ""
    
    # Cargar m√≥dulos
    load_monitoring_modules
    
    # Ejecutar verificaciones
    echo -e "${BLUE}üîç Iniciando verificaciones...${NC}"
    echo ""
    
    # Verificaci√≥n de seguridad
    local security_results=$(run_security_check)
    local security_critical=$(echo $security_results | cut -d' ' -f1)
    local security_high=$(echo $security_results | cut -d' ' -f2)
    local security_medium=$(echo $security_results | cut -d' ' -f3)
    local security_low=$(echo $security_results | cut -d' ' -f4)
    
    # Verificaci√≥n de arquitectura
    local architecture_results=$(run_architecture_check)
    local arch_issues=$(echo $architecture_results | cut -d' ' -f1)
    local design_issues=$(echo $architecture_results | cut -d' ' -f2)
    local maintainability_issues=$(echo $architecture_results | cut -d' ' -f3)
    local performance_issues=$(echo $architecture_results | cut -d' ' -f4)
    
    # Generar reporte integrado
    generate_integrated_report "$security_critical" "$security_high" "$security_medium" "$security_low" "$arch_issues" "$design_issues" "$maintainability_issues" "$performance_issues"
    
    # Determinar c√≥digo de salida
    local total_critical=$security_critical
    if [ $total_critical -gt 0 ]; then
        echo -e "${RED}üö® C√ìDIGO DE SALIDA: 1 (CR√çTICO)${NC}"
        exit 1
    elif [ $security_high -gt 0 ]; then
        echo -e "${ORANGE}üî¥ C√ìDIGO DE SALIDA: 2 (ALTO RIESGO)${NC}"
        exit 2
    elif [ $security_medium -gt 0 ]; then
        echo -e "${YELLOW}üü° C√ìDIGO DE SALIDA: 3 (RIESGO MEDIO)${NC}"
        exit 3
    elif [ $security_low -gt 0 ]; then
        echo -e "${GREEN}üü¢ C√ìDIGO DE SALIDA: 4 (RIESGO BAJO)${NC}"
        exit 4
    else
        echo -e "${GREEN}‚úÖ C√ìDIGO DE SALIDA: 0 (√ìPTIMO)${NC}"
        exit 0
    fi
}

# Funci√≥n de ayuda
show_help() {
    echo -e "${WHITE}üéØ SISTEMA INTEGRADO DE MONITOREO${NC}"
    echo -e "${WHITE}===================================${NC}"
    echo ""
    echo -e "${BLUE}Uso:${NC}"
    echo -e "${BLUE}  ./integrated_monitoring.sh [opciones]${NC}"
    echo ""
    echo -e "${GREEN}Opciones:${NC}"
    echo -e "${GREEN}  --help, -h          Mostrar esta ayuda${NC}"
    echo -e "${GREEN}  --security-only     Solo verificaci√≥n de seguridad${NC}"
    echo -e "${GREEN}  --architecture-only Solo verificaci√≥n de arquitectura${NC}"
    echo -e "${GREEN}  --dashboard-only    Solo generar dashboard${NC}"
    echo -e "${GREEN}  --alerts-only       Solo generar alertas${NC}"
    echo ""
    echo -e "${YELLOW}Caracter√≠sticas:${NC}"
    echo -e "${YELLOW}  ‚úÖ Monitoreo por colores${NC}"
    echo -e "${YELLOW}  ‚úÖ Trazabilidad completa${NC}"
    echo -e "${YELLOW}  ‚úÖ Dashboard visual${NC}"
    echo -e "${YELLOW}  ‚úÖ Alertas autom√°ticas${NC}"
    echo -e "${YELLOW}  ‚úÖ Cumple normativas ITIL${NC}"
    echo -e "${YELLOW}  ‚úÖ Cumple normativas ISO 20000${NC}"
    echo ""
    echo -e "${CYAN}Ejemplos:${NC}"
    echo -e "${CYAN}  ./integrated_monitoring.sh${NC}"
    echo -e "${CYAN}  ./integrated_monitoring.sh --security-only${NC}"
    echo -e "${CYAN}  ./integrated_monitoring.sh --dashboard-only${NC}"
    echo ""
}

# Procesar argumentos de l√≠nea de comandos
case "${1:-}" in
    "--help"|"-h")
        show_help
        exit 0
        ;;
    "--security-only")
        echo -e "${WHITE}üîç MODO: Solo verificaci√≥n de seguridad${NC}"
        load_monitoring_modules
        run_security_check
        exit $?
        ;;
    "--architecture-only")
        echo -e "${WHITE}üèóÔ∏è MODO: Solo verificaci√≥n de arquitectura${NC}"
        load_monitoring_modules
        run_architecture_check
        exit $?
        ;;
    "--dashboard-only")
        echo -e "${WHITE}üìä MODO: Solo generaci√≥n de dashboard${NC}"
        load_monitoring_modules
        if command -v generate_visual_dashboard >/dev/null 2>&1; then
            generate_visual_dashboard 0 0 0 0
        else
            echo -e "${RED}‚ùå M√≥dulo de dashboard no disponible${NC}"
            exit 1
        fi
        exit 0
        ;;
    "--alerts-only")
        echo -e "${WHITE}üö® MODO: Solo generaci√≥n de alertas${NC}"
        load_monitoring_modules
        if command -v generate_color_alerts >/dev/null 2>&1; then
            generate_color_alerts 0 0 0 0
        else
            echo -e "${RED}‚ùå M√≥dulo de alertas no disponible${NC}"
            exit 1
        fi
        exit 0
        ;;
    "")
        # Modo por defecto: monitoreo completo
        main_integrated_monitoring
        ;;
    *)
        echo -e "${RED}‚ùå Opci√≥n desconocida: $1${NC}"
        echo -e "${BLUE}Usa --help para ver las opciones disponibles${NC}"
        exit 1
        ;;
esac
