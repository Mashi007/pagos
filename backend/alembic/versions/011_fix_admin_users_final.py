# backend/alembic/versions/011_fix_admin_users_final.py
"""fix admin users final

Revision ID: 011_fix_admin_users_final
Revises: 010_fix_roles_final
Create Date: 2025-01-18 18:30:00.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '011_fix_admin_users_final'
down_revision: Union[str, None] = '010_fix_roles_final'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # SOLUCI√ìN DEFINITIVA: Marcar usuarios espec√≠ficos como administradores
    connection = op.get_bind()
    
    # Lista de usuarios que DEBEN ser administradores
    admin_emails = [
        'itmaster@rapicreditca.com',
        'admin@rapicredit.com',
        'admin@sistema.com',
        'daniel@rapicredit.com'
    ]
    
    # Marcar usuarios espec√≠ficos como administradores
    for email in admin_emails:
        result = connection.execute(sa.text(f"""
            UPDATE usuarios 
            SET is_admin = TRUE, updated_at = NOW()
            WHERE email = '{email}' AND is_active = TRUE
        """))
        
        if result.rowcount > 0:
            print(f"‚úÖ Usuario {email} marcado como administrador")
        else:
            print(f"‚ö†Ô∏è Usuario {email} no encontrado o inactivo")
    
    # Verificar que al menos un usuario sea administrador
    admin_count = connection.execute(sa.text("SELECT COUNT(*) FROM usuarios WHERE is_admin = TRUE")).scalar()
    
    if admin_count == 0:
        print("üö® CR√çTICO: No hay administradores en el sistema")
        print("üîß Creando usuario administrador por defecto...")
        
        # Crear usuario administrador por defecto
        connection.execute(sa.text("""
            INSERT INTO usuarios (
                email, nombre, apellido, hashed_password, 
                is_admin, is_active, created_at
            ) VALUES (
                'admin@rapicredit.com',
                'Administrador',
                'Sistema',
                '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4VqZ8K5K2C', -- admin123
                TRUE,
                TRUE,
                NOW()
            )
            ON CONFLICT (email) DO UPDATE SET
                is_admin = TRUE,
                is_active = TRUE,
                updated_at = NOW()
        """))
        print("‚úÖ Usuario administrador por defecto creado/actualizado")
    
    # Verificaci√≥n final
    final_admin_count = connection.execute(sa.text("SELECT COUNT(*) FROM usuarios WHERE is_admin = TRUE")).scalar()
    print(f"‚úÖ Total de administradores en el sistema: {final_admin_count}")
    
    # Mostrar lista de administradores
    admins = connection.execute(sa.text("""
        SELECT email, nombre, apellido, is_active 
        FROM usuarios 
        WHERE is_admin = TRUE 
        ORDER BY email
    """)).fetchall()
    
    print("üìã Lista de administradores:")
    for admin in admins:
        status = "ACTIVO" if admin.is_active else "INACTIVO"
        print(f"   - {admin.email} ({admin.nombre} {admin.apellido}) - {status}")
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Revertir cambios espec√≠ficos
    connection = op.get_bind()
    
    # Lista de usuarios que fueron marcados como administradores
    admin_emails = [
        'itmaster@rapicreditca.com',
        'admin@rapicredit.com',
        'admin@sistema.com',
        'daniel@rapicredit.com'
    ]
    
    # Revertir a usuarios normales
    for email in admin_emails:
        connection.execute(sa.text(f"""
            UPDATE usuarios 
            SET is_admin = FALSE, updated_at = NOW()
            WHERE email = '{email}'
        """))
    
    # ### end Alembic commands ###
