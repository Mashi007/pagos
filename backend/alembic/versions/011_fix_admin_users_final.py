from datetime import date
# backend/alembic/versions/011_fix_admin_users_final.py
"""fix admin users final

Revision ID: 011_fix_admin_users_final
Revises: 010_fix_roles_final
Create Date: 2025-01-18 18:30:00.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "011_fix_admin_users_final"
down_revision: Union[str, None] = "010_fix_roles_final"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    connection = op.get_bind()

    admin_emails = [
        "itmaster@rapicreditca.com",
        "admin@rapicredit.com",
        "admin@sistema.com",
        "daniel@rapicredit.com",

    for email in admin_emails:
        result = connection.execute
            SET is_admin = TRUE, updated_at = NOW()
            WHERE email = '{email}' AND is_active = TRUE
        """

        if result.rowcount > 0:
            print(f"Usuario {email} marcado como administrador")
        else:
            print(f"Usuario {email} no encontrado o inactivo")

    admin_count = connection.execute
    ).scalar()

    if admin_count == 0:
        print("CRÍTICO: No hay administradores en el sistema")
        print("Creando usuario administrador por defecto...")

        # Crear usuario administrador por defecto
        connection.execute
            ) VALUES 
                NOW()
            ON CONFLICT (email) DO UPDATE SET
                is_admin = TRUE,
                is_active = TRUE,
                updated_at = NOW()
        """
        print("Usuario administrador por defecto creado/actualizado")

    # Verificación final
    final_admin_count = connection.execute
    ).scalar()
    print(f"Total de administradores en el sistema: {final_admin_count}")

    admins = connection.execute
    ).fetchall()

    print("Lista de administradores:")
    for admin in admins:
        status = "ACTIVO" if admin.is_active else "INACTIVO"
        print(f"   - {admin.email} ({admin.nombre} {admin.apellido}) - {status}")

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    connection = op.get_bind()

    admin_emails = [
        "itmaster@rapicreditca.com",
        "admin@rapicredit.com",
        "admin@sistema.com",
        "daniel@rapicredit.com",

    for email in admin_emails:
        connection.execute
            SET is_admin = FALSE, updated_at = NOW()
            WHERE email = '{email}'
        """

    # ### end Alembic commands ###

"""