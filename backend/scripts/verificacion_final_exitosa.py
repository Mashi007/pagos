# backend/scripts/verificacion_final_exitosa.py
"""
VERIFICACI√ìN FINAL EXITOSA: Confirmar que analistas funciona despu√©s de todas las correcciones
"""
import os
import sys
import logging
import requests
import json
import time
from datetime import datetime
from typing import Dict, Any

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class VerificacionFinalExitosa:
    def __init__(self):
        self.backend_url = "https://pagos-f2qf.onrender.com"
        self.frontend_url = "https://rapicredit.onrender.com"
        self.credentials = {
            "email": "itmaster@rapicreditca.com",
            "password": "R@pi_2025**",
            "remember": True
        }
        
    def verificar_servidor_activo(self) -> Dict[str, Any]:
        """Verificar que el servidor est√° activo"""
        logger.info("üåê VERIFICANDO SERVIDOR ACTIVO")
        logger.info("-" * 50)
        
        try:
            response = requests.get(f"{self.backend_url}/docs", timeout=10)
            if response.status_code == 200:
                logger.info("   ‚úÖ Servidor activo y respondiendo")
                return {"status": "success", "message": "Servidor activo"}
            else:
                logger.error(f"   ‚ùå Servidor respondiendo con status: {response.status_code}")
                return {"status": "error", "status_code": response.status_code}
        except Exception as e:
            logger.error(f"   ‚ùå Error conectando al servidor: {e}")
            return {"status": "error", "error": str(e)}
    
    def hacer_login(self) -> Dict[str, Any]:
        """Hacer login y obtener token"""
        logger.info("üîê REALIZANDO LOGIN")
        logger.info("-" * 50)
        
        try:
            response = requests.post(
                f"{self.backend_url}/api/v1/auth/login",
                json=self.credentials,
                headers={'Content-Type': 'application/json'},
                timeout=15
            )
            
            if response.status_code == 200:
                data = response.json()
                access_token = data.get('access_token')
                user_info = data.get('user', {})
                
                logger.info("   ‚úÖ Login exitoso")
                logger.info(f"   üìä Usuario: {user_info.get('email', 'N/A')}")
                logger.info(f"   üìä Rol: {'Administrador' if user_info.get('is_admin') else 'Usuario'}")
                
                return {
                    "status": "success",
                    "access_token": access_token,
                    "user": user_info
                }
            else:
                logger.error(f"   ‚ùå Login fall√≥: {response.status_code}")
                logger.error(f"   üìä Respuesta: {response.text[:200]}")
                return {"status": "error", "status_code": response.status_code}
                
        except Exception as e:
            logger.error(f"   ‚ùå Error en login: {e}")
            return {"status": "error", "error": str(e)}
    
    def verificar_endpoint_analistas_final(self, access_token: str) -> Dict[str, Any]:
        """Verificaci√≥n final del endpoint analistas"""
        logger.info("üë• VERIFICACI√ìN FINAL DEL ENDPOINT ANALISTAS")
        logger.info("-" * 50)
        
        headers = {
            'Authorization': f'Bearer {access_token}',
            'Content-Type': 'application/json'
        }
        
        try:
            response = requests.get(
                f"{self.backend_url}/api/v1/analistas",
                headers=headers,
                params={'limit': 100},
                timeout=15
            )
            
            logger.info(f"   üìä Status Code: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                total_analistas = data.get('total', 0)
                items = data.get('items', [])
                
                logger.info("   üéâ ¬°ENDPOINT ANALISTAS FUNCIONANDO CORRECTAMENTE!")
                logger.info(f"   üìä Total analistas: {total_analistas}")
                logger.info(f"   üìä Items retornados: {len(items)}")
                
                if items:
                    primer_analista = items[0]
                    logger.info(f"   üìä Primer analista: {primer_analista.get('nombre', 'N/A')} {primer_analista.get('apellido', 'N/A')}")
                
                return {
                    "status": "success",
                    "status_code": response.status_code,
                    "total_analistas": total_analistas,
                    "items_count": len(items),
                    "data": data
                }
            else:
                logger.error(f"   ‚ùå ENDPOINT ANALISTAS A√öN FALLANDO: {response.status_code}")
                logger.error(f"   üìä Respuesta: {response.text[:200]}")
                return {
                    "status": "error",
                    "status_code": response.status_code,
                    "error": response.text[:200]
                }
                
        except Exception as e:
            logger.error(f"   ‚ùå Error verificando endpoint: {e}")
            return {"status": "error", "error": str(e)}
    
    def verificar_endpoints_adicionales(self, access_token: str) -> Dict[str, Any]:
        """Verificar otros endpoints cr√≠ticos"""
        logger.info("üîç VERIFICANDO ENDPOINTS ADICIONALES")
        logger.info("-" * 50)
        
        headers = {
            'Authorization': f'Bearer {access_token}',
            'Content-Type': 'application/json'
        }
        
        endpoints_a_verificar = [
            ("/api/v1/clientes", "Clientes"),
            ("/api/v1/dashboard", "Dashboard"),
            ("/api/v1/kpis", "KPIs"),
            ("/api/v1/reportes", "Reportes"),
            ("/api/v1/concesionarios", "Concesionarios"),
            ("/api/v1/modelos-vehiculos", "Modelos Veh√≠culos")
        ]
        
        resultados = {}
        
        for endpoint, nombre in endpoints_a_verificar:
            try:
                response = requests.get(
                    f"{self.backend_url}{endpoint}",
                    headers=headers,
                    timeout=10
                )
                
                if response.status_code == 200:
                    logger.info(f"   ‚úÖ {nombre}: OK")
                    resultados[nombre] = "OK"
                else:
                    logger.error(f"   ‚ùå {nombre}: {response.status_code}")
                    resultados[nombre] = f"Error {response.status_code}"
                    
            except Exception as e:
                logger.error(f"   ‚ùå {nombre}: Error - {e}")
                resultados[nombre] = f"Error: {e}"
        
        return resultados
    
    def ejecutar_verificacion_final_exitosa(self):
        """Ejecutar verificaci√≥n final exitosa"""
        logger.info("üéâ VERIFICACI√ìN FINAL EXITOSA: ANALISTAS DESPU√âS DE TODAS LAS CORRECCIONES")
        logger.info("=" * 80)
        logger.info(f"üìÖ Fecha y hora: {datetime.now()}")
        logger.info("üéØ Objetivo: Confirmar que el problema 405 est√° completamente resuelto")
        logger.info("=" * 80)
        
        resultados = {}
        
        # 1. Verificar servidor activo
        logger.info("\nüåê 1. VERIFICANDO SERVIDOR ACTIVO")
        logger.info("-" * 50)
        servidor = self.verificar_servidor_activo()
        resultados["servidor"] = servidor
        
        if servidor["status"] != "success":
            logger.error("‚ùå Servidor no disponible, abortando verificaci√≥n")
            return resultados
        
        # 2. Hacer login
        logger.info("\nüîê 2. REALIZANDO LOGIN")
        logger.info("-" * 50)
        login = self.hacer_login()
        resultados["login"] = login
        
        if login["status"] != "success":
            logger.error("‚ùå Login fall√≥, abortando verificaci√≥n")
            return resultados
        
        access_token = login["access_token"]
        
        # 3. Verificaci√≥n final del endpoint analistas
        logger.info("\nüë• 3. VERIFICACI√ìN FINAL DEL ENDPOINT ANALISTAS")
        logger.info("-" * 50)
        analistas = self.verificar_endpoint_analistas_final(access_token)
        resultados["analistas"] = analistas
        
        # 4. Verificar endpoints adicionales
        logger.info("\nüîç 4. VERIFICANDO ENDPOINTS ADICIONALES")
        logger.info("-" * 50)
        adicionales = self.verificar_endpoints_adicionales(access_token)
        resultados["adicionales"] = adicionales
        
        # 5. Resumen final exitoso
        logger.info("\nüìä RESUMEN FINAL EXITOSO")
        logger.info("=" * 80)
        
        if analistas["status"] == "success":
            logger.info("üéâ ¬°PROBLEMA COMPLETAMENTE RESUELTO!")
            logger.info("   ‚úÖ Endpoint analistas funcionando correctamente")
            logger.info(f"   üìä Total analistas: {analistas.get('total_analistas', 0)}")
            logger.info("   üéØ Error 405 Method Not Allowed: COMPLETAMENTE RESUELTO")
            logger.info("   üí° Causa ra√≠z: Errores cr√≠ticos en analistas.py")
            logger.info("   üîß Soluci√≥n: Correcci√≥n de sintaxis, emojis, m√©todos y docstrings")
            logger.info("   üöÄ SISTEMA COMPLETAMENTE FUNCIONAL")
            
            # Resumen de correcciones aplicadas
            logger.info("\nüìã CORRECCIONES APLICADAS:")
            correcciones = [
                "1. Import de logger agregado en analistas.py",
                "2. Emojis problem√°ticos removidos de analistas.py",
                "3. M√©todo .to_dict() corregido a AnalistaResponse.model_validate()",
                "4. Funci√≥n duplicada test_simple eliminada",
                "5. Errores de sintaxis en main.py corregidos",
                "6. L√≠neas incompletas de include_router completadas",
                "7. Docstring incompleto corregido en analistas.py"
            ]
            
            for correccion in correcciones:
                logger.info(f"   {correccion}")
                
        else:
            logger.error("‚ùå PROBLEMA PERSISTE")
            logger.error(f"   üìä Status: {analistas.get('status_code', 'N/A')}")
            logger.error(f"   üìä Error: {analistas.get('error', 'N/A')}")
            logger.error("   üí° Se requiere investigaci√≥n adicional")
        
        return resultados

def main():
    verificador = VerificacionFinalExitosa()
    return verificador.ejecutar_verificacion_final_exitosa()

if __name__ == "__main__":
    main()
