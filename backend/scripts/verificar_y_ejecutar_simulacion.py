#!/usr/bin/env python3
"""
Script para verificar estado del servidor y ejecutar simulaci√≥n cuando est√© disponible
"""

import requests
import os
import logging
import time
from dotenv import load_dotenv
from datetime import datetime

load_dotenv()

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

BASE_URL = os.getenv("FRONTEND_URL", "https://pagos-f2qf.onrender.com")

def verificar_estado_servidor():
    """Verificar si el servidor est√° disponible"""
    try:
        response = requests.get(f"{BASE_URL}/", timeout=10)
        logger.info(f"   üìä Status Code: {response.status_code}")
        if response.status_code == 200:
            logger.info("   ‚úÖ Servidor disponible")
            return True
        else:
            logger.warning(f"   ‚ö†Ô∏è Servidor responde con c√≥digo: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        logger.error(f"   ‚ùå Error conectando al servidor: {e}")
        return False

def verificar_endpoint_login():
    """Verificar si el endpoint de login est√° funcionando"""
    try:
        # Probar OPTIONS primero
        response = requests.options(f"{BASE_URL}/api/v1/auth/login", timeout=10)
        logger.info(f"   üìä OPTIONS Status: {response.status_code}")
        
        if response.status_code == 200:
            logger.info("   ‚úÖ Endpoint de login disponible")
            return True
        else:
            logger.warning(f"   ‚ö†Ô∏è Endpoint de login responde con c√≥digo: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        logger.error(f"   ‚ùå Error verificando endpoint de login: {e}")
        return False

def esperar_servidor_disponible(max_intentos=10, intervalo=30):
    """Esperar hasta que el servidor est√© disponible"""
    logger.info("üîÑ ESPERANDO A QUE EL SERVIDOR EST√â DISPONIBLE")
    logger.info("=" * 60)
    
    for intento in range(1, max_intentos + 1):
        logger.info(f"üìä Intento {intento}/{max_intentos}")
        logger.info("-" * 30)
        
        # Verificar estado general del servidor
        logger.info("1Ô∏è‚É£ Verificando estado general del servidor...")
        servidor_ok = verificar_estado_servidor()
        
        if servidor_ok:
            # Verificar endpoint espec√≠fico
            logger.info("2Ô∏è‚É£ Verificando endpoint de login...")
            endpoint_ok = verificar_endpoint_login()
            
            if endpoint_ok:
                logger.info("‚úÖ SERVIDOR COMPLETAMENTE DISPONIBLE")
                return True
        
        if intento < max_intentos:
            logger.info(f"‚è≥ Esperando {intervalo} segundos antes del siguiente intento...")
            time.sleep(intervalo)
        else:
            logger.error("‚ùå Servidor no disponible despu√©s de todos los intentos")
            return False
    
    return False

def ejecutar_simulacion_cuando_disponible():
    """Ejecutar la simulaci√≥n cuando el servidor est√© disponible"""
    logger.info("üé≠ SIMULACI√ìN DE CASOS REALES - VERIFICACI√ìN DE SERVIDOR")
    logger.info("=" * 80)
    logger.info(f"üìä Fecha y hora: {datetime.now()}")
    logger.info(f"üåê URL del servidor: {BASE_URL}")
    logger.info("=" * 80)
    logger.info("")
    
    # Esperar a que el servidor est√© disponible
    if esperar_servidor_disponible():
        logger.info("")
        logger.info("üöÄ SERVIDOR DISPONIBLE - EJECUTANDO SIMULACI√ìN")
        logger.info("=" * 60)
        
        # Importar y ejecutar el script de simulaci√≥n
        try:
            import subprocess
            result = subprocess.run([
                "py", "backend/scripts/simulacion_casos_reales_usuarios.py"
            ], capture_output=True, text=True, timeout=300)
            
            logger.info("üìä RESULTADO DE LA SIMULACI√ìN:")
            logger.info("-" * 40)
            logger.info(result.stdout)
            
            if result.stderr:
                logger.error("‚ùå ERRORES EN LA SIMULACI√ìN:")
                logger.error("-" * 40)
                logger.error(result.stderr)
            
            if result.returncode == 0:
                logger.info("‚úÖ SIMULACI√ìN COMPLETADA EXITOSAMENTE")
            else:
                logger.error(f"‚ùå SIMULACI√ìN FALL√ì CON C√ìDIGO: {result.returncode}")
                
        except subprocess.TimeoutExpired:
            logger.error("‚ùå SIMULACI√ìN TIMEOUT - Tard√≥ m√°s de 5 minutos")
        except Exception as e:
            logger.error(f"‚ùå ERROR EJECUTANDO SIMULACI√ìN: {e}")
    else:
        logger.error("‚ùå NO SE PUDO EJECUTAR LA SIMULACI√ìN - SERVIDOR NO DISPONIBLE")

if __name__ == "__main__":
    ejecutar_simulacion_cuando_disponible()
