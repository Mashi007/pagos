# backend/scripts/enfoque_8_verificacion_definitiva.py
"""
ENFOQUE 8: VERIFICACI√ìN DEFINITIVA CON AN√ÅLISIS COMPLETO
Confirmaci√≥n definitiva de que la causa ra√≠z ha sido resuelta
"""
import os
import sys
import logging
import requests
import json
import time
import ast
import re
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Tuple, Any

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class Enfoque8VerificacionDefinitiva:
    def __init__(self):
        self.backend_url = "https://pagos-f2qf.onrender.com"
        self.frontend_url = "https://rapicredit.onrender.com"
        self.credentials = {
            "email": "itmaster@rapicreditca.com",
            "password": "R@pi_2025**",
            "remember": True
        }
        self.resultados_completos = {}
        self.causa_raiz_confirmada = False
        
    def verificar_servidor_y_despliegue(self) -> Dict[str, Any]:
        """Verificar estado del servidor y despliegue"""
        logger.info("üåê VERIFICANDO SERVIDOR Y DESPLIEGUE")
        logger.info("-" * 50)
        
        try:
            # Verificar documentaci√≥n
            docs_response = requests.get(f"{self.backend_url}/docs", timeout=10)
            if docs_response.status_code == 200:
                logger.info("   ‚úÖ Servidor activo y documentaci√≥n disponible")
            else:
                logger.error(f"   ‚ùå Servidor con problemas: {docs_response.status_code}")
                return {"status": "error", "status_code": docs_response.status_code}
            
            # Verificar health check
            health_response = requests.get(f"{self.backend_url}/api/v1/health", timeout=10)
            if health_response.status_code == 200:
                logger.info("   ‚úÖ Health check funcionando")
                health_data = health_response.json()
                logger.info(f"   üìä Status: {health_data.get('status', 'N/A')}")
            else:
                logger.error(f"   ‚ùå Health check fallando: {health_response.status_code}")
            
            return {
                "status": "success",
                "servidor_activo": True,
                "documentacion_disponible": docs_response.status_code == 200,
                "health_check_ok": health_response.status_code == 200
            }
            
        except Exception as e:
            logger.error(f"   ‚ùå Error verificando servidor: {e}")
            return {"status": "error", "error": str(e)}
    
    def verificar_autenticacion_completa(self) -> Dict[str, Any]:
        """Verificar sistema de autenticaci√≥n completo"""
        logger.info("üîê VERIFICANDO AUTENTICACI√ìN COMPLETA")
        logger.info("-" * 50)
        
        try:
            # Login
            login_response = requests.post(
                f"{self.backend_url}/api/v1/auth/login",
                json=self.credentials,
                headers={'Content-Type': 'application/json'},
                timeout=15
            )
            
            if login_response.status_code != 200:
                logger.error(f"   ‚ùå Login fall√≥: {login_response.status_code}")
                return {"status": "error", "status_code": login_response.status_code}
            
            login_data = login_response.json()
            access_token = login_data.get('access_token')
            user_info = login_data.get('user', {})
            
            if not access_token:
                logger.error("   ‚ùå No se obtuvo access token")
                return {"status": "error", "error": "No access token"}
            
            logger.info("   ‚úÖ Login exitoso")
            logger.info(f"   üìä Usuario: {user_info.get('email', 'N/A')}")
            logger.info(f"   üìä Rol: {'Administrador' if user_info.get('is_admin') else 'Usuario'}")
            
            # Verificar endpoint /me
            headers = {
                'Authorization': f'Bearer {access_token}',
                'Content-Type': 'application/json'
            }
            
            me_response = requests.get(
                f"{self.backend_url}/api/v1/auth/me",
                headers=headers,
                timeout=10
            )
            
            if me_response.status_code == 200:
                logger.info("   ‚úÖ Endpoint /me funcionando")
                me_data = me_response.json()
                logger.info(f"   üìä Usuario confirmado: {me_data.get('email', 'N/A')}")
            else:
                logger.error(f"   ‚ùå Endpoint /me fallando: {me_response.status_code}")
            
            return {
                "status": "success",
                "login_ok": True,
                "access_token": access_token,
                "user_info": user_info,
                "me_endpoint_ok": me_response.status_code == 200
            }
            
        except Exception as e:
            logger.error(f"   ‚ùå Error en autenticaci√≥n: {e}")
            return {"status": "error", "error": str(e)}
    
    def verificar_endpoint_analistas_definitivo(self, access_token: str) -> Dict[str, Any]:
        """Verificaci√≥n definitiva del endpoint analistas"""
        logger.info("üë• VERIFICACI√ìN DEFINITIVA DEL ENDPOINT ANALISTAS")
        logger.info("-" * 50)
        
        headers = {
            'Authorization': f'Bearer {access_token}',
            'Content-Type': 'application/json'
        }
        
        # Probar m√∫ltiples rutas del endpoint analistas
        rutas_analistas = [
            ("/api/v1/analistas", "Endpoint principal"),
            ("/api/v1/analistas/test-no-auth", "Test sin auth"),
            ("/api/v1/analistas/test-activos", "Test activos"),
            ("/api/v1/analistas/list-no-auth", "Lista sin auth"),
            ("/api/v1/analistas/activos", "Lista activos")
        ]
        
        resultados_rutas = {}
        
        for ruta, descripcion in rutas_analistas:
            try:
                response = requests.get(
                    f"{self.backend_url}{ruta}",
                    headers=headers,
                    timeout=10
                )
                
                logger.info(f"   üìä {descripcion}: Status {response.status_code}")
                
                if response.status_code == 200:
                    logger.info(f"   ‚úÖ {descripcion}: OK")
                    data = response.json()
                    if isinstance(data, dict):
                        total = data.get('total', 0)
                        items = data.get('items', [])
                        logger.info(f"   üìä Total: {total}, Items: {len(items)}")
                    resultados_rutas[ruta] = {
                        "status": "success",
                        "status_code": response.status_code,
                        "data": data
                    }
                elif response.status_code == 405:
                    logger.error(f"   ‚ùå {descripcion}: 405 Method Not Allowed")
                    resultados_rutas[ruta] = {
                        "status": "error",
                        "status_code": response.status_code,
                        "error": "Method Not Allowed"
                    }
                else:
                    logger.error(f"   ‚ùå {descripcion}: {response.status_code}")
                    resultados_rutas[ruta] = {
                        "status": "error",
                        "status_code": response.status_code,
                        "error": response.text[:100]
                    }
                    
            except Exception as e:
                logger.error(f"   ‚ùå {descripcion}: Error - {e}")
                resultados_rutas[ruta] = {
                    "status": "error",
                    "error": str(e)
                }
        
        # Determinar si el endpoint principal funciona
        endpoint_principal = resultados_rutas.get("/api/v1/analistas", {})
        if endpoint_principal.get("status") == "success":
            logger.info("   üéâ ENDPOINT PRINCIPAL ANALISTAS FUNCIONANDO")
            self.causa_raiz_confirmada = True
        else:
            logger.error("   ‚ùå ENDPOINT PRINCIPAL ANALISTAS A√öN FALLANDO")
            self.causa_raiz_confirmada = False
        
        return {
            "rutas": resultados_rutas,
            "endpoint_principal_ok": endpoint_principal.get("status") == "success",
            "total_rutas": len(rutas_analistas),
            "rutas_ok": len([r for r in resultados_rutas.values() if r.get("status") == "success"])
        }
    
    def verificar_endpoints_sistema_completo(self, access_token: str) -> Dict[str, Any]:
        """Verificar todos los endpoints del sistema"""
        logger.info("üîç VERIFICANDO ENDPOINTS DEL SISTEMA COMPLETO")
        logger.info("-" * 50)
        
        headers = {
            'Authorization': f'Bearer {access_token}',
            'Content-Type': 'application/json'
        }
        
        endpoints_sistema = [
            ("/api/v1/clientes", "Clientes"),
            ("/api/v1/dashboard", "Dashboard"),
            ("/api/v1/kpis", "KPIs"),
            ("/api/v1/reportes", "Reportes"),
            ("/api/v1/concesionarios", "Concesionarios"),
            ("/api/v1/modelos-vehiculos", "Modelos Veh√≠culos"),
            ("/api/v1/prestamos", "Pr√©stamos"),
            ("/api/v1/pagos", "Pagos"),
            ("/api/v1/amortizacion", "Amortizaci√≥n"),
            ("/api/v1/conciliacion", "Conciliaci√≥n")
        ]
        
        resultados_sistema = {}
        
        for endpoint, nombre in endpoints_sistema:
            try:
                response = requests.get(
                    f"{self.backend_url}{endpoint}",
                    headers=headers,
                    timeout=10
                )
                
                logger.info(f"   üìä {nombre}: Status {response.status_code}")
                
                if response.status_code == 200:
                    logger.info(f"   ‚úÖ {nombre}: OK")
                    resultados_sistema[nombre] = {
                        "status": "success",
                        "status_code": response.status_code
                    }
                elif response.status_code == 405:
                    logger.error(f"   ‚ùå {nombre}: 405 Method Not Allowed")
                    resultados_sistema[nombre] = {
                        "status": "error",
                        "status_code": response.status_code,
                        "error": "Method Not Allowed"
                    }
                else:
                    logger.error(f"   ‚ùå {nombre}: {response.status_code}")
                    resultados_sistema[nombre] = {
                        "status": "error",
                        "status_code": response.status_code,
                        "error": response.text[:100]
                    }
                    
            except Exception as e:
                logger.error(f"   ‚ùå {nombre}: Error - {e}")
                resultados_sistema[nombre] = {
                    "status": "error",
                    "error": str(e)
                }
        
        return {
            "endpoints": resultados_sistema,
            "total_endpoints": len(endpoints_sistema),
            "endpoints_ok": len([e for e in resultados_sistema.values() if e.get("status") == "success"]),
            "endpoints_error": len([e for e in resultados_sistema.values() if e.get("status") == "error"])
        }
    
    def analizar_causa_raiz_resuelta(self) -> Dict[str, Any]:
        """Analizar si la causa ra√≠z ha sido resuelta"""
        logger.info("üîç ANALIZANDO CAUSA RA√çZ RESUELTA")
        logger.info("-" * 50)
        
        # Resumen de correcciones aplicadas
        correcciones_aplicadas = [
            "Import de logger agregado en analistas.py",
            "Emojis problem√°ticos removidos de analistas.py",
            "M√©todo .to_dict() corregido a AnalistaResponse.model_validate()",
            "Funci√≥n duplicada test_simple eliminada",
            "Errores de sintaxis en main.py corregidos",
            "L√≠neas incompletas de include_router completadas"
        ]
        
        logger.info("   üìä CORRECCIONES APLICADAS:")
        for i, correccion in enumerate(correcciones_aplicadas, 1):
            logger.info(f"   {i}. {correccion}")
        
        # Determinar estado de la causa ra√≠z
        if self.causa_raiz_confirmada:
            logger.info("   ‚úÖ CAUSA RA√çZ CONFIRMADA COMO RESUELTA")
            logger.info("   üéØ El endpoint analistas funciona correctamente")
            logger.info("   üéØ El error 405 Method Not Allowed est√° resuelto")
        else:
            logger.error("   ‚ùå CAUSA RA√çZ A√öN NO RESUELTA")
            logger.error("   üîç El endpoint analistas sigue fallando")
            logger.error("   üí° Se requiere investigaci√≥n adicional")
        
        return {
            "correcciones_aplicadas": correcciones_aplicadas,
            "causa_raiz_resuelta": self.causa_raiz_confirmada,
            "total_correcciones": len(correcciones_aplicadas)
        }
    
    def ejecutar_enfoque_8(self):
        """Ejecutar enfoque 8 completo"""
        logger.info("üîç ENFOQUE 8: VERIFICACI√ìN DEFINITIVA CON AN√ÅLISIS COMPLETO")
        logger.info("=" * 80)
        logger.info(f"üìÖ Fecha y hora: {datetime.now()}")
        logger.info("üéØ Objetivo: Confirmaci√≥n definitiva de que la causa ra√≠z ha sido resuelta")
        logger.info("=" * 80)
        
        resultados = {}
        
        # 1. Verificar servidor y despliegue
        logger.info("\nüåê 1. VERIFICANDO SERVIDOR Y DESPLIEGUE")
        logger.info("-" * 50)
        servidor = self.verificar_servidor_y_despliegue()
        resultados["servidor"] = servidor
        
        if servidor["status"] != "success":
            logger.error("‚ùå Servidor no disponible, abortando verificaci√≥n")
            return resultados
        
        # 2. Verificar autenticaci√≥n completa
        logger.info("\nüîê 2. VERIFICANDO AUTENTICACI√ìN COMPLETA")
        logger.info("-" * 50)
        auth = self.verificar_autenticacion_completa()
        resultados["autenticacion"] = auth
        
        if auth["status"] != "success":
            logger.error("‚ùå Autenticaci√≥n fall√≥, abortando verificaci√≥n")
            return resultados
        
        access_token = auth["access_token"]
        
        # 3. Verificaci√≥n definitiva del endpoint analistas
        logger.info("\nüë• 3. VERIFICACI√ìN DEFINITIVA DEL ENDPOINT ANALISTAS")
        logger.info("-" * 50)
        analistas = self.verificar_endpoint_analistas_definitivo(access_token)
        resultados["analistas"] = analistas
        
        # 4. Verificar endpoints del sistema completo
        logger.info("\nüîç 4. VERIFICANDO ENDPOINTS DEL SISTEMA COMPLETO")
        logger.info("-" * 50)
        sistema = self.verificar_endpoints_sistema_completo(access_token)
        resultados["sistema"] = sistema
        
        # 5. Analizar causa ra√≠z resuelta
        logger.info("\nüîç 5. ANALIZANDO CAUSA RA√çZ RESUELTA")
        logger.info("-" * 50)
        causa_raiz = self.analizar_causa_raiz_resuelta()
        resultados["causa_raiz"] = causa_raiz
        
        # 6. Resumen final definitivo
        logger.info("\nüìä RESUMEN FINAL DEFINITIVO")
        logger.info("=" * 80)
        
        logger.info(f"üìä SERVIDOR: {'‚úÖ OK' if servidor.get('status') == 'success' else '‚ùå ERROR'}")
        logger.info(f"üìä AUTENTICACI√ìN: {'‚úÖ OK' if auth.get('status') == 'success' else '‚ùå ERROR'}")
        logger.info(f"üìä ENDPOINT ANALISTAS: {'‚úÖ OK' if analistas.get('endpoint_principal_ok') else '‚ùå ERROR'}")
        logger.info(f"üìä ENDPOINTS SISTEMA: {sistema.get('endpoints_ok', 0)}/{sistema.get('total_endpoints', 0)} OK")
        
        # Conclusi√≥n final definitiva
        logger.info("\nüéØ CONCLUSI√ìN FINAL DEFINITIVA")
        logger.info("=" * 80)
        
        if self.causa_raiz_confirmada:
            logger.info("üéâ ¬°PROBLEMA COMPLETAMENTE RESUELTO!")
            logger.info("   ‚úÖ Endpoint analistas funcionando correctamente")
            logger.info("   ‚úÖ Error 405 Method Not Allowed resuelto")
            logger.info("   ‚úÖ Causa ra√≠z identificada y corregida")
            logger.info("   üéØ CAUSA RA√çZ: Errores cr√≠ticos en analistas.py")
            logger.info("   üîß SOLUCI√ìN: Correcci√≥n de sintaxis, emojis y m√©todos")
            logger.info("   üöÄ SISTEMA COMPLETAMENTE FUNCIONAL")
        else:
            logger.error("‚ùå PROBLEMA PERSISTE")
            logger.error("   üîç Endpoint analistas sigue fallando")
            logger.error("   üí° Se requiere investigaci√≥n adicional")
            logger.error("   üîß Posibles causas restantes:")
            logger.error("      - Problemas de despliegue")
            logger.error("      - Errores adicionales no detectados")
            logger.error("      - Problemas de configuraci√≥n")
        
        return resultados

def main():
    verificador = Enfoque8VerificacionDefinitiva()
    return verificador.ejecutar_enfoque_8()

if __name__ == "__main__":
    main()
