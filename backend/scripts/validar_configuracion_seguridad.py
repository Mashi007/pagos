#!/usr/bin/env python3
"""
Script de validaci√≥n de configuraci√≥n de seguridad JWT
Verifica configuraci√≥n del backend sin depender del frontend
"""

import os
import sys
import requests
import json
from datetime import datetime, timedelta
import jwt
from typing import Dict, Any

# Configuraci√≥n
BASE_URL = "https://pagos-f2qf.onrender.com"

def test_public_endpoints():
    """Probar endpoints p√∫blicos"""
    print("üåê PROBANDO ENDPOINTS P√öBLICOS...")
    
    public_endpoints = [
        "/",
        "/docs",
        "/api/v1/auth/login",
        "/api/v1/analistas/activos",
        "/api/v1/concesionarios/activos",
        "/api/v1/modelos-vehiculos/activos"
    ]
    
    for endpoint in public_endpoints:
        try:
            response = requests.get(f"{BASE_URL}{endpoint}", timeout=10)
            print(f"  {endpoint}: {response.status_code} {'‚úÖ' if response.status_code in [200, 405] else '‚ùå'}")
        except Exception as e:
            print(f"  {endpoint}: ERROR - {e}")

def test_auth_endpoints():
    """Probar endpoints de autenticaci√≥n espec√≠ficamente"""
    print("\nüîê PROBANDO ENDPOINTS DE AUTENTICACI√ìN...")
    
    auth_endpoints = [
        "/api/v1/auth/login",
        "/api/v1/auth/refresh",
        "/api/v1/auth/logout"
    ]
    
    for endpoint in auth_endpoints:
        try:
            # Probar con POST (m√©todo correcto para login)
            if endpoint == "/api/v1/auth/login":
                response = requests.post(f"{BASE_URL}{endpoint}", json={}, timeout=10)
            else:
                response = requests.get(f"{BASE_URL}{endpoint}", timeout=10)
            
            print(f"  {endpoint}: {response.status_code} {'‚úÖ' if response.status_code in [200, 401, 422] else '‚ùå'}")
            
            if response.status_code == 401:
                print(f"    üìù Respuesta 401 esperada para endpoint protegido")
            elif response.status_code == 422:
                print(f"    üìù Respuesta 422 esperada para datos faltantes")
                
        except Exception as e:
            print(f"  {endpoint}: ERROR - {e}")

def test_cors_configuration():
    """Probar configuraci√≥n CORS"""
    print("\nüåê PROBANDO CONFIGURACI√ìN CORS...")
    
    try:
        # Simular request desde frontend
        headers = {
            'Origin': 'https://rapicredit.onrender.com',
            'Access-Control-Request-Method': 'GET',
            'Access-Control-Request-Headers': 'Authorization, Content-Type'
        }
        
        response = requests.options(f"{BASE_URL}/api/v1/auth/me", headers=headers, timeout=10)
        print(f"üìä OPTIONS Status: {response.status_code}")
        
        cors_headers = {
            'Access-Control-Allow-Origin': response.headers.get('Access-Control-Allow-Origin'),
            'Access-Control-Allow-Methods': response.headers.get('Access-Control-Allow-Methods'),
            'Access-Control-Allow-Headers': response.headers.get('Access-Control-Allow-Headers'),
            'Access-Control-Allow-Credentials': response.headers.get('Access-Control-Allow-Credentials')
        }
        
        print("üìä Headers CORS encontrados:")
        for header, value in cors_headers.items():
            status = "‚úÖ" if value else "‚ùå"
            print(f"  {header}: {value} {status}")
            
    except Exception as e:
        print(f"‚ùå Error probando CORS: {e}")

def test_token_generation():
    """Probar generaci√≥n de tokens con credenciales v√°lidas"""
    print("\nüé´ PROBANDO GENERACI√ìN DE TOKENS...")
    
    # Credenciales de prueba (cambiar por las reales)
    test_credentials = [
        {"email": "itmaster@rapicreditca.com", "password": "admin123"},
        {"email": "admin@rapicreditca.com", "password": "admin123"},
        {"email": "test@rapicreditca.com", "password": "test123"}
    ]
    
    for creds in test_credentials:
        try:
            response = requests.post(
                f"{BASE_URL}/api/v1/auth/login",
                json=creds,
                timeout=10
            )
            
            print(f"  {creds['email']}: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                access_token = data.get('access_token')
                refresh_token = data.get('refresh_token')
                
                print(f"    ‚úÖ Access Token: {'Presente' if access_token else 'Faltante'}")
                print(f"    ‚úÖ Refresh Token: {'Presente' if refresh_token else 'Faltante'}")
                
                # Validar estructura del token
                if access_token:
                    try:
                        decoded = jwt.decode(access_token, options={"verify_signature": False})
                        print(f"    ‚úÖ Token v√°lido - exp: {decoded.get('exp')}")
                    except:
                        print(f"    ‚ùå Token inv√°lido")
                        
            elif response.status_code == 401:
                print(f"    ‚ùå Credenciales inv√°lidas")
            else:
                print(f"    ‚ùå Error: {response.text[:100]}...")
                
        except Exception as e:
            print(f"  {creds['email']}: ERROR - {e}")

def test_database_connectivity():
    """Probar conectividad a base de datos indirectamente"""
    print("\nüóÑÔ∏è PROBANDO CONECTIVIDAD A BASE DE DATOS...")
    
    # Endpoints que requieren BD
    db_endpoints = [
        "/api/v1/analistas/activos",
        "/api/v1/concesionarios/activos", 
        "/api/v1/modelos-vehiculos/activos"
    ]
    
    for endpoint in db_endpoints:
        try:
            response = requests.get(f"{BASE_URL}{endpoint}", timeout=10)
            print(f"  {endpoint}: {response.status_code}")
            
            if response.status_code == 200:
                try:
                    data = response.json()
                    print(f"    ‚úÖ Datos recibidos: {len(data)} registros")
                except:
                    print(f"    ‚úÖ Respuesta v√°lida pero no JSON")
            elif response.status_code == 500:
                print(f"    ‚ùå Error interno del servidor - posible problema de BD")
            else:
                print(f"    ‚ö†Ô∏è Status inesperado")
                
        except Exception as e:
            print(f"  {endpoint}: ERROR - {e}")

def main():
    """Funci√≥n principal de validaci√≥n"""
    print("üîç VALIDACI√ìN ALTERNATIVA DE CONFIGURACI√ìN DE SEGURIDAD")
    print("=" * 60)
    
    # 1. Probar endpoints p√∫blicos
    test_public_endpoints()
    
    # 2. Probar endpoints de autenticaci√≥n
    test_auth_endpoints()
    
    # 3. Probar configuraci√≥n CORS
    test_cors_configuration()
    
    # 4. Probar generaci√≥n de tokens
    test_token_generation()
    
    # 5. Probar conectividad a BD
    test_database_connectivity()
    
    print("\nüéØ VALIDACI√ìN COMPLETADA")
    print("Revisa los resultados para identificar la causa ra√≠z del problema 401")

if __name__ == "__main__":
    main()
