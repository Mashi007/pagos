#!/usr/bin/env python3
"""
Script maestro de validaci√≥n alternativa para causa ra√≠z
Ejecuta m√∫ltiples validaciones para identificar el problema 401
"""

import os
import sys
import subprocess
import time
from datetime import datetime

def run_validation_script(script_name: str, description: str):
    """Ejecutar un script de validaci√≥n"""
    print(f"\n{'='*60}")
    print(f"üöÄ EJECUTANDO: {description}")
    print(f"üìÅ Script: {script_name}")
    print(f"{'='*60}")
    
    try:
        # Ejecutar el script
        result = subprocess.run([
            sys.executable, 
            f"backend/scripts/{script_name}"
        ], 
        capture_output=True, 
        text=True, 
        timeout=60
        )
        
        print("üìä SALIDA:")
        print(result.stdout)
        
        if result.stderr:
            print("‚ùå ERRORES:")
            print(result.stderr)
        
        print(f"üìä Exit Code: {result.returncode}")
        
        return result.returncode == 0
        
    except subprocess.TimeoutExpired:
        print("‚è∞ TIMEOUT: Script tard√≥ m√°s de 60 segundos")
        return False
    except Exception as e:
        print(f"‚ùå ERROR EJECUTANDO SCRIPT: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üîç VALIDACI√ìN ALTERNATIVA MAESTRA PARA CAUSA RA√çZ")
    print("üéØ Objetivo: Identificar causa de errores 401 Unauthorized")
    print(f"‚è∞ Iniciado: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Lista de validaciones a ejecutar
    validations = [
        {
            "script": "validar_configuracion_entorno.py",
            "description": "Validaci√≥n de Configuraci√≥n de Entorno",
            "critical": True
        },
        {
            "script": "validar_configuracion_seguridad.py", 
            "description": "Validaci√≥n de Configuraci√≥n de Seguridad",
            "critical": True
        },
        {
            "script": "validar_comunicacion_frontend_backend.py",
            "description": "Validaci√≥n de Comunicaci√≥n Frontend-Backend",
            "critical": True
        },
        {
            "script": "validar_tokens_jwt.py",
            "description": "Validaci√≥n de Tokens JWT",
            "critical": False
        }
    ]
    
    results = []
    
    # Ejecutar cada validaci√≥n
    for validation in validations:
        success = run_validation_script(
            validation["script"], 
            validation["description"]
        )
        
        results.append({
            "name": validation["description"],
            "success": success,
            "critical": validation["critical"]
        })
        
        # Pausa entre validaciones
        print(f"\n‚è∏Ô∏è Pausa de 3 segundos antes de la siguiente validaci√≥n...")
        time.sleep(3)
    
    # Resumen final
    print(f"\n{'='*60}")
    print("üìä RESUMEN FINAL DE VALIDACIONES")
    print(f"{'='*60}")
    
    critical_failures = 0
    total_critical = 0
    
    for result in results:
        status = "‚úÖ √âXITO" if result["success"] else "‚ùå FALLO"
        criticality = "üî¥ CR√çTICO" if result["critical"] else "üü° OPCIONAL"
        
        print(f"{status} {criticality} - {result['name']}")
        
        if result["critical"]:
            total_critical += 1
            if not result["success"]:
                critical_failures += 1
    
    print(f"\nüéØ DIAGN√ìSTICO FINAL:")
    
    if critical_failures == 0:
        print("‚úÖ TODAS LAS VALIDACIONES CR√çTICAS EXITOSAS")
        print("   El backend est√° funcionando correctamente")
        print("   El problema est√° en el frontend o en la comunicaci√≥n")
    elif critical_failures == total_critical:
        print("‚ùå TODAS LAS VALIDACIONES CR√çTICAS FALLARON")
        print("   Problema cr√≠tico en el backend")
        print("   Revisar configuraci√≥n de servidor, BD, o autenticaci√≥n")
    else:
        print("‚ö†Ô∏è VALIDACIONES CR√çTICAS PARCIALMENTE FALLIDAS")
        print("   Problema espec√≠fico identificado")
        print("   Revisar los resultados individuales para detalles")
    
    print(f"\n‚è∞ Finalizado: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    return critical_failures == 0

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
