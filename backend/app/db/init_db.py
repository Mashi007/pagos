# app/db/init_db.py
from sqlalchemy import text
from app.db.session import engine, SessionLocal, Base
from app.config import get_settings
import logging

logger = logging.getLogger(__name__)


def check_database_connection() -> bool:
    """
    Verifica si la conexi√≥n a la base de datos est√° funcionando
    
    Returns:
        bool: True si la conexi√≥n es exitosa, False en caso contrario
    """
    try:
        db = SessionLocal()
        result = db.execute(text("SELECT 1"))
        result.fetchone()
        db.close()
        
        logger.info("‚úÖ Conexi√≥n a la base de datos exitosa")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error conectando a la base de datos: {str(e)}")
        return False


def create_schema():
    """
    Crea el schema pagos_sistema si no existe
    
    Returns:
        bool: True si el schema fue creado/verificado exitosamente
    """
    try:
        db = SessionLocal()
        db.execute(text("CREATE SCHEMA IF NOT EXISTS pagos_sistema"))
        db.commit()
        db.close()
        logger.info("‚úÖ Schema 'pagos_sistema' verificado/creado")
        return True
    except Exception as e:
        logger.error(f"‚ùå Error creando schema: {str(e)}")
        return False


def init_database() -> bool:
    """
    Inicializa la base de datos creando el schema y todas las tablas
    
    Returns:
        bool: True si la inicializaci√≥n fue exitosa
    """
    try:
        settings = get_settings()
        
        # ‚úÖ PASO 1: Crear schema primero
        logger.info("üîÑ Verificando schema...")
        if not create_schema():
            logger.error("‚ùå No se pudo crear el schema")
            return False
        
        # ‚úÖ PASO 2: Crear tablas
        logger.info("üîÑ Iniciando creaci√≥n de tablas...")
        
        # ‚úÖ CR√çTICO: Importar modelos AQU√ç DENTRO (lazy loading)
        # Esto evita el ciclo circular durante el startup
        from app.models.cliente import Cliente
        from app.models.prestamo import Prestamo
        from app.models.pago import Pago
        from app.models.user import User
        from app.models.auditoria import Auditoria
        from app.models.notificacion import Notificacion
        from app.models.aprobacion import Aprobacion
        
        # Crear todas las tablas
        Base.metadata.create_all(bind=engine)
        
        logger.info("‚úÖ Tablas creadas exitosamente")
        logger.info(f"üìä Total de tablas: {len(Base.metadata.tables)}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error inicializando base de datos: {str(e)}")
        import traceback
        traceback.print_exc()
        return False


def create_tables():
    """
    Funci√≥n auxiliar para crear tablas (sin logging extensivo)
    """
    try:
        # ‚úÖ Crear schema primero
        create_schema()
        
        # ‚úÖ Importar modelos dentro de la funci√≥n
        from app.models.cliente import Cliente
        from app.models.prestamo import Prestamo
        from app.models.pago import Pago
        from app.models.user import User
        from app.models.auditoria import Auditoria
        from app.models.notificacion import Notificacion
        from app.models.aprobacion import Aprobacion
        
        Base.metadata.create_all(bind=engine)
        return True
    except Exception as e:
        print(f"Error creando tablas: {str(e)}")
        return False
