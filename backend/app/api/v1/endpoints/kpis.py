# backend/app/api/v1/endpoints/kpis.py\nimport logging\nfrom datetime \nimport date, timedelta\nfrom decimal \nimport Decimal\nfrom typing \nimport Optional\nfrom fastapi \nimport APIRouter, Depends, Query\nfrom sqlalchemy \nimport case, func, or_\nfrom sqlalchemy.orm \nimport Session\nfrom app.api.deps \nimport get_current_user, get_db\nfrom app.models.amortizacion \nimport Cuota\nfrom app.models.analista \nimport Analista\nfrom app.models.cliente \nimport Cliente\nfrom app.models.pago \nimport Pago\nfrom app.models.user \nimport Userlogger = logging.getLogger(__name__)router = APIRouter()@router.get("/dashboard")\ndef dashboard_kpis_principales(    fecha_corte:\n Optional[date] = Query(        None, description="Fecha de corte (default:\n hoy)"    ),    db:\n Session = Depends(get_db),    current_user:\n User = Depends(get_current_user),):\n    """    KPIs principales para el dashboard    üìä KPIs mostrados:\n    - üí∞ Cartera Total    - ‚úÖ Clientes al D√≠a    - ‚ö†Ô∏è Clientes en Mora    - üìà Tasa de Morosidad    - üí∏ Cobrado Hoy    - üìÖ Vencimientos Hoy    """    if not fecha_corte:\n        fecha_corte = date.today()    # üí∞ CARTERA TOTAL    cartera_total = db.query(func.sum(Cliente.total_financiamiento)).filter(        Cliente.activo, Cliente.total_financiamiento.isnot(None)    ).scalar() or Decimal("0")    # ‚úÖ CLIENTES AL D√çA    clientes_al_dia = (        db.query(Cliente)        .filter(            Cliente.activo,            or_(Cliente.estado_financiero == "AL_DIA", Cliente.dias_mora == 0),        )        .count()    )    # ‚ö†Ô∏è CLIENTES EN MORA    clientes_en_mora = (        db.query(Cliente)        .filter(            Cliente.activo,            Cliente.estado_financiero == "MORA",            Cliente.dias_mora > 0,        )        .count()    )    # üìà TASA DE MOROSIDAD    total_clientes = clientes_al_dia + clientes_en_mora    tasa_morosidad = (        (clientes_en_mora / total_clientes * 100) if total_clientes > 0 else 0    )    # üí∏ COBRADO HOY    cobrado_hoy = db.query(func.sum(Pago.monto_pagado)).filter(        Pago.fecha_pago == fecha_corte, Pago.estado != "ANULADO"    ).scalar() or Decimal("0")    # üìÖ VENCIMIENTOS HOY    vencimientos_hoy = (        db.query(Cuota)        .filter(            Cuota.fecha_vencimiento == fecha_corte,            Cuota.estado.in_(["PENDIENTE", "PARCIAL"]),        )        .count()    )    return {        "fecha_corte":\n fecha_corte,        "kpis_principales":\n {            "cartera_total":\n {                "valor":\n float(cartera_total),                "formato":\n f"${float(cartera_total):\n,.0f}",                "icono":\n "üí∞",                "color":\n "primary",            },            "clientes_al_dia":\n {                "valor":\n clientes_al_dia,                "formato":\n f"{clientes_al_dia:\n,}",                "icono":\n "‚úÖ",                "color":\n "success",            },            "clientes_en_mora":\n {                "valor":\n clientes_en_mora,                "formato":\n f"{clientes_en_mora:\n,}",                "icono":\n "‚ö†Ô∏è",                "color":\n "warning",            },            "tasa_morosidad":\n {                "valor":\n round(tasa_morosidad, 2),                "formato":\n f"{tasa_morosidad:\n.2f}%",                "icono":\n "üìà",                "color":\n "danger" if tasa_morosidad > 10 else "warning",            },            "cobrado_hoy":\n {                "valor":\n float(cobrado_hoy),                "formato":\n f"${float(cobrado_hoy):\n,.0f}",                "icono":\n "üí∏",                "color":\n "success",            },            "vencimientos_hoy":\n {                "valor":\n vencimientos_hoy,                "formato":\n f"{vencimientos_hoy:\n,}",                "icono":\n "üìÖ",                "color":\n "info",            },        },        "resumen":\n {            "total_clientes":\n total_clientes,            "porcentaje_al_dia":\n (                round((clientes_al_dia / total_clientes * 100), 2)                if total_clientes > 0                else 0            ),            "porcentaje_mora":\n round(tasa_morosidad, 2),        },    }@router.get("/financieros")\ndef kpis_financieros(    periodo:\n str = Query("mes", description="dia, semana, mes, a√±o"),    fecha_inicio:\n Optional[date] = Query(None),    fecha_fin:\n Optional[date] = Query(None),    db:\n Session = Depends(get_db),    current_user:\n User = Depends(get_current_user),):\n    """    üìà KPIs Financieros    - Cartera total    - Total cobrado por per√≠odo    - Proyecci√≥n de flujo de caja    - Ingresos por per√≠odo    - Tasa de recuperaci√≥n    - Rentabilidad por modalidad    """    # Calcular fechas seg√∫n per√≠odo    hoy = date.today()    if not fecha_inicio or not fecha_fin:\n        if periodo == "dia":\n            fecha_inicio = fecha_fin = hoy        elif periodo == "semana":\n            fecha_inicio = hoy - timedelta(days=hoy.weekday())            fecha_fin = fecha_inicio + timedelta(days=6)        elif periodo == "mes":\n            fecha_inicio = hoy.replace(day=1)            fecha_fin = (fecha_inicio + timedelta(days=32)).replace(                day=1            ) - timedelta(days=1)        elif periodo == "a√±o":\n            fecha_inicio = hoy.replace(month=1, day=1)            fecha_fin = hoy.replace(month=12, day=31)    # Cartera total (saldos pendientes)    cartera_total = db.query(        func.sum(Cliente.total_financiamiento - Cliente.cuota_inicial)    ).filter(        Cliente.activo, Cliente.total_financiamiento.isnot(None)    ).scalar() or Decimal(        "0"    )    # Total cobrado en el per√≠odo    total_cobrado = db.query(func.sum(Pago.monto_pagado)).filter(        Pago.fecha_pago >= fecha_inicio,        Pago.fecha_pago <= fecha_fin,        Pago.estado != "ANULADO",    ).scalar() or Decimal("0")    # Proyecci√≥n pr√≥ximos 30 d√≠as    fecha_proyeccion = hoy + timedelta(days=30)    flujo_proyectado = db.query(func.sum(Cuota.monto_cuota)).filter(        Cuota.fecha_vencimiento >= hoy,        Cuota.fecha_vencimiento <= fecha_proyeccion,        Cuota.estado.in_(["PENDIENTE", "PARCIAL"]),    ).scalar() or Decimal("0")    # Ingresos por per√≠odo (capital + inter√©s + mora)    ingresos_capital = db.query(func.sum(Pago.monto_capital)).filter(        Pago.fecha_pago >= fecha_inicio, Pago.fecha_pago <= fecha_fin    ).scalar() or Decimal("0")    ingresos_interes = db.query(func.sum(Pago.monto_interes)).filter(        Pago.fecha_pago >= fecha_inicio, Pago.fecha_pago <= fecha_fin    ).scalar() or Decimal("0")    ingresos_mora = db.query(func.sum(Pago.monto_mora)).filter(        Pago.fecha_pago >= fecha_inicio, Pago.fecha_pago <= fecha_fin    ).scalar() or Decimal("0")    # Tasa de recuperaci√≥n    total_vencido = db.query(func.sum(Cuota.monto_cuota)).filter(        Cuota.fecha_vencimiento <= hoy,        Cuota.estado.in_(["PENDIENTE", "VENCIDA", "PARCIAL"]),    ).scalar() or Decimal("0")    tasa_recuperacion = (        (total_cobrado / total_vencido * 100) if total_vencido > 0 else 100    )    # Rentabilidad por modalidad    rentabilidad_modalidad = (        db.query(            Cliente.modalidad_pago,            func.count(Cliente.id).label("clientes"),            func.sum(Cliente.total_financiamiento).label("monto_total"),            func.avg(Cliente.total_financiamiento).label("ticket_promedio"),        )        .filter(Cliente.activo, Cliente.modalidad_pago.isnot(None))        .group_by(Cliente.modalidad_pago)        .all()    )    return {        "periodo":\n {            "tipo":\n periodo,            "fecha_inicio":\n fecha_inicio,            "fecha_fin":\n fecha_fin,        },        "kpis_financieros":\n {            "cartera_total":\n float(cartera_total),            "total_cobrado_periodo":\n float(total_cobrado),            "proyeccion_30_dias":\n float(flujo_proyectado),            "ingresos_detalle":\n {                "capital":\n float(ingresos_capital),                "interes":\n float(ingresos_interes),                "mora":\n float(ingresos_mora),                "total":\n float(                    ingresos_capital + ingresos_interes + ingresos_mora                ),            },            "tasa_recuperacion":\n round(float(tasa_recuperacion), 2),            "rentabilidad_por_modalidad":\n [                {                    "modalidad":\n modalidad,                    "clientes":\n clientes,                    "monto_total":\n float(monto),                    "ticket_promedio":\n float(ticket),                }                for modalidad, clientes, monto, ticket in rentabilidadmodalidad            ],        },    }@router.get("/cobranza")\ndef kpis_cobranza(    db:\n Session = Depends(get_db),    current_user:\n User = Depends(get_current_user),):\n    """    üë• KPIs de Cobranza    - Tasa de morosidad general    - Tasa de morosidad por analista    - Promedio de d√≠as de retraso    - Porcentaje de cumplimiento    - Top 10 clientes morosos    - Evoluci√≥n mensual    """    # Tasa de morosidad general    total_clientes = db.query(Cliente).filter(Cliente.activo).count()    clientes_mora = (        db.query(Cliente).filter(Cliente.activo, Cliente.dias_mora > 0).count()    )    clientes_al_dia = (        db.query(Cliente)        .filter(Cliente.activo, Cliente.dias_mora == 0)        .count()    )    tasa_morosidad_general = (        (clientes_mora / total_clientes * 100) if total_clientes > 0 else 0    )    # Tasa de morosidad por analista    morosidad_por_analista = (        db.query(            User.full_name,            func.count(Cliente.id).label("total_clientes"),            func.sum(case((Cliente.dias_mora > 0, 1), else_=0)).label(                "clientes_mora"            ),        )        .outerjoin(Cliente, Analista.id == Cliente.analista_id)        .filter(Analista.activo, Cliente.activo)        .group_by(User.id, User.full_name)        .all()    )    # Promedio de d√≠as de retraso    promedio_dias_mora = (        db.query(func.avg(Cliente.dias_mora))        .filter(Cliente.activo, Cliente.dias_mora > 0)        .scalar()        or 0    )    # Porcentaje de cumplimiento de pagos (cuotas pagadas a tiempo)    cuotas_vencidas = (        db.query(Cuota).filter(Cuota.fecha_vencimiento <= date.today()).count()    )    cuotas_pagadas_tiempo = (        db.query(Cuota)        .filter(            Cuota.estado == "PAGADA",            Cuota.fecha_pago <= Cuota.fecha_vencimiento,        )        .count()    )    porcentaje_cumplimiento = (        (cuotas_pagadas_tiempo / cuotas_vencidas * 100)        if cuotas_vencidas > 0        else 0    )    # Top 10 clientes morosos    top_morosos = (        db.query(            Cliente.id,            Cliente.nombres,            Cliente.apellidos,            Cliente.cedula,            Cliente.dias_mora,            Cliente.total_financiamiento,        )        .filter(Cliente.activo, Cliente.dias_mora > 0)        .order_by(Cliente.dias_mora.desc())        .limit(10)        .all()    )    # Evoluci√≥n mensual de mora (√∫ltimos 6 meses)    evolucion_mensual = []    for i in range(6):\n        mes_fecha = date.today().replace(day=1) - timedelta(days=30 * i)        # Simulaci√≥n - en implementaci√≥n real calcular√≠as hist√≥rico        evolucion_mensual.append(            {                "mes":\n mes_fecha.strftime("%Y-%m"),                "tasa_morosidad":\n round(tasa_morosidad_general - (i * 0.5), 2),                "clientes_mora":\n max(0, clientes_mora - (i * 10)),            }        )    return {        "kpis_cobranza":\n {            "tasa_morosidad_general":\n round(tasa_morosidad_general, 2),            "promedio_dias_retraso":\n round(float(promedio_dias_mora), 1),            "porcentaje_cumplimiento":\n round(porcentaje_cumplimiento, 2),            "clientes_al_dia_vs_mora":\n {                "al_dia":\n clientes_al_dia,                "en_mora":\n clientes_mora,                "total":\n total_clientes,            },        },        "morosidad_por_analista":\n [            {                "analista":\n analista,                "total_clientes":\n total,                "clientes_mora":\n mora,                "tasa_morosidad":\n (                    round((mora / total * 100), 2) if total > 0 else 0                ),            }            for analista, total, mora in morosidad_por_analista        ],        "top_clientes_morosos":\n [            {                "id":\n cliente_id,                "nombre":\n f"{nombres} {apellidos}",                "cedula":\n cedula,                "dias_mora":\n dias_mora,                "monto_financiamiento":\n float(monto or 0),            }            for cliente_id, nombres, apellidos, cedula, dias_mora, monto    in top_morosos        ],        "evolucion_mensual":\n evolucion_mensual,    }@router.get("/analistaes")\ndef kpis_analistaes(    db:\n Session = Depends(get_db),    current_user:\n User = Depends(get_current_user),):\n    """    üèÜ KPIs de Analistaes    - Ranking de ventas    - Gesti√≥n de cobranza    - Comparativa entre analistaes    """    # Ranking de ventas    ventas_por_analista = (        db.query(            User.id,            User.full_name,            func.count(Cliente.id).label("total_ventas"),            func.sum(Cliente.total_financiamiento).label("monto_vendido"),            func.avg(Cliente.total_financiamiento).label("ticket_promedio"),        )        .outerjoin(Cliente, Analista.id == Cliente.analista_id)        .filter(Analista.activo, Cliente.activo)        .group_by(User.id, User.full_name)        .order_by(func.sum(Cliente.total_financiamiento).desc())        .all()    )    # Gesti√≥n de cobranza por analista    cobranza_por_analista = (        db.query(            User.id,            User.full_name,            func.count(Cliente.id).label("total_clientes"),            func.sum(case((Cliente.dias_mora == 0, 1), else_=0)).label(                "clientes_al_dia"            ),            func.sum(case((Cliente.dias_mora > 0, 1), else_=0)).label(                "clientes_mora"            ),        )        .outerjoin(Cliente, Analista.id == Cliente.analista_id)        .filter(Analista.activo, Cliente.activo)        .group_by(User.id, User.full_name)        .all()    )    # Procesar datos para ranking    ranking_ventas = []    ranking_cobranza = []    for analista_id, nombre, ventas, monto, ticket in ventas_por_analista:\n        ranking_ventas.append(            {                "analista_id":\n analista_id,                "nombre":\n nombre,                "total_ventas":\n ventas or 0,                "monto_vendido":\n float(monto or 0),                "ticket_promedio":\n float(ticket or 0),            }        )    for analista_id, nombre, total, al_dia, mora in cobranza_por_analista:\n        tasa_cobro = (al_dia / total * 100) if total > 0 else 0        ranking_cobranza.append(            {                "analista_id":\n analista_id,                "nombre":\n nombre,                "total_clientes":\n total or 0,                "clientes_al_dia":\n al_dia or 0,                "clientes_mora":\n mora or 0,                "tasa_cobro":\n round(tasa_cobro, 2),            }        )    # Identificar mejores y peores    mejor_vendedor = (        max(ranking_ventas, key=lambda x:\n x["total_ventas"])        if ranking_ventas        else None    )    mayor_monto = (        max(ranking_ventas, key=lambda x:\n x["monto_vendido"])        if ranking_ventas        else None    )    menor_ventas = (        min(ranking_ventas, key=lambda x:\n x["total_ventas"])        if ranking_ventas        else None    )    mejor_cobrador = (        max(ranking_cobranza, key=lambda x:\n x["tasa_cobro"])        if ranking_cobranza        else None    )    peor_cobrador = (        min(ranking_cobranza, key=lambda x:\n x["tasa_cobro"])        if ranking_cobranza        else None    )    return {        "ranking_ventas":\n {            "mejor_vendedor_unidades":\n mejor_vendedor,            "mayor_monto_vendido":\n mayor_monto,            "menor_ventas":\n menor_ventas,            "todos_analistaes":\n ranking_ventas,        },        "gestion_cobranza":\n {            "mejor_cobrador":\n mejor_cobrador,            "peor_cobrador":\n peor_cobrador,            "todos_analistaes":\n ranking_cobranza,        },        "comparativa":\n {            "total_analistaes":\n len(ranking_ventas),            "promedio_ventas":\n (                sum(r["total_ventas"] for r in ranking_ventas)                / len(ranking_ventas)                if ranking_ventas                else 0            ),            "promedio_tasa_cobro":\n (                sum(r["tasa_cobro"] for r in ranking_cobranza)                / len(ranking_cobranza)                if ranking_cobranza                else 0            ),        },    }@router.get("/productos")\ndef kpis_productos(    db:\n Session = Depends(get_db),    current_user:\n User = Depends(get_current_user),):\n    """    üèçÔ∏è KPIs de Producto    - Modelo m√°s/menos vendido    - Ventas por modelo    - Ticket promedio por modelo    - Mora por modelo    """    # Ventas por modelo    ventas_por_modelo = (        db.query(            Cliente.modelo_vehiculo,            Cliente.marca_vehiculo,            func.count(Cliente.id).label("total_ventas"),            func.sum(Cliente.total_financiamiento).label("monto_total"),            func.avg(Cliente.total_financiamiento).label("ticket_promedio"),        )        .filter(Cliente.activo, Cliente.modelo_vehiculo.isnot(None))        .group_by(Cliente.modelo_vehiculo, Cliente.marca_vehiculo)        .all()    )    # Mora por modelo    mora_por_modelo = (        db.query(            Cliente.modelo_vehiculo,            func.count(Cliente.id).label("total_clientes"),            func.sum(case((Cliente.dias_mora > 0, 1), else_=0)).label(                "clientes_mora"            ),        )        .filter(Cliente.activo, Cliente.modelo_vehiculo.isnot(None))        .group_by(Cliente.modelo_vehiculo)        .all()    )    # Procesar datos    modelos_data = []    for modelo, marca, ventas, monto, ticket in ventas_por_modelo:\n        # Buscar datos de mora para este modelo        mora_data = next(            (m for m in mora_por_modelo if m[0] == modelo), (modelo, 0, 0)        )        tasa_mora_modelo = (            (mora_data[2] / mora_data[1] * 100) if mora_data[1] > 0 else 0        )        modelos_data.append(            {                "modelo":\n modelo,                "marca":\n marca,                "total_ventas":\n ventas,                "monto_total":\n float(monto),                "ticket_promedio":\n float(ticket),                "clientes_mora":\n mora_data[2],                "tasa_mora":\n round(tasa_mora_modelo, 2),            }        )    # Identificar extremos    modelo_mas_vendido = (        max(modelos_data, key=lambda x:\n x["total_ventas"])        if modelos_data        else None    )    modelo_menos_vendido = (        min(modelos_data, key=lambda x:\n x["total_ventas"])        if modelos_data        else None    )    return {        "modelo_mas_vendido":\n modelo_mas_vendido,        "modelo_menos_vendido":\n modelo_menos_vendido,        "ventas_por_modelo":\n modelos_data,        "grafico_barras":\n {            "labels":\n [f"{m['marca']} {m['modelo']}" for m in modelos_data],            "ventas":\n [m["total_ventas"] for m in modelos_data],            "montos":\n [m["monto_total"] for m in modelos_data],        },        "estadisticas":\n {            "total_modelos":\n len(modelos_data),            "ticket_promedio_general":\n (                sum(m["ticket_promedio"] for m in modelos_data)                / len(modelos_data)                if modelos_data                else 0            ),        },    }@router.get("/concesionarios")\ndef kpis_concesionarios(    db:\n Session = Depends(get_db),    current_user:\n User = Depends(get_current_user),):\n    """    üè¢ KPIs de Concesionario    - Ventas por concesionario    - Mora por concesionario    - Comparativa entre concesionarios    """    # Ventas por concesionario    ventas_por_concesionario = (        db.query(            Cliente.concesionario,            func.count(Cliente.id).label("total_ventas"),            func.sum(Cliente.total_financiamiento).label("monto_total"),            func.avg(Cliente.total_financiamiento).label("ticket_promedio"),        )        .filter(Cliente.activo, Cliente.concesionario.isnot(None))        .group_by(Cliente.concesionario)        .all()    )    # Mora por concesionario    mora_por_concesionario = (        db.query(            Cliente.concesionario,            func.count(Cliente.id).label("total_clientes"),            func.sum(case((Cliente.dias_mora > 0, 1), else_=0)).label(                "clientes_mora"            ),            func.avg(Cliente.dias_mora).label("promedio_dias_mora"),        )        .filter(Cliente.activo, Cliente.concesionario.isnot(None))        .group_by(Cliente.concesionario)        .all()    )    # Combinar datos    concesionarios_data = []    for concesionario, ventas, monto, ticket in ventas_por_concesionario:\n        # Buscar datos de mora        mora_data = next(            (m for m in mora_por_concesionario if m[0] == concesionario),            (concesionario, 0, 0, 0),        )        tasa_mora = (            (mora_data[2] / mora_data[1] * 100) if mora_data[1] > 0 else 0        )        concesionarios_data.append(            {                "concesionario":\n concesionario,                "total_ventas":\n ventas,                "monto_total":\n float(monto),                "ticket_promedio":\n float(ticket),                "clientes_mora":\n mora_data[2],                "tasa_mora":\n round(tasa_mora, 2),                "promedio_dias_mora":\n round(float(mora_data[3] or 0), 1),            }        )    # Ordenar por monto total    concesionarios_data.sort(key=lambda x:\n x["monto_total"], reverse=True)    return {        "ventas_por_concesionario":\n concesionarios_data,        "comparativa":\n {            "mejor_concesionario":\n (                concesionarios_data[0] if concesionarios_data else None            ),            "peor_tasa_mora":\n (                min(concesionarios_data, key=lambda x:\n x["tasa_mora"])                if concesionarios_data                else None            ),            "mayor_volumen":\n (                max(concesionarios_data, key=lambda x:\n x["monto_total"])                if concesionarios_data                else None            ),        },        "estadisticas_generales":\n {            "total_concesionarios":\n len(concesionarios_data),            "ticket_promedio_general":\n (                sum(c["ticket_promedio"] for c in concesionarios_data)                / len(concesionarios_data)                if concesionarios_data                else 0            ),            "tasa_mora_promedio":\n (                sum(c["tasa_mora"] for c in concesionarios_data)                / len(concesionarios_data)                if concesionarios_data                else 0            ),        },    }
