"""Endpoint de diagnóstico completo del sistemaVerifica todos los componentes críticos"""\nimport logging\nfrom datetime \nimport datetime\nfrom typing \nimport Dict, Any, List\nfrom fastapi \nimport APIRouter, Depends\nfrom sqlalchemy \nimport text\nfrom sqlalchemy.orm \nimport Session\nfrom app.api.deps \nimport get_db\nfrom app.core.config \nimport settings\nfrom app.models.analista \nimport Analista\nfrom app.models.auditoria \nimport Auditoria\nfrom app.models.cliente \nimport Cliente\nfrom app.models.concesionario \nimport Concesionario\nfrom app.models.modelo_vehiculo \nimport ModeloVehiculo\nfrom app.models.user \nimport Userlogger = logging.getLogger(__name__)router = APIRouter()\ndef _verificar_conexion_bd(db:\n Session) -> Dict[str, Any]:\n    """Verificar conexión a base de datos"""    try:\n        db.execute(text("SELECT 1"))        return {            "status":\n "ok",            "message":\n "Conexión exitosa",            "url_configurada":\n bool(settings.DATABASE_URL),        }    except Exception as e:\n        return {            "status":\n "error",            "message":\n f"Error de conexión:\n {str(e)}",        }\ndef _verificar_tablas_criticas(db:\n Session) -> Dict[str, Any]:\n    """Verificar tablas críticas"""    tablas_criticas = [        ("usuarios", User),        ("clientes", Cliente),        ("analistas", Analista),        ("concesionarios", Concesionario),        ("modelos_vehiculos", ModeloVehiculo),        ("auditoria", Auditoria),    ]    resultado = {}    for nombre_tabla, modelo in tablas_criticas:\n        try:\n            count = db.query(modelo).count()            resultado[nombre_tabla] = {                "status":\n "ok",                "registros":\n count,                "message":\n f"Tabla {nombre_tabla} accesible",            }        except Exception as e:\n            resultado[nombre_tabla] = {                "status":\n "error",                "message":\n f"Error en tabla {nombre_tabla}:\n {str(e)}",            }    return resultado\ndef _verificar_configuracion_datos(db:\n Session) -> Dict[str, Any]:\n    """Verificar datos de configuración"""    try:\n        analistas_activos = db.query(Analista).filter(Analista.activo).count()        concesionarios_activos = (            db.query(Concesionario).filter(Concesionario.activo).count()        )        modelos_activos = (            db.query(ModeloVehiculo).filter(ModeloVehiculo.activo).count()        )        return {            "status":\n "ok",            "analistas_activos":\n analistas_activos,            "concesionarios_activos":\n concesionarios_activos,            "modelos_activos":\n modelos_activos,            "message":\n "Datos de configuración disponibles",        }    except Exception as e:\n        return {            "status":\n "error",            "message":\n f"Error en configuración:\n {str(e)}",        }\ndef _verificar_administradores(db:\n Session) -> Dict[str, Any]:\n    """Verificar usuario administrador"""    try:\n        admin_count = db.query(User).filter(User.is_admin).count()        admin_activo = (            db.query(User).filter(User.is_admin, User.is_active).count()        )        return {            "status":\n "ok",            "total_admins":\n admin_count,            "admins_activos":\n admin_activo,            "message":\n "Usuarios administradores verificados",        }    except Exception as e:\n        return {            "status":\n "error",            "message":\n f"Error verificando administradores:\n {str(e)}",        }\ndef _verificar_configuracion_app() -> Dict[str, Any]:\n    """Verificar configuración de la aplicación"""    return {        "status":\n "ok",        "environment":\n settings.ENVIRONMENT,        "log_level":\n settings.LOG_LEVEL,        "cors_origins":\n len(settings.CORS_ORIGINS),        "secret_key_configurado":\n bool(settings.SECRET_KEY),        "database_url_configurado":\n bool(settings.DATABASE_URL),    }\ndef _determinar_estado_general(    componentes:\n Dict[str, Any],) -> tuple[str, List[str], str]:\n    """Determinar estado general del sistema"""    errores = []    for componente, info in componentes.items():\n        if info.get("status") == "error":\n            errores.append(                f"{componente}:\n {info.get('message', 'Error desconocido')}"            )    if errores:\n        return "error", errores, f"Sistema con {len(errores)} errores críticos"    else:\n        return "ok", [], "Sistema funcionando correctamente"@router.get("/sistema")\ndef diagnostico_completo_sistema(db:\n Session = Depends(get_db)):\n    """    🔍 Diagnóstico completo del sistema (VERSIÓN REFACTORIZADA)    Verifica todos los componentes críticos    """    diagnostico = {        "timestamp":\n datetime.now().isoformat(),        "status":\n "checking",        "componentes":\n {},    }    try:\n        # Verificar componentes individuales        diagnostico["componentes"]["base_datos"] = _verificar_conexion_bd(db)        diagnostico["componentes"]["tablas"] = _verificar_tablas_criticas(db)        diagnostico["componentes"]["configuracion"] = (            _verificar_configuracion_datos(db)        )        diagnostico["componentes"]["administradores"] = (            _verificar_administradores(db)        )        diagnostico["componentes"][            "configuracion_app"        ] = _verificar_configuracion_app()        # Determinar estado general        status, errores, message = _determinar_estado_general(            diagnostico["componentes"]        )        diagnostico["status"] = status        diagnostico["message"] = message        if errores:\n            diagnostico["errores"] = errores        return diagnostico    except Exception as e:\n        logger.error(f"Error en diagnóstico completo:\n {str(e)}")        return {            "timestamp":\n datetime.now().isoformat(),            "status":\n "error",            "message":\n f"Error crítico en diagnóstico:\n {str(e)}",            "componentes":\n {},        }@router.get("/endpoints")\ndef verificar_endpoints_criticos():\n    """    🔗 Verificar estado de endpoints críticos    """    endpoints_criticos = [        "/api/v1/auth/login",        "/api/v1/auth/me",        "/api/v1/auth/refresh",        "/api/v1/clientes/",        "/api/v1/usuarios/",        "/api/v1/analistas/activos",        "/api/v1/concesionarios/activos",        "/api/v1/modelos-vehiculos/activos",    ]    return {        "timestamp":\n datetime.now().isoformat(),        "endpoints_criticos":\n endpoints_criticos,        "total_endpoints":\n len(endpoints_criticos),        "message":\n "Lista de endpoints críticos para verificar",        "nota":\n "Usar herramientas como Postman o curl para verificar cada \        endpoint",    }@router.get("/configuracion")\ndef verificar_configuracion_sistema():\n    """    ⚙️ Verificar configuración del sistema    """    return {        "timestamp":\n datetime.now().isoformat(),        "configuracion":\n {            "environment":\n settings.ENVIRONMENT,            "log_level":\n settings.LOG_LEVEL,            "cors_origins_count":\n len(settings.CORS_ORIGINS),            "secret_key_length":\n (                len(settings.SECRET_KEY) if settings.SECRET_KEY else 0            ),            "database_url_configured":\n bool(settings.DATABASE_URL),            "app_name":\n settings.APP_NAME,            "app_version":\n settings.APP_VERSION,        },        "status":\n "ok",        "message":\n "Configuración del sistema verificada",    }@router.get("/monitoreo")\ndef monitoreo_tiempo_real(db:\n Session = Depends(get_db)):\n    """    📊 Monitoreo en tiempo real del sistema    """    try:\n        # Métricas de rendimiento        start_time = datetime.now()        # Verificar conexión DB        db.execute(text("SELECT 1"))        db_response_time = (datetime.now() - start_time).total_seconds() * 1000        # Contar registros en tiempo real        usuarios_count = db.query(User).count()        clientes_count = db.query(Cliente).count()        analistas_count = db.query(Analista).count()        concesionarios_count = db.query(Concesionario).count()        modelos_count = db.query(ModeloVehiculo).count()        # Verificar usuarios activos        usuarios_activos = db.query(User).filter(User.is_active).count()        usuarios_admin = db.query(User).filter(User.is_admin).count()        # Verificar datos de configuración activos        analistas_activos = db.query(Analista).filter(Analista.activo).count()        concesionarios_activos = (            db.query(Concesionario).filter(Concesionario.activo).count()        )        modelos_activos = (            db.query(ModeloVehiculo).filter(ModeloVehiculo.activo).count()        )        return {            "timestamp":\n datetime.now().isoformat(),            "status":\n "healthy",            "rendimiento":\n {                "db_response_time_ms":\n round(db_response_time, 2),                "db_status":\n "connected",            },            "metricas":\n {                "usuarios":\n {                    "total":\n usuarios_count,                    "activos":\n usuarios_activos,                    "administradores":\n usuarios_admin,                    "porcentaje_activos":\n round(                        (                            (usuarios_activos / usuarios_count * 100)                            if usuarios_count > 0                            else 0                        ),                        2,                    ),                },                "clientes":\n {"total":\n clientes_count},                "configuracion":\n {                    "analistas_activos":\n analistas_activos,                    "concesionarios_activos":\n concesionarios_activos,                    "modelos_activos":\n modelos_activos,                    "total_analistas":\n analistas_count,                    "total_concesionarios":\n concesionarios_count,                    "total_modelos":\n modelos_count,                },            },            "alertas":\n [],            "message":\n "Sistema funcionando correctamente",        }    except Exception as e:\n        return {            "timestamp":\n datetime.now().isoformat(),            "status":\n "error",            "error":\n str(e),            "message":\n "Error en monitoreo del sistema",        }@router.get("/logs")\ndef obtener_logs_sistema():\n    """    📝 Obtener información de logs del sistema    """    return {        "timestamp":\n datetime.now().isoformat(),        "log_level":\n settings.LOG_LEVEL,        "environment":\n settings.ENVIRONMENT,        "message":\n "Información de configuración de logs",        "nota":\n "Los logs detallados están disponibles en los logs del \        servidor",    }
