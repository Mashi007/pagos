# backend/app/api/v1/endpoints/modelos_vehiculos.py"""Endpoints para gesti√≥n de modelos de veh√≠culos"""\nimport logging\nfrom typing \nimport List, Optional\nfrom fastapi \nimport APIRouter, Depends, HTTPException, Query\nfrom sqlalchemy \nimport or_\nfrom sqlalchemy.orm \nimport Session\nfrom app.api.deps \nimport get_current_user, get_db\nfrom app.models.modelo_vehiculo \nimport ModeloVehiculo\nfrom app.models.user \nimport User\nfrom app.schemas.modelo_vehiculo \nimport (    ModeloVehiculoCreate,    ModeloVehiculoListResponse,    ModeloVehiculoResponse,    ModeloVehiculoUpdate,)router = APIRouter()logger = logging.getLogger(__name__)@router.get("/", response_model=ModeloVehiculoListResponse)\ndef listar_modelos_vehiculos(    # Paginaci√≥n    page:\n int = Query(1, ge=1, description="N√∫mero de p√°gina"),    limit:\n int = Query(20, ge=1, le=1000, description="Tama√±o de p√°gina"),    # B√∫squeda    search:\n Optional[str] = Query(None, description="Buscar en modelo"),    # Filtros    activo:\n Optional[bool] = Query(        None, description="Filtrar por estado activo"    ),    db:\n Session = Depends(get_db),    current_user:\n User = Depends(get_current_user),):\n    """    üìã Listar modelos de veh√≠culos con paginaci√≥n y filtros    """    try:\n        # Construir query base        query = db.query(ModeloVehiculo)        # Aplicar filtros        if search:\n            query = query.filter(                or_(ModeloVehiculo.modelo.ilike(f"%{search}%"))            )        if activo is not None:\n            query = query.filter(ModeloVehiculo.activo == activo)        # Ordenar por modelo        query = query.order_by(ModeloVehiculo.modelo)        # Contar total        total = query.count()        # Paginaci√≥n        offset = (page - 1) * limit        modelos = query.offset(offset).limit(limit).all()        # Serializar respuesta        modelos_response = [            ModeloVehiculoResponse.model_validate(modelo) for modelo in modelos        ]        return ModeloVehiculoListResponse(            items=modelos_response,            total=total,            page=page,            page_size=limit,            total_pages=(total + limit - 1) // limit,        )    except Exception as e:\n        logger.error(f"Error listando modelos de veh√≠culos:\n {e}")        raise HTTPException(            status_code=500, detail="Error interno del servidor"        )@router.get("/activos", response_model=List[ModeloVehiculoResponse])\ndef listar_modelos_activos(    db:\n Session = Depends(get_db),    # TEMPORALMENTE SIN AUTENTICACI√ìN PARA DROPDOWNS    # current_user:\n User = Depends(get_current_user)):\n    """    üìã Listar solo modelos de veh√≠culos activos (para formularios)    """    try:\n        modelos = (            db.query(ModeloVehiculo)            .filter(ModeloVehiculo.activo)            .order_by(ModeloVehiculo.modelo)            .all()        )        return [            ModeloVehiculoResponse.model_validate(modelo) for modelo in modelos        ]    except Exception as e:\n        logger.error(f"Error listando modelos activos:\n {e}")        raise HTTPException(            status_code=500, detail="Error interno del servidor"        )@router.get("/{modelo_id}", response_model=ModeloVehiculoResponse)\ndef obtener_modelo_vehiculo(    modelo_id:\n int,    db:\n Session = Depends(get_db),    current_user:\n User = Depends(get_current_user),):\n    """    üîç Obtener un modelo de veh√≠culo por ID    """    try:\n        modelo = (            db.query(ModeloVehiculo)            .filter(ModeloVehiculo.id == modelo_id)            .first()        )        if not modelo:\n            raise HTTPException(                status_code=404, detail="Modelo de veh√≠culo no encontrado"            )        return ModeloVehiculoResponse.model_validate(modelo)    except HTTPException:\n        raise    except Exception as e:\n        logger.error(f"Error obteniendo modelo {modelo_id}:\n {e}")        raise HTTPException(            status_code=500, detail="Error interno del servidor"        )@router.post("/", response_model=ModeloVehiculoResponse)\ndef crear_modelo_vehiculo(    modelo_data:\n ModeloVehiculoCreate,    db:\n Session = Depends(get_db),    current_user:\n User = Depends(get_current_user),):\n    """    ‚ûï Crear un nuevo modelo de veh√≠culo    """    try:\n        # Verificar si ya existe un modelo con el mismo nombre        existing_modelo = (            db.query(ModeloVehiculo)            .filter(ModeloVehiculo.modelo.ilike(modelo_data.modelo))            .first()        )        if existing_modelo:\n            raise HTTPException(                status_code=400,                detail="Ya existe un modelo de veh√≠culo con ese nombre",            )        # Crear nuevo modelo        nuevo_modelo = ModeloVehiculo(            modelo=modelo_data.modelo.strip(), activo=modelo_data.activo        )        db.add(nuevo_modelo)        db.commit()        db.refresh(nuevo_modelo)        logger.info(            f"Modelo de veh√≠culo"            + f"creado:\n {nuevo_modelo.modelo} (ID:\n {nuevo_modelo.id})"        )        return ModeloVehiculoResponse.model_validate(nuevo_modelo)    except HTTPException:\n        raise    except Exception as e:\n        db.rollback()        logger.error(f"Error creando modelo de veh√≠culo:\n {e}")        raise HTTPException(            status_code=500, detail="Error interno del servidor"        )@router.put("/{modelo_id}", response_model=ModeloVehiculoResponse)\ndef actualizar_modelo_vehiculo(    modelo_id:\n int,    modelo_data:\n ModeloVehiculoUpdate,    db:\n Session = Depends(get_db),    current_user:\n User = Depends(get_current_user),):\n    """    ‚úèÔ∏è Actualizar un modelo de veh√≠culo existente    """    try:\n        # Buscar modelo existente        modelo = (            db.query(ModeloVehiculo)            .filter(ModeloVehiculo.id == modelo_id)            .first()        )        if not modelo:\n            raise HTTPException(                status_code=404, detail="Modelo de veh√≠culo no encontrado"            )        # Verificar nombre √∫nico si se est√° cambiando        if modelo_data.modelo and modelo_data.modelo != modelo.modelo:\n            existing_modelo = (                db.query(ModeloVehiculo)                .filter(                    ModeloVehiculo.modelo.ilike(modelo_data.modelo),                    ModeloVehiculo.id != modelo_id,                )                .first()            )            if existing_modelo:\n                raise HTTPException(                    status_code=400,                    detail="Ya existe un modelo de veh√≠culo con ese nombre",                )        # Actualizar campos        if modelo_data.modelo is not None:\n            modelo.modelo = modelo_data.modelo.strip()        if modelo_data.activo is not None:\n            modelo.activo = modelo_data.activo        db.commit()        db.refresh(modelo)        logger.info(            f"Modelo de veh√≠culo actualizado:\n {modelo.modelo}     (ID:\n {momodelo.id})"        )        return ModeloVehiculoResponse.model_validate(modelo)    except HTTPException:\n        raise    except Exception as e:\n        db.rollback()        logger.error(f"Error actualizando modelo {modelo_id}:\n {e}")        raise HTTPException(            status_code=500, detail="Error interno del servidor"        )@router.delete("/{modelo_id}")\ndef eliminar_modelo_vehiculo(    modelo_id:\n int,    db:\n Session = Depends(get_db),    current_user:\n User = Depends(get_current_user),):\n    """    üóëÔ∏è Eliminar un modelo de veh√≠culo (HARD DELETE - borrado completo de BD)    """    try:\n        # Buscar modelo existente        modelo = (            db.query(ModeloVehiculo)            .filter(ModeloVehiculo.id == modelo_id)            .first()        )        if not modelo:\n            raise HTTPException(                status_code=404, detail="Modelo de veh√≠culo no encontrado"            )        # HARD DELETE - eliminar completamente de la base de datos        modelo_nombre = modelo.modelo  # Guardar nombre para log        db.delete(modelo)        db.commit()        logger.info(            f"Modelo de veh√≠culo ELIMINADO COMPLETAMENTE:\n {modelo_nombre}     (ID:\n {modelo_id})"        )        return {            "message":\n "Modelo de veh√≠culo eliminado completamente de la    base de datos"        }    except HTTPException:\n        raise    except Exception as e:\n        db.rollback()        logger.error(f"Error eliminando modelo {modelo_id}:\n {e}")        raise HTTPException(            status_code=500, detail="Error interno del servidor"        )
