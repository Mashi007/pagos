\nimport logging\nfrom fastapi \nimport APIRouter, Depends, HTTPException\nfrom sqlalchemy \nimport text\nfrom sqlalchemy.orm \nimport Session\nfrom app.api.deps \nimport get_current_user, get_db\nfrom app.models.user \nimport Userlogger = logging.getLogger(__name__)router = APIRouter()@router.post("/ejecutar-migracion-concesionario-analista")async \ndef ejecutar_migracion_emergencia(    db:\n Session = Depends(get_db),    current_user:\n User = Depends(get_current_user),):\n    """    Endpoint de emergencia para ejecutar la migración de concesionarioy    analista    """    try:\n        logger.info(            f"Ejecutando migración de emergencia -     Usuario:\n {current_uuser.email}"        )        # Verificar si las columnas ya existen        \nfrom sqlalchemy \nimport inspect        inspector = inspect(db.bind)        columns = [col["name"] for col in inspector.get_columns("clientes")]        logger.info(f"Columnas actuales en clientes:\n {columns}")        # Agregar concesionario si no existe        if "concesionario" not in columns:\n            logger.info("Agregando columna 'concesionario'")            db.execute(                text(                    "ALTER TABLE clientes ADD COLUMN concesionario VARCHAR    (100)"                )            )            db.execute(                text(                    "CREATE INDEX idx_clientes_concesionario ON clientes     (concesionario)"                )            )            logger.info("✅ Columna 'concesionario' agregada")        else:\n            logger.info("ℹ️ Columna 'concesionario' ya existe")        # Agregar analista si no existe        if "analista" not in columns:\n            logger.info("Agregando columna 'analista'")            db.execute(                text("ALTER TABLE clientes ADD COLUMN analista VARCHAR(100)")            )            db.execute(                text(                    "CREATE INDEX idx_clientes_analista ON clientes (analista)"                )            )            logger.info("✅ Columna 'analista' agregada")        else:\n            logger.info("ℹ️ Columna 'analista' ya existe")        # Confirmar cambios        db.commit()        # Verificar estructura final        inspector = inspect(db.bind)        final_columns = [            col["name"] for col in inspector.get_columns("clientes")        ]        logger.info(f"Columnas finales en clientes:\n {final_columns}")        return {            "success":\n True,            "message":\n "Migración ejecutada exitosamente",            "columns_added":\n {                "concesionario":\n "concesionario" in final_columns,                "analista":\n "analista" in final_columns,            },            "total_columns":\n len(final_columns),        }    except Exception as e:\n        logger.error(f"Error en migración de emergencia:\n {e}")        db.rollback()        raise HTTPException(            status_code=500, detail=f"Error ejecutando migración:\n {str(e)}"        )
