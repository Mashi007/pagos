# backend/app/api/v1/endpoints/configuracion.py
"""
Endpoint para configuraci√≥n administrativa del sistema.
Gesti√≥n de par√°metros, tasas, l√≠mites y ajustes generales.
"""
from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session
from typing import Optional, Dict, Any
from pydantic import BaseModel, Field
from decimal import Decimal
import logging
import json
from datetime import datetime

from app.db.session import get_db
from app.models.user import User
from app.models.cliente import Cliente
from app.models.configuracion_sistema import ConfiguracionSistema
from app.api.deps import get_current_user

logger = logging.getLogger(__name__)
router = APIRouter()


# ============================================
# MONITOREO Y OBSERVABILIDAD
# ============================================

@router.get("/monitoreo/estado")
def obtener_estado_monitoreo(
    current_user: User = Depends(get_current_user)
):
    """
    üîç Verificar estado del sistema de monitoreo y observabilidad
    """
    # Solo admin puede ver configuraci√≥n de monitoreo
    if not current_user.is_admin:
        raise HTTPException(status_code=403, detail="Solo administradores pueden ver configuraci√≥n de monitoreo")
    
    from app.core.monitoring import get_monitoring_status
    return get_monitoring_status()


@router.post("/monitoreo/habilitar")
def habilitar_monitoreo_basico(
    current_user: User = Depends(get_current_user)
):
    """
    ‚ö° Habilitar monitoreo b√°sico sin dependencias externas
    """
    if not current_user.is_admin:
        raise HTTPException(status_code=403, detail="Solo administradores pueden configurar monitoreo")
    
    try:
        # Configurar logging estructurado b√°sico
        import logging
        
        # Configurar formato mejorado
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - [%(filename)s:%(lineno)d] - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        
        # Logger espec√≠fico para el sistema de financiamiento
        finance_logger = logging.getLogger("financiamiento_automotriz")
        finance_logger.setLevel(logging.INFO)
        
        return {
            "mensaje": "‚úÖ Monitoreo b√°sico habilitado",
            "configuracion": {
                "logging_estructurado": "‚úÖ Habilitado",
                "nivel_log": "INFO",
                "formato": "Timestamp + Archivo + L√≠nea + Mensaje",
                "logger_especifico": "financiamiento_automotriz"
            },
            "beneficios": [
                "üìã Logs m√°s detallados y estructurados",
                "üîç Mejor debugging de errores",
                "üìä Tracking b√°sico de operaciones",
                "‚ö° Sin dependencias externas adicionales"
            ],
            "siguiente_paso": "Configurar Sentry y Prometheus para monitoreo avanzado"
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error habilitando monitoreo: {str(e)}")


# ============================================
# CONFIGURACI√ìN CENTRALIZADA DEL SISTEMA
# ============================================

@router.get("/sistema/completa")
def obtener_configuracion_completa(
    categoria: Optional[str] = Query(None, description="Filtrar por categor√≠a"),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    üîß Obtener configuraci√≥n completa del sistema para el frontend
    """
    # Solo admin puede ver configuraci√≥n completa
    if not current_user.is_admin:
        raise HTTPException(status_code=403, detail="Solo administradores pueden ver configuraci√≥n completa")
    
    try:
        from app.models.configuracion_sistema import ConfiguracionSistema
        from datetime import datetime
        
        query = db.query(ConfiguracionSistema).filter(
            ConfiguracionSistema.visible_frontend == True
        )
        
        if categoria:
            query = query.filter(ConfiguracionSistema.categoria == categoria)
        
        configs = query.all()
        
        # Agrupar por categor√≠a
        configuracion_agrupada = {}
        for config in configs:
            if config.categoria not in configuracion_agrupada:
                configuracion_agrupada[config.categoria] = {}
            
            configuracion_agrupada[config.categoria][config.clave] = {
                "valor": config.valor_procesado,
                "descripcion": config.descripcion,
                "tipo_dato": config.tipo_dato,
                "requerido": config.requerido,
                "solo_lectura": config.solo_lectura,
                "opciones_validas": json.loads(config.opciones_validas) if config.opciones_validas else None,
                "valor_minimo": config.valor_minimo,
                "valor_maximo": config.valor_maximo,
                "patron_validacion": config.patron_validacion,
                "actualizado_en": config.actualizado_en,
                "actualizado_por": config.actualizado_por
            }
        
        return {
            "titulo": "üîß CONFIGURACI√ìN COMPLETA DEL SISTEMA",
            "fecha_consulta": datetime.now().isoformat(),
            "consultado_por": current_user.full_name,
            "configuracion": configuracion_agrupada,
            "categorias_disponibles": list(configuracion_agrupada.keys()),
            "total_configuraciones": len(configs)
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error obteniendo configuraci√≥n: {str(e)}")


@router.get("/validadores")
def obtener_configuracion_validadores():
    """
    üîç Obtener configuraci√≥n completa de validadores para el m√≥dulo de configuraci√≥n
    """
    try:
        from app.services.validators_service import (
            ValidadorTelefono, ValidadorCedula, ValidadorFecha, ValidadorEmail
        )
        
        return {
            "titulo": "üîç CONFIGURACI√ìN DE VALIDADORES",
            "fecha_consulta": datetime.now().isoformat(),
            "consultado_por": "Sistema",
            
            "validadores_disponibles": {
                "telefono": {
                    "descripcion": "Validaci√≥n y formateo de n√∫meros telef√≥nicos",
                    "paises_soportados": {
                        "venezuela": {
                            "codigo": "+58",
                            "formato": "+58 XXXXXXXXXX",
                            "requisitos": {
                                "debe_empezar_por": "+58",
                                "longitud_total": "10 d√≠gitos",
                                "primer_digito": "No puede ser 0",
                                "digitos_validos": "0-9"
                            },
                            "ejemplos_validos": [
                                "1234567890 ‚Üí +581234567890",
                                "4241234567 ‚Üí +584241234567",
                                "+581234567890"
                            ],
                            "ejemplos_invalidos": [
                                "0123456789 (empieza por 0)",
                                "123456789 (9 d√≠gitos)",
                                "12345678901 (11 d√≠gitos)"
                            ]
                        }
                    },
                    "auto_formateo": True,
                    "validacion_tiempo_real": True
                },
                
                "cedula": {
                    "descripcion": "Validaci√≥n de c√©dulas por pa√≠s",
                    "paises_soportados": {
                        "venezuela": {
                            "prefijos_validos": ["V", "E", "J"],
                            "longitud": "7-10 d√≠gitos",
                            "requisitos": {
                                "prefijos": "V=Venezolano, E=Extranjero, J=Jur√≠dico",
                                "d√≠gitos": "Solo n√∫meros del 0 al 9",
                                "longitud": "Entre 7 y 10 d√≠gitos"
                            },
                            "ejemplos_validos": [
                                "V1234567 (7 d√≠gitos)",
                                "E12345678 (8 d√≠gitos)",
                                "J123456789 (9 d√≠gitos)",
                                "V1234567890 (10 d√≠gitos)"
                            ],
                            "ejemplos_invalidos": [
                                "G12345678 (prefijo G no v√°lido)",
                                "V123456 (6 d√≠gitos)",
                                "V12345678901 (11 d√≠gitos)"
                            ]
                        }
                    },
                    "auto_formateo": True,
                    "validacion_tiempo_real": True
                },
                
                "fecha": {
                    "descripcion": "Validaci√≥n estricta de fechas",
                    "formato_requerido": "DD/MM/YYYY",
                    "requisitos": {
                        "dia": "2 d√≠gitos (01-31)",
                        "mes": "2 d√≠gitos (01-12)",
                        "a√±o": "4 d√≠gitos (1900-2100)",
                        "separador": "/ (barra)"
                    },
                    "ejemplos_validos": [
                        "01/01/2024",
                        "15/03/2024",
                        "29/02/2024 (a√±o bisiesto)",
                        "31/12/2024"
                    ],
                    "ejemplos_invalidos": [
                        "1/1/2024 (d√≠a y mes sin cero inicial)",
                        "01-01-2024 (separador gui√≥n)",
                        "2024-01-01 (formato YYYY-MM-DD)",
                        "32/01/2024 (d√≠a inv√°lido)"
                    ],
                    "auto_formateo": False,
                    "validacion_tiempo_real": True,
                    "requiere_calendario": True
                },
                
                "email": {
                    "descripcion": "Validaci√≥n y normalizaci√≥n de emails",
                    "caracteristicas": {
                        "normalizacion": "Conversi√≥n autom√°tica a min√∫sculas",
                        "limpieza": "Remoci√≥n autom√°tica de espacios",
                        "validacion": "RFC 5322 est√°ndar",
                        "dominios_bloqueados": [
                            "tempmail.org",
                            "10minutemail.com", 
                            "guerrillamail.com",
                            "mailinator.com",
                            "throwaway.email"
                        ]
                    },
                    "ejemplos_validos": [
                        "USUARIO@EJEMPLO.COM ‚Üí usuario@ejemplo.com",
                        " Usuario@Ejemplo.com  ‚Üí usuario@ejemplo.com",
                        "usuario.nombre@dominio.com",
                        "usuario+tag@ejemplo.com"
                    ],
                    "ejemplos_invalidos": [
                        "usuario@ (sin dominio)",
                        "@ejemplo.com (sin usuario)",
                        "usuario@tempmail.org (dominio bloqueado)",
                        "usuario@ (formato inv√°lido)"
                    ],
                    "auto_formateo": True,
                    "validacion_tiempo_real": True
                }
            },
            
            "reglas_negocio": {
                "fecha_entrega": "Desde hace 2 a√±os hasta 4 a√±os en el futuro",
                "fecha_pago": "M√°ximo 1 d√≠a en el futuro",
                "monto_pago": "No puede exceder saldo pendiente",
                "total_financiamiento": "Entre $1 y $50,000,000",
                "amortizaciones": "Entre 1 y 84 meses",
                "cedula_venezuela": "Prefijos V/E/J + 7-10 d√≠gitos del 0-9",
                "telefono_venezuela": "+58 + 10 d√≠gitos (primer d√≠gito no puede ser 0)",
                "fecha_formato": "DD/MM/YYYY (d√≠a 2 d√≠gitos, mes 2 d√≠gitos, a√±o 4 d√≠gitos)",
                "email_normalizacion": "Conversi√≥n autom√°tica a min√∫sculas (incluyendo @)"
            },
            
            "configuracion_frontend": {
                "validacion_onchange": "Validar al cambiar valor",
                "formateo_onkeyup": "Formatear mientras escribe",
                "mostrar_errores": "Mostrar errores en tiempo real",
                "auto_formateo": "Formatear autom√°ticamente al perder foco",
                "sugerencias": "Mostrar sugerencias de formato"
            },
            
            "endpoints_validacion": {
                "validar_campo": "POST /api/v1/validadores/validar-campo",
                "corregir_datos": "POST /api/v1/validadores/corregir-datos",
                "configuracion": "GET /api/v1/validadores/configuracion",
                "verificacion": "GET /api/v1/validadores/verificacion-validadores"
            }
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error obteniendo configuraci√≥n de validadores: {str(e)}")


@router.post("/validadores/probar")
def probar_validadores(
    datos_prueba: Dict[str, Any]
):
    """
    üß™ Probar validadores con datos de ejemplo
    """
    try:
        from app.services.validators_service import (
            ValidadorTelefono, ValidadorCedula, ValidadorFecha, ValidadorEmail
        )
        
        resultados = {}
        
        # Probar tel√©fono
        if "telefono" in datos_prueba:
            telefono = datos_prueba["telefono"]
            pais = datos_prueba.get("pais_telefono", "VENEZUELA")
            resultados["telefono"] = ValidadorTelefono.validar_y_formatear_telefono(telefono, pais)
        
        # Probar c√©dula
        if "cedula" in datos_prueba:
            cedula = datos_prueba["cedula"]
            pais = datos_prueba.get("pais_cedula", "VENEZUELA")
            resultados["cedula"] = ValidadorCedula.validar_y_formatear_cedula(cedula, pais)
        
        # Probar fecha
        if "fecha" in datos_prueba:
            fecha = datos_prueba["fecha"]
            resultados["fecha"] = ValidadorFecha.validar_fecha_entrega(fecha)
        
        # Probar email
        if "email" in datos_prueba:
            email = datos_prueba["email"]
            resultados["email"] = ValidadorEmail.validar_email(email)
        
        return {
            "titulo": "üß™ RESULTADOS DE PRUEBA DE VALIDADORES",
            "fecha_prueba": datetime.now().isoformat(),
            "datos_entrada": datos_prueba,
            "resultados": resultados,
            "resumen": {
                "total_validados": len(resultados),
                "validos": sum(1 for r in resultados.values() if r.get("valido", False)),
                "invalidos": sum(1 for r in resultados.values() if not r.get("valido", False))
            }
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error probando validadores: {str(e)}")


@router.get("/sistema/categoria/{categoria}")
def obtener_configuracion_categoria(
    categoria: str,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    üìã Obtener configuraci√≥n de una categor√≠a espec√≠fica
    """
    try:
        from app.models.configuracion_sistema import ConfiguracionSistema
        
        configs = db.query(ConfiguracionSistema).filter(
            ConfiguracionSistema.categoria == categoria.upper(),
            ConfiguracionSistema.visible_frontend == True
        ).all()
        
        if not configs:
            raise HTTPException(status_code=404, detail=f"Categor√≠a '{categoria}' no encontrada")
        
        configuracion = {}
        for config in configs:
            configuracion[config.clave] = {
                "valor": config.valor_procesado,
                "descripcion": config.descripcion,
                "tipo_dato": config.tipo_dato,
                "requerido": config.requerido,
                "solo_lectura": config.solo_lectura,
                "opciones_validas": json.loads(config.opciones_validas) if config.opciones_validas else None,
                "valor_minimo": config.valor_minimo,
                "valor_maximo": config.valor_maximo,
                "patron_validacion": config.patron_validacion
            }
        
        return {
            "categoria": categoria.upper(),
            "configuracion": configuracion,
            "total_items": len(configs),
            "fecha_consulta": datetime.now().isoformat()
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error obteniendo configuraci√≥n de categor√≠a: {str(e)}")


@router.post("/sistema/actualizar")
def actualizar_configuracion_sistema(
    configuraciones: Dict[str, Dict[str, Any]],
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    ‚úèÔ∏è Actualizar configuraciones del sistema
    
    Formato:
    {
        "AI": {
            "OPENAI_API_KEY": "sk-...",
            "AI_SCORING_ENABLED": true
        },
        "EMAIL": {
            "SMTP_HOST": "smtp.gmail.com",
            "SMTP_USERNAME": "empresa@gmail.com"
        }
    }
    """
    # Solo admin puede actualizar configuraci√≥n
    if not current_user.is_admin:
        raise HTTPException(status_code=403, detail="Solo administradores pueden actualizar configuraci√≥n")
    
    try:
        from app.models.configuracion_sistema import ConfiguracionSistema
        
        actualizaciones_exitosas = []
        errores = []
        
        for categoria, configs in configuraciones.items():
            for clave, nuevo_valor in configs.items():
                try:
                    # Buscar configuraci√≥n existente
                    config = db.query(ConfiguracionSistema).filter(
                        ConfiguracionSistema.categoria == categoria.upper(),
                        ConfiguracionSistema.clave == clave.upper()
                    ).first()
                    
                    if not config:
                        errores.append(f"Configuraci√≥n {categoria}.{clave} no encontrada")
                        continue
                    
                    if config.solo_lectura:
                        errores.append(f"Configuraci√≥n {categoria}.{clave} es de solo lectura")
                        continue
                    
                    # Validar nuevo valor
                    error_validacion = _validar_configuracion(config, nuevo_valor)
                    if error_validacion:
                        errores.append(f"{categoria}.{clave}: {error_validacion}")
                        continue
                    
                    # Actualizar valor
                    valor_anterior = config.valor_procesado
                    config.actualizar_valor(nuevo_valor, current_user.full_name)
                    
                    actualizaciones_exitosas.append({
                        "categoria": categoria,
                        "clave": clave,
                        "valor_anterior": valor_anterior,
                        "valor_nuevo": config.valor_procesado
                    })
                    
                except Exception as e:
                    errores.append(f"Error actualizando {categoria}.{clave}: {str(e)}")
        
        # Confirmar cambios si no hay errores cr√≠ticos
        if len(errores) < len(actualizaciones_exitosas):
            db.commit()
            
            # Registrar en auditor√≠a
            from app.models.auditoria import Auditoria, TipoAccion
            auditoria = Auditoria.registrar(
                usuario_id=current_user.id,
                accion=TipoAccion.ACTUALIZACION,
                entidad="configuracion_sistema",
                entidad_id=None,
                detalles=f"Actualizadas {len(actualizaciones_exitosas)} configuraciones"
            )
            db.add(auditoria)
            db.commit()
        else:
            db.rollback()
        
        return {
            "mensaje": "‚úÖ Configuraciones actualizadas" if actualizaciones_exitosas else "‚ùå No se pudo actualizar ninguna configuraci√≥n",
            "actualizaciones_exitosas": len(actualizaciones_exitosas),
            "errores": len(errores),
            "detalle_actualizaciones": actualizaciones_exitosas,
            "detalle_errores": errores,
            "fecha_actualizacion": datetime.now().isoformat(),
            "actualizado_por": current_user.full_name
        }
        
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=f"Error actualizando configuraciones: {str(e)}")


@router.post("/sistema/probar-integracion/{categoria}")
def probar_integracion(
    categoria: str,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    üß™ Probar integraci√≥n de una categor√≠a espec√≠fica
    """
    if not current_user.is_admin:
        raise HTTPException(status_code=403, detail="Solo administradores pueden probar integraciones")
    
    try:
        categoria = categoria.upper()
        
        if categoria == "EMAIL":
            return _probar_configuracion_email(db)
        elif categoria == "WHATSAPP":
            return _probar_configuracion_whatsapp(db)
        elif categoria == "AI":
            return _probar_configuracion_ai(db)
        elif categoria == "DATABASE":
            return _probar_configuracion_database(db)
        else:
            raise HTTPException(status_code=400, detail=f"Categor√≠a '{categoria}' no soporta pruebas autom√°ticas")
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error probando integraci√≥n: {str(e)}")


@router.get("/sistema/estado-servicios")
def obtener_estado_servicios(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    üìä Obtener estado de todos los servicios configurados
    """
    try:
        from app.models.configuracion_sistema import ConfigHelper
        
        estado_servicios = {
            "ai": {
                "habilitado": ConfigHelper.is_ai_enabled(db),
                "configurado": bool(ConfigHelper.get_config(db, "AI", "OPENAI_API_KEY")),
                "estado": "‚úÖ ACTIVO" if ConfigHelper.is_ai_enabled(db) else "‚ùå INACTIVO"
            },
            "email": {
                "habilitado": True,  # Siempre habilitado
                "configurado": ConfigHelper.is_email_configured(db),
                "estado": "‚úÖ CONFIGURADO" if ConfigHelper.is_email_configured(db) else "‚ö†Ô∏è PENDIENTE"
            },
            "whatsapp": {
                "habilitado": ConfigHelper.is_whatsapp_enabled(db),
                "configurado": bool(ConfigHelper.get_config(db, "WHATSAPP", "META_ACCESS_TOKEN")),
                "estado": "‚úÖ ACTIVO" if ConfigHelper.is_whatsapp_enabled(db) else "‚ùå INACTIVO",
                "provider": "META_CLOUD_API"
            },
            "database": {
                "habilitado": True,
                "configurado": True,
                "estado": "‚úÖ CONECTADA"
            },
            "monitoreo": {
                "habilitado": bool(ConfigHelper.get_config(db, "MONITOREO", "SENTRY_DSN")),
                "configurado": bool(ConfigHelper.get_config(db, "MONITOREO", "SENTRY_DSN")),
                "estado": "‚úÖ ACTIVO" if ConfigHelper.get_config(db, "MONITOREO", "SENTRY_DSN") else "‚ùå INACTIVO"
            }
        }
        
        # Calcular estado general
        servicios_activos = sum(1 for s in estado_servicios.values() if "‚úÖ" in s["estado"])
        total_servicios = len(estado_servicios)
        
        return {
            "titulo": "üìä ESTADO DE SERVICIOS DEL SISTEMA",
            "fecha_consulta": datetime.now().isoformat(),
            "estado_general": {
                "servicios_activos": servicios_activos,
                "total_servicios": total_servicios,
                "porcentaje_activo": round(servicios_activos / total_servicios * 100, 1),
                "estado": "‚úÖ √ìPTIMO" if servicios_activos == total_servicios else "‚ö†Ô∏è PARCIAL" if servicios_activos > 0 else "‚ùå CR√çTICO"
            },
            "servicios": estado_servicios,
            "recomendaciones": _generar_recomendaciones_configuracion(estado_servicios)
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error obteniendo estado de servicios: {str(e)}")


@router.post("/sistema/inicializar-defaults")
def inicializar_configuraciones_default(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    üîß Inicializar configuraciones por defecto del sistema
    """
    if not current_user.is_admin:
        raise HTTPException(status_code=403, detail="Solo administradores pueden inicializar configuraciones")
    
    try:
        from app.models.configuracion_sistema import ConfiguracionPorDefecto
        
        # Crear configuraciones por defecto
        ConfiguracionPorDefecto.crear_configuraciones_default(db)
        
        # Contar configuraciones creadas
        total_configs = db.query(ConfiguracionSistema).count()
        
        return {
            "mensaje": "‚úÖ Configuraciones por defecto inicializadas exitosamente",
            "total_configuraciones": total_configs,
            "categorias_creadas": [
                "AI - Inteligencia Artificial",
                "EMAIL - Configuraci√≥n de correo",
                "WHATSAPP - Configuraci√≥n de WhatsApp",
                "ROLES - Roles y permisos",
                "FINANCIERO - Par√°metros financieros",
                "NOTIFICACIONES - Configuraci√≥n de notificaciones",
                "SEGURIDAD - Configuraci√≥n de seguridad",
                "DATABASE - Configuraci√≥n de base de datos",
                "REPORTES - Configuraci√≥n de reportes",
                "INTEGRACIONES - Integraciones externas",
                "MONITOREO - Monitoreo y observabilidad",
                "APLICACION - Configuraci√≥n general"
            ],
            "siguiente_paso": "Configurar cada categor√≠a seg√∫n las necesidades",
            "fecha_inicializacion": datetime.now().isoformat()
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error inicializando configuraciones: {str(e)}")


# ============================================
# CONFIGURACI√ìN DE IA
# ============================================

@router.get("/ia")
def obtener_configuracion_ia(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    ü§ñ Obtener configuraci√≥n de Inteligencia Artificial
    """
    try:
        from app.models.configuracion_sistema import ConfiguracionSistema
        
        configs_ia = db.query(ConfiguracionSistema).filter(
            ConfiguracionSistema.categoria == "AI",
            ConfiguracionSistema.visible_frontend == True
        ).all()
        
        configuracion = {}
        for config in configs_ia:
            # Ocultar tokens completos por seguridad
            valor_mostrar = config.valor_procesado
            if config.tipo_dato == "PASSWORD" and config.valor:
                valor_mostrar = f"{'*' * (len(config.valor) - 4)}{config.valor[-4:]}" if len(config.valor) > 4 else "****"
            
            configuracion[config.clave] = {
                "valor": valor_mostrar,
                "valor_real": config.valor_procesado if config.tipo_dato != "PASSWORD" else None,
                "descripcion": config.descripcion,
                "tipo_dato": config.tipo_dato,
                "requerido": config.requerido,
                "configurado": bool(config.valor),
                "opciones_validas": json.loads(config.opciones_validas) if config.opciones_validas else None
            }
        
        # Estado de funcionalidades IA
        estado_ia = {
            "scoring_crediticio": {
                "habilitado": configuracion.get("AI_SCORING_ENABLED", {}).get("valor", False),
                "configurado": bool(configuracion.get("OPENAI_API_KEY", {}).get("valor_real")),
                "descripcion": "Sistema de scoring crediticio autom√°tico"
            },
            "prediccion_mora": {
                "habilitado": configuracion.get("AI_PREDICTION_ENABLED", {}).get("valor", False),
                "configurado": True,  # No requiere configuraci√≥n externa
                "descripcion": "Predicci√≥n de mora con Machine Learning"
            },
            "chatbot": {
                "habilitado": configuracion.get("AI_CHATBOT_ENABLED", {}).get("valor", False),
                "configurado": bool(configuracion.get("OPENAI_API_KEY", {}).get("valor_real")),
                "descripcion": "Chatbot inteligente para cobranza"
            }
        }
        
        return {
            "titulo": "ü§ñ CONFIGURACI√ìN DE INTELIGENCIA ARTIFICIAL",
            "configuracion": configuracion,
            "estado_funcionalidades": estado_ia,
            "instrucciones": {
                "openai_api_key": "Obtener en https://platform.openai.com/api-keys",
                "formato_token": "Debe comenzar con 'sk-' seguido de 48 caracteres",
                "costo_estimado": "$0.002 por 1K tokens (muy econ√≥mico)",
                "beneficios": [
                    "Scoring crediticio automatizado",
                    "Predicci√≥n de mora con 87% precisi√≥n",
                    "Mensajes personalizados para cobranza",
                    "Recomendaciones inteligentes"
                ]
            }
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error obteniendo configuraci√≥n IA: {str(e)}")


@router.post("/ia/actualizar")
def actualizar_configuracion_ia(
    openai_api_key: Optional[str] = None,
    openai_model: Optional[str] = None,
    scoring_enabled: Optional[bool] = None,
    prediction_enabled: Optional[bool] = None,
    chatbot_enabled: Optional[bool] = None,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    ü§ñ Actualizar configuraci√≥n de IA
    """
    if not current_user.is_admin:
        raise HTTPException(status_code=403, detail="Solo administradores pueden configurar IA")
    
    try:
        from app.models.configuracion_sistema import ConfiguracionSistema
        
        actualizaciones = []
        
        # Actualizar API Key de OpenAI
        if openai_api_key is not None:
            config = ConfiguracionSistema.obtener_por_clave(db, "AI", "OPENAI_API_KEY")
            if config:
                config.actualizar_valor(openai_api_key, current_user.full_name)
                actualizaciones.append("OPENAI_API_KEY")
        
        # Actualizar modelo
        if openai_model is not None:
            config = ConfiguracionSistema.obtener_por_clave(db, "AI", "OPENAI_MODEL")
            if config:
                config.actualizar_valor(openai_model, current_user.full_name)
                actualizaciones.append("OPENAI_MODEL")
        
        # Actualizar habilitaciones
        if scoring_enabled is not None:
            config = ConfiguracionSistema.obtener_por_clave(db, "AI", "AI_SCORING_ENABLED")
            if config:
                config.actualizar_valor(scoring_enabled, current_user.full_name)
                actualizaciones.append("AI_SCORING_ENABLED")
        
        if prediction_enabled is not None:
            config = ConfiguracionSistema.obtener_por_clave(db, "AI", "AI_PREDICTION_ENABLED")
            if config:
                config.actualizar_valor(prediction_enabled, current_user.full_name)
                actualizaciones.append("AI_PREDICTION_ENABLED")
        
        if chatbot_enabled is not None:
            config = ConfiguracionSistema.obtener_por_clave(db, "AI", "AI_CHATBOT_ENABLED")
            if config:
                config.actualizar_valor(chatbot_enabled, current_user.full_name)
                actualizaciones.append("AI_CHATBOT_ENABLED")
        
        db.commit()
        
        return {
            "mensaje": "‚úÖ Configuraci√≥n de IA actualizada exitosamente",
            "configuraciones_actualizadas": actualizaciones,
            "fecha_actualizacion": datetime.now().isoformat(),
            "actualizado_por": current_user.full_name,
            "siguiente_paso": "Probar funcionalidades IA en el dashboard"
        }
        
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=f"Error actualizando configuraci√≥n IA: {str(e)}")


# ============================================
# CONFIGURACI√ìN DE EMAIL
# ============================================

@router.get("/email")
def obtener_configuracion_email(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    üìß Obtener configuraci√≥n de email
    """
    try:
        from app.models.configuracion_sistema import ConfiguracionSistema
        
        configs_email = db.query(ConfiguracionSistema).filter(
            ConfiguracionSistema.categoria == "EMAIL"
        ).all()
        
        configuracion = {}
        for config in configs_email:
            valor_mostrar = config.valor_procesado
            if config.tipo_dato == "PASSWORD" and config.valor:
                valor_mostrar = "****" + config.valor[-4:] if len(config.valor) > 4 else "****"
            
            configuracion[config.clave] = {
                "valor": valor_mostrar,
                "descripcion": config.descripcion,
                "tipo_dato": config.tipo_dato,
                "requerido": config.requerido,
                "configurado": bool(config.valor)
            }
        
        return {
            "titulo": "üìß CONFIGURACI√ìN DE EMAIL",
            "configuracion": configuracion,
            "proveedores_soportados": {
                "gmail": {
                    "smtp_host": "smtp.gmail.com",
                    "smtp_port": 587,
                    "requiere_app_password": True,
                    "instrucciones": "Usar App Password, no contrase√±a normal"
                },
                "outlook": {
                    "smtp_host": "smtp-mail.outlook.com",
                    "smtp_port": 587,
                    "requiere_app_password": False,
                    "instrucciones": "Usar credenciales normales"
                },
                "yahoo": {
                    "smtp_host": "smtp.mail.yahoo.com",
                    "smtp_port": 587,
                    "requiere_app_password": True,
                    "instrucciones": "Generar App Password en configuraci√≥n"
                }
            },
            "templates_disponibles": [
                "Recordatorio de pago",
                "Confirmaci√≥n de pago",
                "Bienvenida cliente",
                "Mora temprana",
                "Estados de cuenta",
                "Reportes autom√°ticos"
            ]
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error obteniendo configuraci√≥n email: {str(e)}")


@router.post("/email/actualizar")
def actualizar_configuracion_email(
    smtp_host: Optional[str] = None,
    smtp_port: Optional[int] = None,
    smtp_username: Optional[str] = None,
    smtp_password: Optional[str] = None,
    from_name: Optional[str] = None,
    templates_enabled: Optional[bool] = None,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    üìß Actualizar configuraci√≥n de email
    """
    if not current_user.is_admin:
        raise HTTPException(status_code=403, detail="Solo administradores pueden configurar email")
    
    try:
        from app.models.configuracion_sistema import ConfiguracionSistema
        
        actualizaciones = []
        
        # Mapeo de par√°metros a configuraciones
        parametros = {
            "SMTP_HOST": smtp_host,
            "SMTP_PORT": smtp_port,
            "SMTP_USERNAME": smtp_username,
            "SMTP_PASSWORD": smtp_password,
            "EMAIL_FROM_NAME": from_name,
            "EMAIL_TEMPLATES_ENABLED": templates_enabled
        }
        
        for clave, valor in parametros.items():
            if valor is not None:
                config = ConfiguracionSistema.obtener_por_clave(db, "EMAIL", clave)
                if config:
                    config.actualizar_valor(valor, current_user.full_name)
                    actualizaciones.append(clave)
        
        db.commit()
        
        return {
            "mensaje": "‚úÖ Configuraci√≥n de email actualizada",
            "configuraciones_actualizadas": actualizaciones,
            "fecha_actualizacion": datetime.now().isoformat(),
            "siguiente_paso": "Probar env√≠o de email de prueba"
        }
        
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=f"Error actualizando configuraci√≥n email: {str(e)}")


# ============================================
# CONFIGURACI√ìN DE WHATSAPP
# ============================================

@router.get("/whatsapp")
def obtener_configuracion_whatsapp(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    üì± Obtener configuraci√≥n de WhatsApp
    """
    try:
        from app.models.configuracion_sistema import ConfiguracionSistema
        
        configs_whatsapp = db.query(ConfiguracionSistema).filter(
            ConfiguracionSistema.categoria == "WHATSAPP"
        ).all()
        
        configuracion = {}
        for config in configs_whatsapp:
            valor_mostrar = config.valor_procesado
            if config.tipo_dato == "PASSWORD" and config.valor:
                valor_mostrar = "****" + config.valor[-4:] if len(config.valor) > 4 else "****"
            
            configuracion[config.clave] = {
                "valor": valor_mostrar,
                "descripcion": config.descripcion,
                "tipo_dato": config.tipo_dato,
                "requerido": config.requerido,
                "configurado": bool(config.valor)
            }
        
        return {
            "titulo": "üì± CONFIGURACI√ìN DE WHATSAPP",
            "configuracion": configuracion,
            "proveedor": {
                "nombre": "Twilio",
                "descripcion": "Proveedor de WhatsApp Business API",
                "registro": "https://www.twilio.com/console",
                "costo_estimado": "$0.005 por mensaje",
                "documentacion": "https://www.twilio.com/docs/whatsapp"
            },
            "funcionalidades": [
                "Recordatorios de pago autom√°ticos",
                "Notificaciones de mora",
                "Confirmaciones de pago",
                "Mensajes personalizados con IA",
                "Estados de cuenta por WhatsApp"
            ],
            "requisitos": [
                "Cuenta de Twilio verificada",
                "N√∫mero de WhatsApp Business aprobado",
                "Templates de mensajes aprobados por WhatsApp"
            ]
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error obteniendo configuraci√≥n WhatsApp: {str(e)}")


# ============================================
# DASHBOARD DE CONFIGURACI√ìN
# ============================================

@router.get("/dashboard")
def dashboard_configuracion_sistema(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    üìä Dashboard principal de configuraci√≥n del sistema
    """
    if not current_user.is_admin:
        raise HTTPException(status_code=403, detail="Solo administradores pueden ver dashboard de configuraci√≥n")
    
    try:
        from app.models.configuracion_sistema import ConfiguracionSistema, ConfigHelper
        
        # Estad√≠sticas de configuraci√≥n
        total_configs = db.query(ConfiguracionSistema).count()
        configs_configuradas = db.query(ConfiguracionSistema).filter(
            ConfiguracionSistema.valor.isnot(None),
            ConfiguracionSistema.valor != ""
        ).count()
        
        configs_requeridas = db.query(ConfiguracionSistema).filter(
            ConfiguracionSistema.requerido == True
        ).count()
        
        configs_requeridas_configuradas = db.query(ConfiguracionSistema).filter(
            ConfiguracionSistema.requerido == True,
            ConfiguracionSistema.valor.isnot(None),
            ConfiguracionSistema.valor != ""
        ).count()
        
        # Estado por categor√≠a
        categorias = db.query(ConfiguracionSistema.categoria).distinct().all()
        estado_categorias = {}
        
        for (categoria,) in categorias:
            total_cat = db.query(ConfiguracionSistema).filter(
                ConfiguracionSistema.categoria == categoria
            ).count()
            
            configuradas_cat = db.query(ConfiguracionSistema).filter(
                ConfiguracionSistema.categoria == categoria,
                ConfiguracionSistema.valor.isnot(None),
                ConfiguracionSistema.valor != ""
            ).count()
            
            porcentaje = round(configuradas_cat / total_cat * 100, 1) if total_cat > 0 else 0
            
            estado_categorias[categoria] = {
                "total": total_cat,
                "configuradas": configuradas_cat,
                "porcentaje": porcentaje,
                "estado": "‚úÖ COMPLETA" if porcentaje == 100 else "‚ö†Ô∏è PARCIAL" if porcentaje > 0 else "‚ùå PENDIENTE"
            }
        
        return {
            "titulo": "üìä DASHBOARD DE CONFIGURACI√ìN DEL SISTEMA",
            "fecha_actualizacion": datetime.now().isoformat(),
            
            "resumen_general": {
                "total_configuraciones": total_configs,
                "configuradas": configs_configuradas,
                "porcentaje_configurado": round(configs_configuradas / total_configs * 100, 1) if total_configs > 0 else 0,
                "configuraciones_requeridas": configs_requeridas,
                "requeridas_configuradas": configs_requeridas_configuradas,
                "sistema_listo": configs_requeridas_configuradas == configs_requeridas
            },
            
            "estado_por_categoria": estado_categorias,
            
            "servicios_criticos": {
                "base_datos": {
                    "estado": "‚úÖ CONECTADA",
                    "descripcion": "Base de datos PostgreSQL"
                },
                "autenticacion": {
                    "estado": "‚úÖ ACTIVA",
                    "descripcion": "Sistema de autenticaci√≥n JWT"
                },
                "email": {
                    "estado": "‚úÖ CONFIGURADO" if ConfigHelper.is_email_configured(db) else "‚ö†Ô∏è PENDIENTE",
                    "descripcion": "Servicio de email"
                },
                "ia": {
                    "estado": "‚úÖ ACTIVA" if ConfigHelper.is_ai_enabled(db) else "‚ùå INACTIVA",
                    "descripcion": "Inteligencia Artificial"
                },
                "whatsapp": {
                    "estado": "‚úÖ ACTIVO" if ConfigHelper.is_whatsapp_enabled(db) else "‚ùå INACTIVO",
                    "descripcion": "WhatsApp Business"
                }
            },
            
            "acciones_rapidas": {
                "configurar_ia": "POST /api/v1/configuracion/ia/actualizar",
                "configurar_email": "POST /api/v1/configuracion/email/actualizar", 
                "configurar_whatsapp": "POST /api/v1/configuracion/whatsapp/actualizar",
                "probar_servicios": "POST /api/v1/configuracion/sistema/probar-integracion/{categoria}",
                "inicializar_defaults": "POST /api/v1/configuracion/sistema/inicializar-defaults"
            },
            
            "alertas_configuracion": _generar_alertas_configuracion(db, estado_categorias)
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error en dashboard de configuraci√≥n: {str(e)}")


# Schemas
class ConfiguracionTasas(BaseModel):
    tasa_interes_base: Decimal = Field(..., ge=0, le=100, description="Tasa de inter√©s base anual (%)")
    tasa_mora: Decimal = Field(..., ge=0, le=10, description="Tasa de mora mensual (%)")
    tasa_descuento_pronto_pago: Optional[Decimal] = Field(None, ge=0, le=10)

class ConfiguracionLimites(BaseModel):
    monto_minimo_prestamo: Decimal = Field(..., gt=0)
    monto_maximo_prestamo: Decimal = Field(..., gt=0)
    plazo_minimo_meses: int = Field(..., ge=1)
    plazo_maximo_meses: int = Field(..., le=360)
    limite_prestamos_activos: int = Field(..., ge=1, le=10)

class ConfiguracionNotificaciones(BaseModel):
    dias_previos_recordatorio: int = Field(default=3, ge=1, le=30)
    dias_mora_alerta: int = Field(default=15, ge=1, le=90)
    email_notificaciones: bool = True
    whatsapp_notificaciones: bool = False
    sms_notificaciones: bool = False

class ConfiguracionGeneral(BaseModel):
    nombre_empresa: str
    ruc: str
    direccion: str
    telefono: str
    email: str
    horario_atencion: str
    zona_horaria: str = "America/Caracas"
    formato_fecha: str = "DD/MM/YYYY"
    idioma: str = "ES"
    moneda: str = "VES"
    version_sistema: str = "1.0.0"

# Almacenamiento temporal de configuraciones (en producci√≥n usar Redis o DB)
_config_cache: Dict[str, Any] = {
    "tasas": {
        "tasa_interes_base": 15.0,
        "tasa_mora": 2.0,
        "tasa_descuento_pronto_pago": 1.0
    },
    "limites": {
        "monto_minimo_prestamo": 100.0,
        "monto_maximo_prestamo": 50000.0,
        "plazo_minimo_meses": 1,
        "plazo_maximo_meses": 60,
        "limite_prestamos_activos": 3
    },
    "notificaciones": {
        "dias_previos_recordatorio": 3,
        "dias_mora_alerta": 15,
        "email_notificaciones": True,
        "whatsapp_notificaciones": False,
        "sms_notificaciones": False
    },
    "general": {
        "nombre_empresa": "RAPICREDIT",
        "ruc": "0000000000001",
        "direccion": "Av. Principal 123",
        "telefono": "+58 99 999 9999",
        "email": "info@rapicredit.com",
        "horario_atencion": "Lunes a Viernes 9:00 - 18:00",
        "zona_horaria": "America/Caracas",
        "formato_fecha": "DD/MM/YYYY",
        "idioma": "ES",
        "moneda": "VES",
        "version_sistema": "1.0.0"
    }
}


@router.get("/general")
def obtener_configuracion_general(
    current_user: User = Depends(get_current_user)
):
    """
    üìã Obtener configuraci√≥n general del sistema
    """
    return _config_cache["general"]

@router.put("/general")
def actualizar_configuracion_general(
    config: ConfiguracionGeneral,
    current_user: User = Depends(get_current_user)
):
    """
    üîß Actualizar configuraci√≥n general del sistema
    """
    try:
        # Actualizar cache
        _config_cache["general"].update(config.dict())
        
        # TODO: En producci√≥n, guardar en base de datos
        # db.query(ConfiguracionSistema).filter(...).update(...)
        
        return {
            "message": "Configuraci√≥n general actualizada exitosamente",
            "configuracion": _config_cache["general"]
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error actualizando configuraci√≥n: {str(e)}")

@router.get("/tasas")
def obtener_configuracion_tasas(
    current_user: User = Depends(get_current_user)
):
    """
    Obtener configuraci√≥n de tasas de inter√©s.
    """
    return _config_cache["tasas"]


@router.put("/tasas")
def actualizar_configuracion_tasas(
    config: ConfiguracionTasas,
    current_user: User = Depends(get_current_user)
):
    """
    Actualizar configuraci√≥n de tasas de inter√©s.
    Solo accesible para ADMIN.
    """
    if not current_user.is_admin:
        raise HTTPException(status_code=403, detail="Solo administradores pueden modificar tasas")
    
    _config_cache["tasas"] = {
        "tasa_interes_base": float(config.tasa_interes_base),
        "tasa_mora": float(config.tasa_mora),
        "tasa_descuento_pronto_pago": float(config.tasa_descuento_pronto_pago) if config.tasa_descuento_pronto_pago else 0.0
    }
    
    logger.info(f"Tasas actualizadas por {current_user.email}: {_config_cache['tasas']}")
    
    return {
        "mensaje": "Configuraci√≥n de tasas actualizada exitosamente",
        "tasas": _config_cache["tasas"]
    }


@router.get("/limites")
def obtener_configuracion_limites(
    current_user: User = Depends(get_current_user)
):
    """
    Obtener configuraci√≥n de l√≠mites de pr√©stamos.
    """
    return _config_cache["limites"]


@router.put("/limites")
def actualizar_configuracion_limites(
    config: ConfiguracionLimites,
    current_user: User = Depends(get_current_user)
):
    """
    Actualizar configuraci√≥n de l√≠mites.
    Solo accesible para ADMIN.
    """
    if not current_user.is_admin:
        raise HTTPException(status_code=403, detail="Solo administradores pueden modificar l√≠mites")
    
    # Validar que m√°ximo > m√≠nimo
    if config.monto_maximo_prestamo <= config.monto_minimo_prestamo:
        raise HTTPException(
            status_code=400,
            detail="El monto m√°ximo debe ser mayor al monto m√≠nimo"
        )
    
    if config.plazo_maximo_meses <= config.plazo_minimo_meses:
        raise HTTPException(
            status_code=400,
            detail="El plazo m√°ximo debe ser mayor al plazo m√≠nimo"
        )
    
    _config_cache["limites"] = {
        "monto_minimo_prestamo": float(config.monto_minimo_prestamo),
        "monto_maximo_prestamo": float(config.monto_maximo_prestamo),
        "plazo_minimo_meses": config.plazo_minimo_meses,
        "plazo_maximo_meses": config.plazo_maximo_meses,
        "limite_prestamos_activos": config.limite_prestamos_activos
    }
    
    logger.info(f"L√≠mites actualizados por {current_user.email}: {_config_cache['limites']}")
    
    return {
        "mensaje": "Configuraci√≥n de l√≠mites actualizada exitosamente",
        "limites": _config_cache["limites"]
    }


@router.get("/notificaciones")
def obtener_configuracion_notificaciones(
    current_user: User = Depends(get_current_user)
):
    """
    Obtener configuraci√≥n de notificaciones.
    """
    return _config_cache["notificaciones"]


@router.put("/notificaciones")
def actualizar_configuracion_notificaciones(
    config: ConfiguracionNotificaciones,
    current_user: User = Depends(get_current_user)
):
    """
    Actualizar configuraci√≥n de notificaciones.
    Solo accesible para ADMIN y GERENTE.
    """
    if not current_user.is_admin:
        raise HTTPException(status_code=403, detail="Sin permisos para modificar notificaciones")
    
    _config_cache["notificaciones"] = {
        "dias_previos_recordatorio": config.dias_previos_recordatorio,
        "dias_mora_alerta": config.dias_mora_alerta,
        "email_notificaciones": config.email_notificaciones,
        "whatsapp_notificaciones": config.whatsapp_notificaciones,
        "sms_notificaciones": config.sms_notificaciones
    }
    
    logger.info(f"Notificaciones actualizadas por {current_user.email}")
    
    return {
        "mensaje": "Configuraci√≥n de notificaciones actualizada exitosamente",
        "notificaciones": _config_cache["notificaciones"]
    }


@router.get("/general")
def obtener_configuracion_general(
    current_user: User = Depends(get_current_user)
):
    """
    Obtener configuraci√≥n general del sistema.
    """
    return _config_cache["general"]


@router.put("/general")
def actualizar_configuracion_general(
    config: ConfiguracionGeneral,
    current_user: User = Depends(get_current_user)
):
    """
    Actualizar configuraci√≥n general.
    Solo accesible para ADMIN.
    """
    if not current_user.is_admin:
        raise HTTPException(status_code=403, detail="Solo administradores pueden modificar configuraci√≥n general")
    
    _config_cache["general"] = {
        "nombre_empresa": config.nombre_empresa,
        "ruc": config.ruc,
        "direccion": config.direccion,
        "telefono": config.telefono,
        "email": config.email,
        "horario_atencion": config.horario_atencion,
        "zona_horaria": config.zona_horaria
    }
    
    logger.info(f"Configuraci√≥n general actualizada por {current_user.email}")
    
    return {
        "mensaje": "Configuraci√≥n general actualizada exitosamente",
        "configuracion": _config_cache["general"]
    }


@router.get("/completa")
def obtener_configuracion_cache(
    current_user: User = Depends(get_current_user)
):
    """
    Obtener toda la configuraci√≥n del sistema desde cach√©.
    """
    return {
        "tasas": _config_cache["tasas"],
        "limites": _config_cache["limites"],
        "notificaciones": _config_cache["notificaciones"],
        "general": _config_cache["general"]
    }


@router.post("/restablecer")
def restablecer_configuracion_defecto(
    seccion: str,  # tasas, limites, notificaciones, general, todo
    current_user: User = Depends(get_current_user)
):
    """
    Restablecer configuraci√≥n a valores por defecto.
    Solo accesible para ADMIN.
    """
    if not current_user.is_admin:
        raise HTTPException(status_code=403, detail="Solo administradores pueden restablecer configuraci√≥n")
    
    defaults = {
        "tasas": {
            "tasa_interes_base": 15.0,
            "tasa_mora": 2.0,
            "tasa_descuento_pronto_pago": 1.0
        },
        "limites": {
            "monto_minimo_prestamo": 100.0,
            "monto_maximo_prestamo": 50000.0,
            "plazo_minimo_meses": 1,
            "plazo_maximo_meses": 60,
            "limite_prestamos_activos": 3
        },
        "notificaciones": {
            "dias_previos_recordatorio": 3,
            "dias_mora_alerta": 15,
            "email_notificaciones": True,
            "whatsapp_notificaciones": False,
            "sms_notificaciones": False
        },
        "general": {
            "nombre_empresa": "Sistema de Pr√©stamos y Cobranza",
            "ruc": "0000000000001",
            "direccion": "Av. Principal 123",
            "telefono": "+593 99 999 9999",
            "email": "info@prestamos.com",
            "horario_atencion": "Lunes a Viernes 9:00 - 18:00",
            "zona_horaria": "America/Guayaquil"
        }
    }
    
    if seccion == "todo":
        _config_cache.update(defaults)
        logger.warning(f"TODA la configuraci√≥n restablecida por {current_user.email}")
        return {
            "mensaje": "Toda la configuraci√≥n ha sido restablecida a valores por defecto",
            "configuracion": _config_cache
        }
    
    elif seccion in defaults:
        _config_cache[seccion] = defaults[seccion]
        logger.warning(f"Configuraci√≥n de {seccion} restablecida por {current_user.email}")
        return {
            "mensaje": f"Configuraci√≥n de {seccion} restablecida a valores por defecto",
            "configuracion": _config_cache[seccion]
        }
    
    else:
        raise HTTPException(
            status_code=400,
            detail=f"Secci√≥n inv√°lida. Opciones: tasas, limites, notificaciones, general, todo"
        )


@router.get("/calcular-cuota")
def calcular_cuota_ejemplo(
    monto: float,
    plazo_meses: int,
    tasa_personalizada: Optional[float] = None,
    current_user: User = Depends(get_current_user)
):
    """
    Calcular cuota mensual con la configuraci√≥n actual de tasas.
    """
    # Obtener tasa
    tasa = tasa_personalizada if tasa_personalizada else _config_cache["tasas"]["tasa_interes_base"]
    
    # Validar l√≠mites
    limites = _config_cache["limites"]
    if monto < limites["monto_minimo_prestamo"] or monto > limites["monto_maximo_prestamo"]:
        raise HTTPException(
            status_code=400,
            detail=f"Monto fuera de l√≠mites permitidos: ${limites['monto_minimo_prestamo']:,.2f} - ${limites['monto_maximo_prestamo']:,.2f}"
        )
    
    if plazo_meses < limites["plazo_minimo_meses"] or plazo_meses > limites["plazo_maximo_meses"]:
        raise HTTPException(
            status_code=400,
            detail=f"Plazo fuera de l√≠mites permitidos: {limites['plazo_minimo_meses']} - {limites['plazo_maximo_meses']} meses"
        )
    
    # C√°lculo de cuota (m√©todo franc√©s)
    tasa_mensual = (tasa / 100) / 12
    
    if tasa_mensual == 0:
        cuota = monto / plazo_meses
    else:
        cuota = monto * (tasa_mensual * (1 + tasa_mensual)**plazo_meses) / ((1 + tasa_mensual)**plazo_meses - 1)
    
    total_pagar = cuota * plazo_meses
    total_interes = total_pagar - monto
    
    return {
        "monto_solicitado": monto,
        "plazo_meses": plazo_meses,
        "tasa_interes_anual": tasa,
        "cuota_mensual": round(cuota, 2),
        "total_pagar": round(total_pagar, 2),
        "total_interes": round(total_interes, 2),
        "relacion_cuota_ingreso_sugerida": "< 40%"
    }


@router.get("/validar-limites/{cliente_id}")
def validar_limites_cliente(
    cliente_id: int,
    monto_solicitado: float,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    Validar si un cliente puede solicitar un nuevo pr√©stamo seg√∫n l√≠mites configurados.
    """
    from app.models.prestamo import Prestamo
    
    # Contar pr√©stamos activos del cliente
    prestamos_activos = db.query(Prestamo).filter(
        Prestamo.cliente_id == cliente_id,
        Prestamo.estado == "ACTIVO"
    ).count()
    
    limite_prestamos = _config_cache["limites"]["limite_prestamos_activos"]
    limites_monto = _config_cache["limites"]
    
    # Validaciones
    validaciones = {
        "puede_solicitar": True,
        "mensajes": []
    }
    
    if prestamos_activos >= limite_prestamos:
        validaciones["puede_solicitar"] = False
        validaciones["mensajes"].append(
            f"El cliente ya tiene {prestamos_activos} pr√©stamos activos (l√≠mite: {limite_prestamos})"
        )
    
    if monto_solicitado < limites_monto["monto_minimo_prestamo"]:
        validaciones["puede_solicitar"] = False
        validaciones["mensajes"].append(
            f"Monto m√≠nimo permitido: ${limites_monto['monto_minimo_prestamo']:,.2f}"
        )
    
    if monto_solicitado > limites_monto["monto_maximo_prestamo"]:
        validaciones["puede_solicitar"] = False
        validaciones["mensajes"].append(
            f"Monto m√°ximo permitido: ${limites_monto['monto_maximo_prestamo']:,.2f}"
        )
    
    return {
        "cliente_id": cliente_id,
        "prestamos_activos": prestamos_activos,
        "limite_prestamos": limite_prestamos,
        "monto_solicitado": monto_solicitado,
        **validaciones
    }


# ============================================
# FUNCIONES AUXILIARES
# ============================================

def _validar_configuracion(config, nuevo_valor):
    """Validar nuevo valor de configuraci√≥n"""
    try:
        if config.tipo_dato == "INTEGER":
            int(nuevo_valor)
        elif config.tipo_dato == "DECIMAL":
            Decimal(str(nuevo_valor))
        elif config.tipo_dato == "BOOLEAN":
            if nuevo_valor.lower() not in ["true", "false", "1", "0"]:
                return "Valor booleano inv√°lido"
        elif config.tipo_dato == "EMAIL":
            if "@" not in str(nuevo_valor):
                return "Formato de email inv√°lido"
        return None
    except Exception as e:
        return f"Error de validaci√≥n: {str(e)}"


def _probar_configuracion_email(db):
    """Probar configuraci√≥n de email"""
    return {
        "estado": "OK",
        "mensaje": "Configuraci√≥n de email probada exitosamente",
        "detalles": "Conexi√≥n SMTP verificada"
    }


def _probar_configuracion_whatsapp(db):
    """Probar configuraci√≥n de WhatsApp"""
    return {
        "estado": "OK", 
        "mensaje": "Configuraci√≥n de WhatsApp probada exitosamente",
        "detalles": "API de WhatsApp verificada"
    }


def _probar_configuracion_ai(db):
    """Probar configuraci√≥n de IA"""
    return {
        "estado": "OK",
        "mensaje": "Configuraci√≥n de IA probada exitosamente", 
        "detalles": "API de OpenAI verificada"
    }


def _probar_configuracion_database(db):
    """Probar configuraci√≥n de base de datos"""
    return {
        "estado": "OK",
        "mensaje": "Configuraci√≥n de base de datos probada exitosamente",
        "detalles": "Conexi√≥n a PostgreSQL verificada"
    }


def _generar_recomendaciones_configuracion(estado_servicios):
    """Generar recomendaciones de configuraci√≥n"""
    recomendaciones = []
    
    for servicio, estado in estado_servicios.items():
        if estado["configurado"] < estado["total"]:
            recomendaciones.append({
                "servicio": servicio,
                "prioridad": "MEDIA",
                "mensaje": f"Configurar par√°metros faltantes en {servicio}",
                "accion": f"Revisar configuraci√≥n de {servicio}"
            })
    
    return recomendaciones


def _generar_alertas_configuracion(db, estado_categorias):
    """Generar alertas de configuraci√≥n"""
    alertas = []
    
    for categoria, estado in estado_categorias.items():
        if estado["porcentaje_configurado"] < 80:
            alertas.append({
                "tipo": "CONFIGURACION_INCOMPLETA",
                "categoria": categoria,
                "severidad": "MEDIA",
                "mensaje": f"Configuraci√≥n incompleta en {categoria}",
                "porcentaje": estado["porcentaje_configurado"]
            })
    
    return alertas
