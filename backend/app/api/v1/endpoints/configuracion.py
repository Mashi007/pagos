# backend/app/api/v1/endpoints/configuracion.py
"""
Endpoint para configuraci√≥n administrativa del sistema.
Gesti√≥n de par√°metros, tasas, l√≠mites y ajustes generales.
"""
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import Optional, Dict, Any
from pydantic import BaseModel, Field
from decimal import Decimal

from app.db.session import get_db
from app.models.user import User
from app.core.security import get_current_user
import logging

logger = logging.getLogger(__name__)
router = APIRouter()


# ============================================
# MONITOREO Y OBSERVABILIDAD
# ============================================

@router.get("/monitoreo/estado")
def obtener_estado_monitoreo(
    current_user: User = Depends(get_current_user)
):
    """
    üîç Verificar estado del sistema de monitoreo y observabilidad
    """
    # Solo admin puede ver configuraci√≥n de monitoreo
    if current_user.rol != "ADMIN":
        raise HTTPException(status_code=403, detail="Solo administradores pueden ver configuraci√≥n de monitoreo")
    
    from app.core.monitoring import get_monitoring_status
    return get_monitoring_status()


@router.post("/monitoreo/habilitar")
def habilitar_monitoreo_basico(
    current_user: User = Depends(get_current_user)
):
    """
    ‚ö° Habilitar monitoreo b√°sico sin dependencias externas
    """
    if current_user.rol != "ADMIN":
        raise HTTPException(status_code=403, detail="Solo administradores pueden configurar monitoreo")
    
    try:
        # Configurar logging estructurado b√°sico
        import logging
        
        # Configurar formato mejorado
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - [%(filename)s:%(lineno)d] - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        
        # Logger espec√≠fico para el sistema de financiamiento
        finance_logger = logging.getLogger("financiamiento_automotriz")
        finance_logger.setLevel(logging.INFO)
        
        return {
            "mensaje": "‚úÖ Monitoreo b√°sico habilitado",
            "configuracion": {
                "logging_estructurado": "‚úÖ Habilitado",
                "nivel_log": "INFO",
                "formato": "Timestamp + Archivo + L√≠nea + Mensaje",
                "logger_especifico": "financiamiento_automotriz"
            },
            "beneficios": [
                "üìã Logs m√°s detallados y estructurados",
                "üîç Mejor debugging de errores",
                "üìä Tracking b√°sico de operaciones",
                "‚ö° Sin dependencias externas adicionales"
            ],
            "siguiente_paso": "Configurar Sentry y Prometheus para monitoreo avanzado"
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error habilitando monitoreo: {str(e)}")

# Schemas
class ConfiguracionTasas(BaseModel):
    tasa_interes_base: Decimal = Field(..., ge=0, le=100, description="Tasa de inter√©s base anual (%)")
    tasa_mora: Decimal = Field(..., ge=0, le=10, description="Tasa de mora mensual (%)")
    tasa_descuento_pronto_pago: Optional[Decimal] = Field(None, ge=0, le=10)

class ConfiguracionLimites(BaseModel):
    monto_minimo_prestamo: Decimal = Field(..., gt=0)
    monto_maximo_prestamo: Decimal = Field(..., gt=0)
    plazo_minimo_meses: int = Field(..., ge=1)
    plazo_maximo_meses: int = Field(..., le=360)
    limite_prestamos_activos: int = Field(..., ge=1, le=10)

class ConfiguracionNotificaciones(BaseModel):
    dias_previos_recordatorio: int = Field(default=3, ge=1, le=30)
    dias_mora_alerta: int = Field(default=15, ge=1, le=90)
    email_notificaciones: bool = True
    whatsapp_notificaciones: bool = False
    sms_notificaciones: bool = False

class ConfiguracionGeneral(BaseModel):
    nombre_empresa: str
    ruc: str
    direccion: str
    telefono: str
    email: str
    horario_atencion: str
    zona_horaria: str = "America/Guayaquil"

# Almacenamiento temporal de configuraciones (en producci√≥n usar Redis o DB)
_config_cache: Dict[str, Any] = {
    "tasas": {
        "tasa_interes_base": 15.0,
        "tasa_mora": 2.0,
        "tasa_descuento_pronto_pago": 1.0
    },
    "limites": {
        "monto_minimo_prestamo": 100.0,
        "monto_maximo_prestamo": 50000.0,
        "plazo_minimo_meses": 1,
        "plazo_maximo_meses": 60,
        "limite_prestamos_activos": 3
    },
    "notificaciones": {
        "dias_previos_recordatorio": 3,
        "dias_mora_alerta": 15,
        "email_notificaciones": True,
        "whatsapp_notificaciones": False,
        "sms_notificaciones": False
    },
    "general": {
        "nombre_empresa": "Sistema de Pr√©stamos y Cobranza",
        "ruc": "0000000000001",
        "direccion": "Av. Principal 123",
        "telefono": "+593 99 999 9999",
        "email": "info@prestamos.com",
        "horario_atencion": "Lunes a Viernes 9:00 - 18:00",
        "zona_horaria": "America/Guayaquil"
    }
}


@router.get("/tasas")
def obtener_configuracion_tasas(
    current_user: User = Depends(get_current_user)
):
    """
    Obtener configuraci√≥n de tasas de inter√©s.
    """
    return _config_cache["tasas"]


@router.put("/tasas")
def actualizar_configuracion_tasas(
    config: ConfiguracionTasas,
    current_user: User = Depends(get_current_user)
):
    """
    Actualizar configuraci√≥n de tasas de inter√©s.
    Solo accesible para ADMIN.
    """
    if current_user.rol != "ADMIN":
        raise HTTPException(status_code=403, detail="Solo administradores pueden modificar tasas")
    
    _config_cache["tasas"] = {
        "tasa_interes_base": float(config.tasa_interes_base),
        "tasa_mora": float(config.tasa_mora),
        "tasa_descuento_pronto_pago": float(config.tasa_descuento_pronto_pago) if config.tasa_descuento_pronto_pago else 0.0
    }
    
    logger.info(f"Tasas actualizadas por {current_user.email}: {_config_cache['tasas']}")
    
    return {
        "mensaje": "Configuraci√≥n de tasas actualizada exitosamente",
        "tasas": _config_cache["tasas"]
    }


@router.get("/limites")
def obtener_configuracion_limites(
    current_user: User = Depends(get_current_user)
):
    """
    Obtener configuraci√≥n de l√≠mites de pr√©stamos.
    """
    return _config_cache["limites"]


@router.put("/limites")
def actualizar_configuracion_limites(
    config: ConfiguracionLimites,
    current_user: User = Depends(get_current_user)
):
    """
    Actualizar configuraci√≥n de l√≠mites.
    Solo accesible para ADMIN.
    """
    if current_user.rol != "ADMIN":
        raise HTTPException(status_code=403, detail="Solo administradores pueden modificar l√≠mites")
    
    # Validar que m√°ximo > m√≠nimo
    if config.monto_maximo_prestamo <= config.monto_minimo_prestamo:
        raise HTTPException(
            status_code=400,
            detail="El monto m√°ximo debe ser mayor al monto m√≠nimo"
        )
    
    if config.plazo_maximo_meses <= config.plazo_minimo_meses:
        raise HTTPException(
            status_code=400,
            detail="El plazo m√°ximo debe ser mayor al plazo m√≠nimo"
        )
    
    _config_cache["limites"] = {
        "monto_minimo_prestamo": float(config.monto_minimo_prestamo),
        "monto_maximo_prestamo": float(config.monto_maximo_prestamo),
        "plazo_minimo_meses": config.plazo_minimo_meses,
        "plazo_maximo_meses": config.plazo_maximo_meses,
        "limite_prestamos_activos": config.limite_prestamos_activos
    }
    
    logger.info(f"L√≠mites actualizados por {current_user.email}: {_config_cache['limites']}")
    
    return {
        "mensaje": "Configuraci√≥n de l√≠mites actualizada exitosamente",
        "limites": _config_cache["limites"]
    }


@router.get("/notificaciones")
def obtener_configuracion_notificaciones(
    current_user: User = Depends(get_current_user)
):
    """
    Obtener configuraci√≥n de notificaciones.
    """
    return _config_cache["notificaciones"]


@router.put("/notificaciones")
def actualizar_configuracion_notificaciones(
    config: ConfiguracionNotificaciones,
    current_user: User = Depends(get_current_user)
):
    """
    Actualizar configuraci√≥n de notificaciones.
    Solo accesible para ADMIN y GERENTE.
    """
    if current_user.rol not in ["ADMIN", "GERENTE"]:
        raise HTTPException(status_code=403, detail="Sin permisos para modificar notificaciones")
    
    _config_cache["notificaciones"] = {
        "dias_previos_recordatorio": config.dias_previos_recordatorio,
        "dias_mora_alerta": config.dias_mora_alerta,
        "email_notificaciones": config.email_notificaciones,
        "whatsapp_notificaciones": config.whatsapp_notificaciones,
        "sms_notificaciones": config.sms_notificaciones
    }
    
    logger.info(f"Notificaciones actualizadas por {current_user.email}")
    
    return {
        "mensaje": "Configuraci√≥n de notificaciones actualizada exitosamente",
        "notificaciones": _config_cache["notificaciones"]
    }


@router.get("/general")
def obtener_configuracion_general(
    current_user: User = Depends(get_current_user)
):
    """
    Obtener configuraci√≥n general del sistema.
    """
    return _config_cache["general"]


@router.put("/general")
def actualizar_configuracion_general(
    config: ConfiguracionGeneral,
    current_user: User = Depends(get_current_user)
):
    """
    Actualizar configuraci√≥n general.
    Solo accesible para ADMIN.
    """
    if current_user.rol != "ADMIN":
        raise HTTPException(status_code=403, detail="Solo administradores pueden modificar configuraci√≥n general")
    
    _config_cache["general"] = {
        "nombre_empresa": config.nombre_empresa,
        "ruc": config.ruc,
        "direccion": config.direccion,
        "telefono": config.telefono,
        "email": config.email,
        "horario_atencion": config.horario_atencion,
        "zona_horaria": config.zona_horaria
    }
    
    logger.info(f"Configuraci√≥n general actualizada por {current_user.email}")
    
    return {
        "mensaje": "Configuraci√≥n general actualizada exitosamente",
        "configuracion": _config_cache["general"]
    }


@router.get("/completa")
def obtener_configuracion_completa(
    current_user: User = Depends(get_current_user)
):
    """
    Obtener toda la configuraci√≥n del sistema.
    """
    return {
        "tasas": _config_cache["tasas"],
        "limites": _config_cache["limites"],
        "notificaciones": _config_cache["notificaciones"],
        "general": _config_cache["general"]
    }


@router.post("/restablecer")
def restablecer_configuracion_defecto(
    seccion: str,  # tasas, limites, notificaciones, general, todo
    current_user: User = Depends(get_current_user)
):
    """
    Restablecer configuraci√≥n a valores por defecto.
    Solo accesible para ADMIN.
    """
    if current_user.rol != "ADMIN":
        raise HTTPException(status_code=403, detail="Solo administradores pueden restablecer configuraci√≥n")
    
    defaults = {
        "tasas": {
            "tasa_interes_base": 15.0,
            "tasa_mora": 2.0,
            "tasa_descuento_pronto_pago": 1.0
        },
        "limites": {
            "monto_minimo_prestamo": 100.0,
            "monto_maximo_prestamo": 50000.0,
            "plazo_minimo_meses": 1,
            "plazo_maximo_meses": 60,
            "limite_prestamos_activos": 3
        },
        "notificaciones": {
            "dias_previos_recordatorio": 3,
            "dias_mora_alerta": 15,
            "email_notificaciones": True,
            "whatsapp_notificaciones": False,
            "sms_notificaciones": False
        },
        "general": {
            "nombre_empresa": "Sistema de Pr√©stamos y Cobranza",
            "ruc": "0000000000001",
            "direccion": "Av. Principal 123",
            "telefono": "+593 99 999 9999",
            "email": "info@prestamos.com",
            "horario_atencion": "Lunes a Viernes 9:00 - 18:00",
            "zona_horaria": "America/Guayaquil"
        }
    }
    
    if seccion == "todo":
        _config_cache.update(defaults)
        logger.warning(f"TODA la configuraci√≥n restablecida por {current_user.email}")
        return {
            "mensaje": "Toda la configuraci√≥n ha sido restablecida a valores por defecto",
            "configuracion": _config_cache
        }
    
    elif seccion in defaults:
        _config_cache[seccion] = defaults[seccion]
        logger.warning(f"Configuraci√≥n de {seccion} restablecida por {current_user.email}")
        return {
            "mensaje": f"Configuraci√≥n de {seccion} restablecida a valores por defecto",
            "configuracion": _config_cache[seccion]
        }
    
    else:
        raise HTTPException(
            status_code=400,
            detail=f"Secci√≥n inv√°lida. Opciones: tasas, limites, notificaciones, general, todo"
        )


@router.get("/calcular-cuota")
def calcular_cuota_ejemplo(
    monto: float,
    plazo_meses: int,
    tasa_personalizada: Optional[float] = None,
    current_user: User = Depends(get_current_user)
):
    """
    Calcular cuota mensual con la configuraci√≥n actual de tasas.
    """
    # Obtener tasa
    tasa = tasa_personalizada if tasa_personalizada else _config_cache["tasas"]["tasa_interes_base"]
    
    # Validar l√≠mites
    limites = _config_cache["limites"]
    if monto < limites["monto_minimo_prestamo"] or monto > limites["monto_maximo_prestamo"]:
        raise HTTPException(
            status_code=400,
            detail=f"Monto fuera de l√≠mites permitidos: ${limites['monto_minimo_prestamo']:,.2f} - ${limites['monto_maximo_prestamo']:,.2f}"
        )
    
    if plazo_meses < limites["plazo_minimo_meses"] or plazo_meses > limites["plazo_maximo_meses"]:
        raise HTTPException(
            status_code=400,
            detail=f"Plazo fuera de l√≠mites permitidos: {limites['plazo_minimo_meses']} - {limites['plazo_maximo_meses']} meses"
        )
    
    # C√°lculo de cuota (m√©todo franc√©s)
    tasa_mensual = (tasa / 100) / 12
    
    if tasa_mensual == 0:
        cuota = monto / plazo_meses
    else:
        cuota = monto * (tasa_mensual * (1 + tasa_mensual)**plazo_meses) / ((1 + tasa_mensual)**plazo_meses - 1)
    
    total_pagar = cuota * plazo_meses
    total_interes = total_pagar - monto
    
    return {
        "monto_solicitado": monto,
        "plazo_meses": plazo_meses,
        "tasa_interes_anual": tasa,
        "cuota_mensual": round(cuota, 2),
        "total_pagar": round(total_pagar, 2),
        "total_interes": round(total_interes, 2),
        "relacion_cuota_ingreso_sugerida": "< 40%"
    }


@router.get("/validar-limites/{cliente_id}")
def validar_limites_cliente(
    cliente_id: int,
    monto_solicitado: float,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    Validar si un cliente puede solicitar un nuevo pr√©stamo seg√∫n l√≠mites configurados.
    """
    from app.models.prestamo import Prestamo
    
    # Contar pr√©stamos activos del cliente
    prestamos_activos = db.query(Prestamo).filter(
        Prestamo.cliente_id == cliente_id,
        Prestamo.estado == "ACTIVO"
    ).count()
    
    limite_prestamos = _config_cache["limites"]["limite_prestamos_activos"]
    limites_monto = _config_cache["limites"]
    
    # Validaciones
    validaciones = {
        "puede_solicitar": True,
        "mensajes": []
    }
    
    if prestamos_activos >= limite_prestamos:
        validaciones["puede_solicitar"] = False
        validaciones["mensajes"].append(
            f"El cliente ya tiene {prestamos_activos} pr√©stamos activos (l√≠mite: {limite_prestamos})"
        )
    
    if monto_solicitado < limites_monto["monto_minimo_prestamo"]:
        validaciones["puede_solicitar"] = False
        validaciones["mensajes"].append(
            f"Monto m√≠nimo permitido: ${limites_monto['monto_minimo_prestamo']:,.2f}"
        )
    
    if monto_solicitado > limites_monto["monto_maximo_prestamo"]:
        validaciones["puede_solicitar"] = False
        validaciones["mensajes"].append(
            f"Monto m√°ximo permitido: ${limites_monto['monto_maximo_prestamo']:,.2f}"
        )
    
    return {
        "cliente_id": cliente_id,
        "prestamos_activos": prestamos_activos,
        "limite_prestamos": limite_prestamos,
        "monto_solicitado": monto_solicitado,
        **validaciones
    }
