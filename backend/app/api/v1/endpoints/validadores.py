# backend/app/api/v1/endpoints/validadores.py
"""
üîç Endpoints de Validadores y Correcci√≥n de Datos
Sistema para validar y corregir formatos incorrectos
"""
from fastapi import APIRouter, Depends, HTTPException, Query, BackgroundTasks
from sqlalchemy.orm import Session
from typing import Dict, Any, List, Optional
from datetime import datetime, date
from decimal import Decimal
from pydantic import BaseModel, Field

from app.db.session import get_db
from app.models.cliente import Cliente
from app.models.pago import Pago
from app.models.user import User
from app.models.auditoria import Auditoria, TipoAccion
from app.api.deps import get_current_user
from app.services.validators_service import (
    ValidadorTelefono,
    ValidadorCedula,
    ValidadorFecha,
    ValidadorMonto,
    ValidadorAmortizaciones,
    ValidadorEmail,
    ServicioCorreccionDatos,
    AutoFormateador
)

router = APIRouter()

# ============================================
# SCHEMAS PARA VALIDADORES
# ============================================

class ValidacionCampo(BaseModel):
    """Schema para validaci√≥n de campo individual"""
    campo: str = Field(..., description="Nombre del campo a validar")
    valor: str = Field(..., description="Valor a validar")
    pais: str = Field("VENEZUELA", description="Pa√≠s para validaciones espec√≠ficas")
    contexto: Optional[Dict[str, Any]] = Field(None, description="Contexto adicional para validaci√≥n")


class CorreccionDatos(BaseModel):
    """Schema para correcci√≥n de datos de cliente"""
    cliente_id: int = Field(..., description="ID del cliente")
    correcciones: Dict[str, str] = Field(..., description="Campos a corregir con nuevos valores")
    pais: str = Field("VENEZUELA", description="Pa√≠s para validaciones")
    recalcular_amortizacion: bool = Field(True, description="Recalcular amortizaci√≥n si cambia fecha")


# ============================================
# VALIDACI√ìN EN TIEMPO REAL
# ============================================

@router.post("/validar-campo")
def validar_campo_tiempo_real(
    validacion: ValidacionCampo,
    current_user: User = Depends(get_current_user)
):
    """
    üîç Validar campo individual en tiempo real (para frontend)
    
    Ejemplos de uso:
    ‚Ä¢ Tel√©fono: "4241234567" ‚Üí "+58 424 1234567"
    ‚Ä¢ C√©dula: "12345678" ‚Üí "V12345678"
    ‚Ä¢ Email: "USUARIO@GMAIL.COM" ‚Üí "usuario@gmail.com"
    ‚Ä¢ Fecha: "15/03/2024" ‚Üí Validaci√≥n + formato ISO
    ‚Ä¢ Monto: "15000" ‚Üí "$15,000.00"
    """
    try:
        campo = validacion.campo.lower()
        valor = validacion.valor
        pais = validacion.pais
        
        if campo == "telefono":
            resultado = ValidadorTelefono.validar_y_formatear_telefono(valor, pais)
            
        elif campo == "cedula":
            resultado = ValidadorCedula.validar_y_formatear_cedula(valor, pais)
            
        elif campo == "email":
            resultado = ValidadorEmail.validar_email(valor)
            
        elif campo == "fecha_entrega":
            resultado = ValidadorFecha.validar_fecha_entrega(valor)
            
        elif campo == "fecha_pago":
            resultado = ValidadorFecha.validar_fecha_pago(valor)
            
        elif campo in ["total_financiamiento", "monto_pagado", "cuota_inicial"]:
            saldo_maximo = None
            if validacion.contexto and "saldo_pendiente" in validacion.contexto:
                saldo_maximo = Decimal(str(validacion.contexto["saldo_pendiente"]))
            
            resultado = ValidadorMonto.validar_y_formatear_monto(valor, campo.upper(), saldo_maximo)
            
        elif campo == "amortizaciones":
            resultado = ValidadorAmortizaciones.validar_amortizaciones(valor)
            
        else:
            return {
                "valido": False,
                "error": f"Campo '{campo}' no soporta validaci√≥n autom√°tica",
                "valor_original": valor
            }
        
        return {
            "campo": validacion.campo,
            "validacion": resultado,
            "timestamp": datetime.now().isoformat(),
            "recomendaciones": _generar_recomendaciones_campo(campo, resultado)
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error validando campo: {str(e)}")


@router.post("/formatear-tiempo-real")
def formatear_mientras_escribe(
    campo: str,
    valor: str,
    pais: str = "VENEZUELA",
    current_user: User = Depends(get_current_user)
):
    """
    ‚ú® Auto-formatear valor mientras el usuario escribe (para frontend)
    
    Uso en frontend:
    - onKeyUp/onChange del input
    - Formateo instant√°neo sin validaci√≥n completa
    - Para mejorar UX mientras el usuario escribe
    """
    try:
        resultado = AutoFormateador.formatear_mientras_escribe(campo, valor, pais)
        
        return {
            "campo": campo,
            "valor_original": valor,
            "resultado_formateo": resultado,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error formateando: {str(e)}")


# ============================================
# CORRECCI√ìN DE DATOS
# ============================================

@router.post("/corregir-cliente/{cliente_id}")
def corregir_datos_cliente(
    cliente_id: int,
    correcciones: Dict[str, str],
    pais: str = Query("VENEZUELA", description="Pa√≠s para validaciones"),
    recalcular_amortizacion: bool = Query(True, description="Recalcular amortizaci√≥n si cambia fecha"),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    üîß Corregir datos incorrectos de un cliente espec√≠fico
    
    Ejemplo de uso:
    {
        "telefono": "+58 424 1234567",
        "cedula": "V12345678", 
        "email": "cliente@email.com",
        "fecha_entrega": "15/03/2024"
    }
    """
    try:
        # Verificar que el cliente existe
        cliente = db.query(Cliente).filter(Cliente.id == cliente_id).first()
        if not cliente:
            raise HTTPException(status_code=404, detail="Cliente no encontrado")
        
        # Procesar correcciones
        resultado_correccion = ServicioCorreccionDatos.corregir_datos_cliente(
            cliente_id, correcciones, pais
        )
        
        if resultado_correccion.get("error_general"):
            raise HTTPException(status_code=400, detail=resultado_correccion["error_general"])
        
        # Aplicar correcciones v√°lidas a la base de datos
        cambios_aplicados = []
        for correccion in resultado_correccion["correcciones_aplicadas"]:
            if correccion["cambio_realizado"]:
                campo = correccion["campo"]
                nuevo_valor = correccion["valor_nuevo"]
                
                # Mapear campos a atributos del modelo
                if campo == "telefono":
                    cliente.telefono = nuevo_valor
                elif campo == "cedula":
                    cliente.cedula = nuevo_valor
                elif campo == "email":
                    cliente.email = nuevo_valor
                elif campo == "fecha_entrega":
                    cliente.fecha_entrega = datetime.strptime(nuevo_valor, "%d/%m/%Y").date()
                elif campo == "total_financiamiento":
                    cliente.total_financiamiento = Decimal(nuevo_valor)
                elif campo == "cuota_inicial":
                    cliente.cuota_inicial = Decimal(nuevo_valor)
                elif campo == "amortizaciones":
                    cliente.numero_amortizaciones = int(nuevo_valor)
                
                cambios_aplicados.append({
                    "campo": campo,
                    "valor_anterior": correccion["valor_anterior"],
                    "valor_nuevo": nuevo_valor
                })
        
        # Guardar cambios si hay correcciones v√°lidas
        if cambios_aplicados:
            db.commit()
            
            # Registrar en auditor√≠a
            auditoria = Auditoria.registrar(
                usuario_id=current_user.id,
                accion=TipoAccion.ACTUALIZACION,
                entidad="cliente",
                entidad_id=cliente_id,
                detalles=f"Correcci√≥n de datos: {len(cambios_aplicados)} campos actualizados"
            )
            db.add(auditoria)
            db.commit()
        
        # Manejar rec√°lculo de amortizaci√≥n si es necesario
        mensaje_recalculo = None
        if resultado_correccion["requiere_recalculo_amortizacion"] and recalcular_amortizacion:
            # TODO: Integrar con servicio de amortizaci√≥n
            mensaje_recalculo = "‚ö†Ô∏è Se requiere recalcular la tabla de amortizaci√≥n"
        
        return {
            "mensaje": "‚úÖ Correcci√≥n de datos procesada exitosamente",
            "cliente": {
                "id": cliente_id,
                "nombre": cliente.nombre_completo,
                "cedula": cliente.cedula
            },
            "resultado_correccion": resultado_correccion,
            "cambios_aplicados_bd": cambios_aplicados,
            "total_cambios": len(cambios_aplicados),
            "errores_encontrados": len(resultado_correccion["errores_encontrados"]),
            "recalculo_amortizacion": {
                "requerido": resultado_correccion["requiere_recalculo_amortizacion"],
                "aplicado": recalcular_amortizacion and resultado_correccion["requiere_recalculo_amortizacion"],
                "mensaje": mensaje_recalculo
            },
            "fecha_correccion": datetime.now().isoformat(),
            "corregido_por": current_user.full_name
        }
        
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=f"Error corrigiendo datos: {str(e)}")


@router.post("/corregir-pago/{pago_id}")
def corregir_datos_pago(
    pago_id: int,
    monto_pagado: Optional[str] = None,
    fecha_pago: Optional[str] = None,
    numero_operacion: Optional[str] = None,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    üí∞ Corregir datos incorrectos de un pago espec√≠fico
    
    Ejemplo: Pago con "MONTO PAGADO = ERROR"
    """
    try:
        # Verificar que el pago existe
        pago = db.query(Pago).filter(Pago.id == pago_id).first()
        if not pago:
            raise HTTPException(status_code=404, detail="Pago no encontrado")
        
        correcciones_aplicadas = []
        errores_validacion = []
        
        # Corregir monto pagado
        if monto_pagado is not None:
            validacion_monto = ValidadorMonto.validar_y_formatear_monto(
                monto_pagado, "MONTO_PAGO"
            )
            
            if validacion_monto["valido"]:
                pago.monto_pagado = validacion_monto["valor_decimal"]
                correcciones_aplicadas.append({
                    "campo": "monto_pagado",
                    "valor_anterior": str(pago.monto_pagado),
                    "valor_nuevo": str(validacion_monto["valor_decimal"])
                })
            else:
                errores_validacion.append({
                    "campo": "monto_pagado",
                    "error": validacion_monto["error"]
                })
        
        # Corregir fecha de pago
        if fecha_pago is not None:
            validacion_fecha = ValidadorFecha.validar_fecha_pago(fecha_pago)
            
            if validacion_fecha["valido"]:
                fecha_parseada = datetime.strptime(validacion_fecha["fecha_iso"], "%Y-%m-%d").date()
                pago.fecha_pago = fecha_parseada
                correcciones_aplicadas.append({
                    "campo": "fecha_pago",
                    "valor_anterior": str(pago.fecha_pago),
                    "valor_nuevo": str(fecha_parseada)
                })
            else:
                errores_validacion.append({
                    "campo": "fecha_pago",
                    "error": validacion_fecha["error"]
                })
        
        # Corregir n√∫mero de operaci√≥n
        if numero_operacion is not None:
            if numero_operacion.upper() != "ERROR" and numero_operacion.strip():
                pago.numero_operacion = numero_operacion.strip()
                correcciones_aplicadas.append({
                    "campo": "numero_operacion",
                    "valor_anterior": pago.numero_operacion,
                    "valor_nuevo": numero_operacion.strip()
                })
        
        # Guardar cambios si hay correcciones v√°lidas
        if correcciones_aplicadas:
            # Limpiar observaciones de error
            if pago.observaciones and "REQUIERE_VALIDACI√ìN" in pago.observaciones:
                pago.observaciones = f"CORREGIDO - {datetime.now().strftime('%d/%m/%Y')} por {current_user.full_name}"
            
            db.commit()
            
            # Registrar en auditor√≠a
            auditoria = Auditoria.registrar(
                usuario_id=current_user.id,
                accion=TipoAccion.ACTUALIZACION,
                entidad="pago",
                entidad_id=pago_id,
                detalles=f"Correcci√≥n de pago: {len(correcciones_aplicadas)} campos actualizados"
            )
            db.add(auditoria)
            db.commit()
        
        return {
            "mensaje": "‚úÖ Correcci√≥n de pago procesada exitosamente",
            "pago": {
                "id": pago_id,
                "cliente": pago.prestamo.cliente.nombre_completo if pago.prestamo else "N/A",
                "cuota": pago.numero_cuota
            },
            "correcciones_aplicadas": correcciones_aplicadas,
            "errores_validacion": errores_validacion,
            "total_correcciones": len(correcciones_aplicadas),
            "fecha_correccion": datetime.now().isoformat(),
            "corregido_por": current_user.full_name
        }
        
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=f"Error corrigiendo pago: {str(e)}")


# ============================================
# DETECCI√ìN MASIVA DE ERRORES
# ============================================

@router.get("/detectar-errores-masivo")
def detectar_errores_masivo(
    limite: int = Query(100, ge=1, le=1000, description="L√≠mite de registros a analizar"),
    tipo_analisis: str = Query("CLIENTES", description="CLIENTES, PAGOS, AMBOS"),
    pais: str = Query("VENEZUELA", description="Pa√≠s para validaciones"),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    üîç Detectar datos incorrectos masivamente en la base de datos
    
    Detecta:
    ‚Ä¢ Tel√©fonos mal formateados (sin +58)
    ‚Ä¢ C√©dulas sin letra (V/E)
    ‚Ä¢ Emails inv√°lidos
    ‚Ä¢ Fechas = "ERROR"
    ‚Ä¢ Montos = "ERROR"
    """
    # Solo admin y gerente pueden ejecutar an√°lisis masivo
    if current_user.rol not in ["ADMINISTRADOR_GENERAL", "GERENTE"]:
        raise HTTPException(status_code=403, detail="Sin permisos para an√°lisis masivo")
    
    try:
        resultado = ServicioCorreccionDatos.detectar_datos_incorrectos_masivo(db, limite)
        
        return {
            "analisis_masivo": resultado,
            "parametros": {
                "limite": limite,
                "tipo_analisis": tipo_analisis,
                "pais": pais,
                "ejecutado_por": current_user.full_name
            },
            "acciones_sugeridas": [
                "Usar herramienta de correcci√≥n masiva para los casos detectados",
                "Configurar validadores en formularios del frontend",
                "Capacitar usuarios en formatos correctos",
                "Implementar auto-formateo en tiempo real"
            ]
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error en an√°lisis masivo: {str(e)}")


@router.post("/corregir-masivo")
def corregir_datos_masivo(
    correcciones_masivas: List[CorreccionDatos],
    background_tasks: BackgroundTasks,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    üîß Correcci√≥n masiva de datos incorrectos
    """
    if current_user.rol not in ["ADMINISTRADOR_GENERAL", "GERENTE"]:
        raise HTTPException(status_code=403, detail="Sin permisos para correcci√≥n masiva")
    
    try:
        # Ejecutar correcciones en background
        background_tasks.add_task(
            _procesar_correcciones_masivas,
            correcciones_masivas,
            current_user.id,
            db
        )
        
        return {
            "mensaje": "‚úÖ Correcci√≥n masiva iniciada en background",
            "total_clientes": len(correcciones_masivas),
            "estimacion_tiempo": f"{len(correcciones_masivas) * 2} segundos",
            "ejecutado_por": current_user.full_name,
            "timestamp": datetime.now().isoformat(),
            "seguimiento": "GET /api/v1/validadores/estado-correccion-masiva"
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error iniciando correcci√≥n masiva: {str(e)}")


# ============================================
# EJEMPLOS DE CORRECCI√ìN
# ============================================

@router.get("/ejemplos-correccion")
def obtener_ejemplos_correccion(
    pais: str = Query("VENEZUELA", description="Pa√≠s para ejemplos"),
    current_user: User = Depends(get_current_user)
):
    """
    üìã Obtener ejemplos de correcci√≥n de formatos incorrectos
    """
    try:
        ejemplos = {
            "telefono": {
                "titulo": "üì± TEL√âFONO MAL FORMATEADO",
                "ejemplo_incorrecto": "4241234567",
                "problema": "üü° Sin c√≥digo de pa√≠s (+58)",
                "ejemplo_correccion": "+58 424 1234567",
                "proceso": "Sistema auto-formatea al guardar",
                "validaciones": [
                    "‚úÖ Formato correcto",
                    "‚úÖ Operadora v√°lida",
                    "‚úÖ Longitud correcta"
                ]
            },
            
            "cedula": {
                "titulo": "üìù C√âDULA SIN LETRA",
                "ejemplo_incorrecto": "12345678",
                "problema": "üü° Sin prefijo V/E",
                "ejemplo_correccion": "V12345678",
                "proceso": "Admin edita y sistema valida",
                "validaciones": [
                    "‚úÖ Prefijo v√°lido (V/E/J/G)",
                    "‚úÖ Longitud correcta (7-8 d√≠gitos)",
                    "‚úÖ Solo n√∫meros despu√©s del prefijo"
                ]
            },
            
            "fecha": {
                "titulo": "üìÖ FECHA EN FORMATO INCORRECTO",
                "ejemplo_incorrecto": "ERROR",
                "problema": "üî¥ Valor inv√°lido",
                "ejemplo_correccion": "15/03/2024",
                "proceso": "Admin selecciona en calendario",
                "validaciones": [
                    "‚úÖ No es fecha futura",
                    "‚úÖ Formato correcto",
                    "‚ö†Ô∏è Puede requerir rec√°lculo de amortizaci√≥n"
                ],
                "accion_adicional": "Sistema pregunta si recalcular tabla de amortizaci√≥n"
            },
            
            "monto": {
                "titulo": "üí∞ MONTO PAGADO = ERROR",
                "ejemplo_incorrecto": "ERROR",
                "problema": "üî¥ Valor inv√°lido",
                "ejemplo_correccion": "15000.00",
                "proceso": "Admin/Cobranzas ingresa monto correcto",
                "validaciones": [
                    "‚úÖ Es n√∫mero positivo",
                    "‚úÖ Tiene m√°ximo 2 decimales",
                    "‚úÖ No excede saldo pendiente"
                ]
            }
        }
        
        return {
            "titulo": "üìã EJEMPLOS DE CORRECCI√ìN DE FORMATOS INCORRECTOS",
            "pais_configurado": pais,
            "ejemplos": ejemplos,
            "herramientas_disponibles": {
                "validacion_tiempo_real": "POST /api/v1/validadores/validar-campo",
                "formateo_automatico": "POST /api/v1/validadores/formatear-tiempo-real",
                "correccion_individual": "POST /api/v1/validadores/corregir-cliente/{id}",
                "deteccion_masiva": "GET /api/v1/validadores/detectar-errores-masivo"
            },
            "integracion_frontend": {
                "validacion_onchange": "Usar endpoint validar-campo en onChange",
                "formateo_onkeyup": "Usar endpoint formatear-tiempo-real en onKeyUp",
                "calendario_fechas": "Usar datepicker para fechas cr√≠ticas",
                "input_numerico": "Usar input type='number' para montos"
            }
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error obteniendo ejemplos: {str(e)}")


# ============================================
# ENDPOINTS DE PRUEBA
# ============================================

@router.get("/test-simple")
def test_validadores_simple():
    """
    üîß Endpoint de prueba simple para validadores
    """
    return {
        "status": "ok",
        "message": "Endpoint de validadores funcionando",
        "timestamp": datetime.now().isoformat()
    }

@router.get("/test-con-auth")
def test_validadores_con_auth(
    current_user: User = Depends(get_current_user)
):
    """
    üîß Endpoint de prueba con autenticaci√≥n para validadores
    """
    return {
        "status": "ok",
        "message": "Endpoint de validadores con auth funcionando",
        "user": current_user.email,
        "timestamp": datetime.now().isoformat()
    }

# ============================================
# CONFIGURACI√ìN DE VALIDADORES
# ============================================

@router.get("/configuracion")
def obtener_configuracion_validadores(
    current_user: User = Depends(get_current_user)
):
    """
    ‚öôÔ∏è Obtener configuraci√≥n de validadores para el frontend
    """
    try:
        print(f"üîß Obteniendo configuraci√≥n de validadores para usuario: {current_user.email}")
        return {
            "titulo": "‚öôÔ∏è CONFIGURACI√ìN DE VALIDADORES",
            
            "paises_soportados": {
                "venezuela": {
                    "codigo": "VENEZUELA",
                    "telefono_formato": "+58 XXXXXXXXXX",
                    "telefono_requisitos": {
                        "debe_empezar_por": "+58",
                        "longitud_total": "10 d√≠gitos",
                        "primer_digito": "No puede ser 0",
                        "digitos_validos": "0-9"
                    },
                    "cedula_formato": "V12345678",
                    "cedula_prefijos": ["V", "E", "J"],
                    "cedula_longitud": "7-10 d√≠gitos"
                },
                "dominicana": {
                    "codigo": "DOMINICANA", 
                    "telefono_formato": "+1 XXX XXXXXXX",
                    "cedula_formato": "001-1234567-8",
                    "operadoras": ["809", "829", "849"]
                },
                "colombia": {
                    "codigo": "COLOMBIA",
                    "telefono_formato": "+57 XXX XXXXXXX",
                    "cedula_formato": "12345678",
                    "operadoras": ["300", "301", "310", "311", "320"]
                }
            },
            
            "validadores_disponibles": {
                "telefono": {
                    "descripcion": "Validaci√≥n y formateo de n√∫meros telef√≥nicos",
                    "auto_formateo": True,
                    "validacion_tiempo_real": True
                },
                "cedula": {
                    "descripcion": "Validaci√≥n de c√©dulas por pa√≠s",
                    "auto_formateo": True,
                    "validacion_tiempo_real": True
                },
                "email": {
                    "descripcion": "Validaci√≥n RFC 5322 + normalizaci√≥n a min√∫sculas",
                    "auto_formateo": True,
                    "validacion_tiempo_real": True,
                    "normalizacion": {
                        "convertir_minusculas": True,
                        "remover_espacios": True,
                        "normalizar_aroba": True
                    }
                },
                "fechas": {
                    "descripcion": "Validaci√≥n estricta formato DD/MM/YYYY",
                    "auto_formateo": False,
                    "validacion_tiempo_real": True,
                    "requiere_calendario": True,
                    "formato_requerido": "DD/MM/YYYY",
                    "requisitos": {
                        "dia": "2 d√≠gitos (01-31)",
                        "mes": "2 d√≠gitos (01-12)",
                        "a√±o": "4 d√≠gitos",
                        "separador": "/ (barra)"
                    }
                },
                "montos": {
                    "descripcion": "Validaci√≥n con l√≠mites por tipo",
                    "auto_formateo": True,
                    "validacion_tiempo_real": True,
                    "formato_display": "$X,XXX.XX"
                },
                "amortizaciones": {
                    "descripcion": "Validaci√≥n de rango 1-84 meses",
                    "auto_formateo": False,
                    "validacion_tiempo_real": True
                }
            },
            
            "reglas_negocio": {
                "fecha_entrega": "No puede ser futura",
                "fecha_pago": "M√°ximo 1 d√≠a en el futuro",
                "monto_pago": "No puede exceder saldo pendiente",
                "total_financiamiento": "Entre $100 y $50,000,000",
                "amortizaciones": "Entre 1 y 84 meses",
                "cedula_venezuela": "Prefijos V/E/J + 7-10 d√≠gitos del 0-9",
                "telefono_venezuela": "+58 + 10 d√≠gitos (primer d√≠gito no puede ser 0)",
                "fecha_formato": "DD/MM/YYYY (d√≠a 2 d√≠gitos, mes 2 d√≠gitos, a√±o 4 d√≠gitos)",
                "email_normalizacion": "Conversi√≥n autom√°tica a min√∫sculas (incluyendo @)"
            },
            
            "configuracion_frontend": {
                "validacion_onchange": "Validar al cambiar valor",
                "formateo_onkeyup": "Formatear mientras escribe",
                "mostrar_errores": "Mostrar errores en tiempo real",
                "sugerencias": "Mostrar sugerencias de correcci√≥n",
                "calendario_obligatorio": "Para fechas cr√≠ticas"
            }
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error obteniendo configuraci√≥n: {str(e)}")


# ============================================
# FUNCIONES AUXILIARES
# ============================================

async def _procesar_correcciones_masivas(
    correcciones: List[CorreccionDatos],
    user_id: int,
    db_session: Session
):
    """Procesar correcciones masivas en background"""
    try:
        from app.db.session import SessionLocal
        db = SessionLocal()
        
        exitosas = 0
        fallidas = 0
        
        for correccion in correcciones:
            try:
                resultado = ServicioCorreccionDatos.corregir_datos_cliente(
                    correccion.cliente_id,
                    correccion.correcciones,
                    correccion.pais
                )
                
                if resultado.get("cambios_realizados"):
                    exitosas += 1
                else:
                    fallidas += 1
                    
            except Exception as e:
                logger.error(f"Error corrigiendo cliente {correccion.cliente_id}: {e}")
                fallidas += 1
        
        logger.info(f"üìä Correcci√≥n masiva completada: {exitosas} exitosas, {fallidas} fallidas")
        
        db.close()
        
    except Exception as e:
        logger.error(f"Error en correcci√≥n masiva: {e}")


def _generar_recomendaciones_campo(campo: str, resultado_validacion: Dict) -> List[str]:
    """Generar recomendaciones espec√≠ficas por campo"""
    recomendaciones = []
    
    if not resultado_validacion.get("valido"):
        if campo == "telefono":
            recomendaciones.append("üì± Use formato internacional: +58 424 1234567")
            recomendaciones.append("üîç Verifique que la operadora sea v√°lida")
        elif campo == "cedula":
            recomendaciones.append("üìù Agregue prefijo V para venezolanos, E para extranjeros")
            recomendaciones.append("üî¢ Verifique que tenga 7-8 d√≠gitos despu√©s de la letra")
        elif campo == "email":
            recomendaciones.append("üìß Verifique formato: usuario@dominio.com")
            recomendaciones.append("üö´ Evite dominios de email temporal")
        elif "fecha" in campo:
            recomendaciones.append("üìÖ Use calendario para seleccionar fecha")
            recomendaciones.append("‚è∞ Verifique reglas de negocio (no futuras)")
        elif "monto" in campo:
            recomendaciones.append("üí∞ Use solo n√∫meros y punto decimal")
            recomendaciones.append("üìä Verifique l√≠mites permitidos")
    
    return recomendaciones


# ============================================
# ENDPOINT DE VERIFICACI√ìN
# ============================================

@router.get("/verificacion-validadores")
def verificar_sistema_validadores(
    current_user: User = Depends(get_current_user)
):
    """
    üîç Verificaci√≥n completa del sistema de validadores
    """
    return {
        "titulo": "üîç SISTEMA DE VALIDADORES Y CORRECCI√ìN DE DATOS",
        "fecha_verificacion": datetime.now().isoformat(),
        
        "validadores_implementados": {
            "telefono": {
                "estado": "‚úÖ IMPLEMENTADO",
                "paises": ["Venezuela", "Rep√∫blica Dominicana", "Colombia"],
                "auto_formateo": True,
                "ejemplo": "4241234567 ‚Üí +58 424 1234567"
            },
            "cedula": {
                "estado": "‚úÖ IMPLEMENTADO",
                "paises": ["Venezuela", "Rep√∫blica Dominicana", "Colombia"],
                "auto_formateo": True,
                "ejemplo": "12345678 ‚Üí V12345678",
                "venezuela_prefijos": ["V", "E", "J"],
                "venezuela_longitud": "7-10 d√≠gitos"
            },
            "email": {
                "estado": "‚úÖ IMPLEMENTADO",
                "validacion": "RFC 5322",
                "dominios_bloqueados": True,
                "ejemplo": "USUARIO@GMAIL.COM ‚Üí usuario@gmail.com"
            },
            "fechas": {
                "estado": "‚úÖ IMPLEMENTADO",
                "reglas_negocio": True,
                "formatos_multiples": True,
                "ejemplo": "ERROR ‚Üí Calendario para selecci√≥n"
            },
            "montos": {
                "estado": "‚úÖ IMPLEMENTADO",
                "limites_por_tipo": True,
                "auto_formateo": True,
                "ejemplo": "15000 ‚Üí $15,000.00"
            },
            "amortizaciones": {
                "estado": "‚úÖ IMPLEMENTADO",
                "rango": "1-84 meses",
                "validacion_entero": True,
                "ejemplo": "60.5 ‚Üí 60 meses"
            }
        },
        
        "funcionalidades_especiales": {
            "validacion_tiempo_real": "‚úÖ Para uso en frontend",
            "auto_formateo_escritura": "‚úÖ Mientras el usuario escribe",
            "deteccion_masiva": "‚úÖ An√°lisis de toda la BD",
            "correccion_masiva": "‚úÖ Correcci√≥n en lotes",
            "reglas_negocio": "‚úÖ Validaciones espec√≠ficas del dominio",
            "recalculo_amortizacion": "‚úÖ Al cambiar fecha de entrega"
        },
        
        "endpoints_principales": {
            "validar_campo": "POST /api/v1/validadores/validar-campo",
            "formatear_tiempo_real": "POST /api/v1/validadores/formatear-tiempo-real",
            "corregir_cliente": "POST /api/v1/validadores/corregir-cliente/{id}",
            "detectar_errores": "GET /api/v1/validadores/detectar-errores-masivo",
            "ejemplos": "GET /api/v1/validadores/ejemplos-correccion"
        },
        
        "integracion_frontend": {
            "validacion_onchange": "Validar cuando cambia el valor",
            "formateo_onkeyup": "Formatear mientras escribe",
            "mostrar_errores": "Mostrar errores en tiempo real",
            "sugerencias_correccion": "Mostrar c√≥mo corregir",
            "calendario_fechas": "Usar datepicker para fechas",
            "input_numerico": "Input type='number' para montos"
        },
        
        "beneficios": [
            "üîç Detecci√≥n autom√°tica de datos incorrectos",
            "‚ú® Auto-formateo mejora experiencia de usuario",
            "üîß Correcci√≥n masiva ahorra tiempo",
            "üìä An√°lisis de calidad de datos",
            "‚ö° Validaci√≥n en tiempo real previene errores",
            "üéØ Reglas de negocio espec√≠ficas del dominio"
        ]
    }


@router.get("/configuracion-validadores")
async def obtener_configuracion_validadores():
    """
    üîß Obtener configuraci√≥n actualizada de validadores para el frontend
    """
    return {
        "cedula_venezuela": {
            "descripcion": "C√©dula venezolana: V/E/J + exactamente entre 7 y 10 d√≠gitos, sin caracteres especiales",
            "requisitos": {
                "debe_empezar_por": "V, E o J",
                "longitud_digitos": "Entre 7 y 10 d√≠gitos",
                "sin_caracteres_especiales": "Solo letra inicial + n√∫meros",
                "ejemplos_validos": ["V1234567", "E12345678", "J123456789", "V1234567890"]
            },
            "patron_regex": r"^[VEJ]\d{7,10}$",
            "formato_display": "V12345678",
            "tipos": {
                "V": "Venezolano",
                "E": "Extranjero", 
                "J": "Jur√≠dico"
            }
        },
        "telefono_venezuela": {
            "descripcion": "Tel√©fono venezolano: +58 seguido de 10 d√≠gitos (primer d√≠gito no puede ser 0)",
            "requisitos": {
                "debe_empezar_por": "+58",
                "longitud_total": 10,
                "primer_digito": "No puede ser 0",
                "digitos_validos": "0-9"
            },
            "patron_regex": r"^\+58[1-9][0-9]{9}$",
            "formato_display": "+58 XXXXXXXXXX"
        },
        "email": {
            "descripcion": "Email v√°lido con normalizaci√≥n autom√°tica a min√∫sculas",
            "requisitos": {
                "formato": "usuario@dominio.com",
                "normalizacion": "Autom√°tica a min√∫sculas",
                "dominios_bloqueados": ["tempmail.org", "10minutemail.com", "guerrillamail.com"]
            },
            "patron_regex": r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
        },
        "fecha": {
            "descripcion": "Fecha en formato DD/MM/YYYY",
            "requisitos": {
                "formato": "DD/MM/YYYY",
                "dia": "01-31",
                "mes": "01-12", 
                "a√±o": "1900-2100"
            },
            "patron_regex": r"^\d{2}/\d{2}/\d{4}$"
        },
        "monto": {
            "descripcion": "Monto num√©rico positivo con m√°ximo 2 decimales",
            "requisitos": {
                "formato": "N√∫mero positivo",
                "decimales": "M√°ximo 2",
                "separador_miles": "Comas opcionales",
                "simbolo_moneda": "$ opcional"
            }
        }
    }
