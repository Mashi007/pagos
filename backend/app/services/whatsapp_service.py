# backend/app/services/whatsapp_service.py
"""
Servicio para env√≠o de mensajes WhatsApp usando Twilio.
"""
from twilio.rest import Client
from typing import Optional
from datetime import datetime
import logging

from app.core.config import settings
from app.db.session import SessionLocal
from app.models.notificacion import Notificacion, EstadoNotificacion

logger = logging.getLogger(__name__)


class WhatsAppService:
    """Servicio para gesti√≥n de WhatsApp"""
    
    def __init__(self):
        # Configuraci√≥n de Twilio
        self.account_sid = settings.TWILIO_ACCOUNT_SID
        self.auth_token = settings.TWILIO_AUTH_TOKEN
        self.from_number = settings.TWILIO_WHATSAPP_NUMBER
        
        # Inicializar cliente de Twilio
        if self.account_sid and self.auth_token:
            self.client = Client(self.account_sid, self.auth_token)
        else:
            self.client = None
            logger.warning("Credenciales de Twilio no configuradas")
    
    async def send_message(
        self,
        to_number: str,
        message: str,
        notificacion_id: Optional[int] = None
    ) -> bool:
        """
        Enviar mensaje de WhatsApp.
        
        Args:
            to_number: N√∫mero de tel√©fono (formato: +593999999999)
            message: Mensaje a enviar
            notificacion_id: ID de notificaci√≥n para actualizar estado
        
        Returns:
            True si se envi√≥ exitosamente
        """
        if not self.client:
            logger.error("Cliente de Twilio no inicializado")
            return False
        
        try:
            # Formatear n√∫mero para WhatsApp (debe incluir whatsapp:)
            whatsapp_to = f"whatsapp:{to_number}"
            whatsapp_from = f"whatsapp:{self.from_number}"
            
            # Enviar mensaje
            message_obj = self.client.messages.create(
                body=message,
                from_=whatsapp_from,
                to=whatsapp_to
            )
            
            logger.info(f"WhatsApp enviado a {to_number}. SID: {message_obj.sid}")
            
            # Actualizar notificaci√≥n
            if notificacion_id:
                self._actualizar_notificacion(
                    notificacion_id,
                    EstadoNotificacion.ENVIADA.value,
                    sid=message_obj.sid
                )
            
            return True
            
        except Exception as e:
            logger.error(f"Error enviando WhatsApp a {to_number}: {str(e)}")
            
            # Actualizar notificaci√≥n como fallida
            if notificacion_id:
                self._actualizar_notificacion(
                    notificacion_id,
                    EstadoNotificacion.FALLIDA.value,
                    error=str(e)
                )
            
            return False
    
    async def send_template_message(
        self,
        to_number: str,
        template_name: str,
        variables: dict,
        notificacion_id: Optional[int] = None
    ) -> bool:
        """
        Enviar mensaje usando template predefinido.
        
        Args:
            to_number: N√∫mero destinatario
            template_name: Nombre del template
            variables: Variables para el template
            notificacion_id: ID de notificaci√≥n
        
        Returns:
            True si se envi√≥ exitosamente
        """
        try:
            # Generar mensaje desde template
            message = self._generate_message_from_template(template_name, variables)
            
            return await self.send_message(
                to_number=to_number,
                message=message,
                notificacion_id=notificacion_id
            )
            
        except Exception as e:
            logger.error(f"Error enviando template WhatsApp: {str(e)}")
            return False
    
    def _generate_message_from_template(self, template_name: str, variables: dict) -> str:
        """
        Generar mensaje desde template.
        """
        templates = {
            "recordatorio_pago": """
üîî *Recordatorio de Pago*

Hola {cliente_nombre},

Te recordamos que tienes una cuota pr√≥xima a vencer:

üí∞ Monto: ${monto}
üìÖ Vencimiento: {fecha_vencimiento}
‚è∞ D√≠as restantes: {dias_restantes}

Por favor, realiza tu pago a tiempo para evitar recargos.

Gracias por tu preferencia.
            """,
            
            "prestamo_aprobado": """
‚úÖ *¬°Pr√©stamo Aprobado!*

Hola {cliente_nombre},

¬°Buenas noticias! Tu pr√©stamo ha sido APROBADO.

üí∞ Monto: ${monto}
üìÖ Plazo: {plazo} meses
üíµ Cuota mensual: ${cuota}

Ac√©rcate a nuestras oficinas para firmar el contrato.
            """,
            
            "mora": """
‚ö†Ô∏è *Aviso de Mora*

Hola {cliente_nombre},

Tu cuenta presenta mora en el pago:

‚è∞ D√≠as de mora: {dias_mora}
üí∞ Saldo pendiente: ${saldo_pendiente}
üìå Recargo: ${recargo_mora}

Por favor, regulariza tu situaci√≥n para evitar acciones legales.

Cont√°ctanos: {telefono}
            """,
            
            "confirmacion_pago": """
‚úÖ *Pago Recibido*

Hola {cliente_nombre},

Confirmamos la recepci√≥n de tu pago:

üí∞ Monto: ${monto}
üìÖ Fecha: {fecha}
üî¢ Recibo: {recibo}

Gracias por tu puntualidad.
            """,
            
            "cuota_vencida": """
‚ö†Ô∏è *Cuota Vencida*

Hola {cliente_nombre},

Tu cuota del {fecha_vencimiento} est√° vencida.

üí∞ Monto: ${monto}
‚è∞ D√≠as vencidos: {dias_vencidos}

Por favor, regulariza tu pago lo antes posible.
            """
        }
        
        if template_name not in templates:
            raise ValueError(f"Template '{template_name}' no encontrado")
        
        return templates[template_name].format(**variables)
    
    def get_message_status(self, message_sid: str) -> dict:
        """
        Obtener estado de un mensaje enviado.
        
        Args:
            message_sid: SID del mensaje de Twilio
        
        Returns:
            Dict con informaci√≥n del mensaje
        """
        if not self.client:
            return {"error": "Cliente no inicializado"}
        
        try:
            message = self.client.messages(message_sid).fetch()
            
            return {
                "sid": message.sid,
                "status": message.status,
                "to": message.to,
                "from": message.from_,
                "date_sent": message.date_sent,
                "error_code": message.error_code,
                "error_message": message.error_message
            }
            
        except Exception as e:
            logger.error(f"Error obteniendo estado del mensaje {message_sid}: {str(e)}")
            return {"error": str(e)}
    
    def _actualizar_notificacion(
        self,
        notificacion_id: int,
        estado: str,
        sid: Optional[str] = None,
        error: Optional[str] = None
    ):
        """
        Actualizar estado de notificaci√≥n en base de datos.
        """
        try:
            db = SessionLocal()
            notificacion = db.query(Notificacion).filter(
                Notificacion.id == notificacion_id
            ).first()
            
            if notificacion:
                notificacion.estado = estado
                notificacion.enviada_en = datetime.now()
                
                if sid:
                    # Guardar SID de Twilio en metadata
                    if not notificacion.meta_info:
                        notificacion.meta_info = {}
                    notificacion.meta_info['twilio_sid'] = sid
                
                if error:
                    notificacion.error = error
                
                db.commit()
                
        except Exception as e:
            logger.error(f"Error actualizando notificaci√≥n {notificacion_id}: {str(e)}")
        finally:
            db.close()
    
    def validate_phone_number(self, phone_number: str) -> bool:
        """
        Validar formato de n√∫mero de tel√©fono.
        
        Args:
            phone_number: N√∫mero a validar
        
        Returns:
            True si es v√°lido
        """
        import re
        
        # Formato esperado: +593999999999 (Ecuador)
        pattern = r'^\+\d{10,15}$'
        return bool(re.match(pattern, phone_number))
